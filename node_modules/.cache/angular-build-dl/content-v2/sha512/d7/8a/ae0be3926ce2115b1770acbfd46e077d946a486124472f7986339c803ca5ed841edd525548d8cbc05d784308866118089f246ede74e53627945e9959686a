{"version":3,"sources":["webpack:///node_modules/@angular/material/fesm2015/badge.js"],"names":["nextId","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","_hasContent","_color","_overlap","position","size","_id","ngDevMode","nativeElement","nodeType","ELEMENT_NODE","Error","value","_setColor","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","setAttribute","removeAttribute","_hidden","indexOf","changes","contentChange","currentValue","trim","length","_updateTextContent","description","removeDescription","destroyNode","_createBadgeElement","textContent","_stringifyContent","createElement","activeClass","contentClass","_clearExistingBadges","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","oldDescription","content","describe","colorPalette","remove","cssClass","element","childCount","children","currentChild","contains","removeChild","ɵfac","MatBadge_Factory","t","ɵdir","type","selectors","hostAttrs","hostVars","hostBindings","MatBadge_HostBindings","rf","ctx","overlap","isAbove","isAfter","hidden","disabled","inputs","color","features","ctorParameters","String","decorators","args","propDecorators","selector","host","MatBadgeModule","ɵmod","ɵinj","factory","MatBadgeModule_Factory","imports","ngJitMode","declarations","exports"],"mappings":"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","file":"default~pages-chat-chat-module~pages-explore-explore-module~uploads-uploads-module-es5.js","sourcesContent":["import { Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {\n}\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeMixinBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        /** Whether the badge has any content. */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() { return this._color; }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() { return this._overlap; }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() { return this._description; }\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            const badgeElement = this._badgeElement;\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n            if (badgeElement) {\n                newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                    badgeElement.removeAttribute('aria-label');\n            }\n        }\n    }\n    /** Whether the badge is hidden. */\n    get hidden() { return this._hidden; }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    ngOnChanges(changes) {\n        const contentChange = changes['content'];\n        if (contentChange) {\n            const value = contentChange.currentValue;\n            this._hasContent = value != null && `${value}`.trim().length > 0;\n            this._updateTextContent();\n        }\n    }\n    ngOnDestroy() {\n        const badgeElement = this._badgeElement;\n        if (badgeElement) {\n            if (this.description) {\n                this._ariaDescriber.removeDescription(badgeElement, this.description);\n            }\n            // When creating a badge through the Renderer, Angular will keep it in an index.\n            // We have to destroy it ourselves, otherwise it'll be retained in memory.\n            if (this._renderer.destroyNode) {\n                this._renderer.destroyNode(badgeElement);\n            }\n        }\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered.\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    /** Injects a span element into the DOM with the content. */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this._stringifyContent();\n        }\n        return this._badgeElement;\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        const contentClass = 'mat-badge-content';\n        // Clear any existing badges which may have persisted from a server-side render.\n        this._clearExistingBadges(contentClass);\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this._stringifyContent();\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Sets the aria-label property on the element */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            const classList = this._elementRef.nativeElement.classList;\n            if (this._color) {\n                classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges(cssClass) {\n        const element = this._elementRef.nativeElement;\n        let childCount = element.children.length;\n        // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n        while (childCount--) {\n            const currentChild = element.children[childCount];\n            if (currentChild.classList.contains(cssClass)) {\n                element.removeChild(currentChild);\n            }\n        }\n    }\n    /** Gets the string representation of the badge content. */\n    _stringifyContent() {\n        // Convert null and undefined to an empty string which is consistent\n        // with how Angular handles them in inside template interpolations.\n        const content = this.content;\n        return content == null ? '' : `${content}`;\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatBadge.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"], content: [\"matBadge\", \"content\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatBadge.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); }, imports: [[\n            A11yModule,\n            MatCommonModule\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge, MatCommonModule],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n\n//# sourceMappingURL=badge.js.map"]}