(function () {
  function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

  function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

  function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

  function _possibleConstructorReturn(self, call) { if (call && (typeof call === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

  function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["default~dialogs-post-post-dlg-module~pages-chat-chat-module"], {
    /***/
    "0qK6":
    /*!************************************************************!*\
      !*** ./emoji-keyboard/src/lib/emoji-keyboard.component.ts ***!
      \************************************************************/

    /*! exports provided: EmojiKeyboardComponent */

    /***/
    function qK6(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmojiKeyboardComponent", function () {
        return EmojiKeyboardComponent;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk/scrolling */
      "7KAL");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _emoji_keys__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ./emoji-keys */
      "vKPu");
      /* harmony import */


      var _wizdm_rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @wizdm/rxjs */
      "j8uH");
      /* harmony import */


      var _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/flex-layout/flex */
      "VDRc");
      /* harmony import */


      var _angular_material_divider__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! @angular/material/divider */
      "BSbQ");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! @angular/material/button */
      "Dxy4");
      /* harmony import */


      var _angular_material_icon__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! @angular/material/icon */
      "Tj54");

      function EmojiKeyboardComponent_div_1_span_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 8);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var row_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

          var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](ctx_r4.labels && ctx_r4.labels[row_r3.id] || row_r3.name);
        }
      }

      function EmojiKeyboardComponent_div_1_ng_template_2_button_0_Template(rf, ctx) {
        if (rf & 1) {
          var _r11 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 10);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("mousedown", function EmojiKeyboardComponent_div_1_ng_template_2_button_0_Template_button_mousedown_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r11);

            var key_r9 = ctx.$implicit;

            var ctx_r10 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);

            return ctx_r10.press(key_r9);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](1, "span", 11);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var key_r9 = ctx.$implicit;

          var ctx_r8 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"](3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r8.disabled);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("mode", ctx_r8.mode)("key", key_r9);
        }
      }

      function EmojiKeyboardComponent_div_1_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, EmojiKeyboardComponent_div_1_ng_template_2_button_0_Template, 2, 3, "button", 9);
        }

        if (rf & 2) {
          var row_r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", row_r3);
        }
      }

      function EmojiKeyboardComponent_div_1_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "div", 5);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, EmojiKeyboardComponent_div_1_span_1_Template, 2, 1, "span", 6);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, EmojiKeyboardComponent_div_1_ng_template_2_Template, 1, 1, "ng-template", null, 7, _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplateRefExtractor"]);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var row_r3 = ctx.$implicit;

          var _r5 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵreference"](3);

          var ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵstyleProp"]("height", ctx_r0.keySize, "px");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", row_r3.id)("ngIfElse", _r5);
        }
      }

      function EmojiKeyboardComponent_button_5_Template(rf, ctx) {
        if (rf & 1) {
          var _r14 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function EmojiKeyboardComponent_button_5_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r14);

            var ctx_r13 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r13.scrollTo("recently_used");
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "async");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "mat-icon");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3, "schedule");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("selected", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 3, ctx_r1.currentId$) === "recently_used");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r1.disabled);
        }
      }

      function EmojiKeyboardComponent_button_6_Template(rf, ctx) {
        if (rf & 1) {
          var _r17 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 12);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function EmojiKeyboardComponent_button_6_Template_button_click_0_listener() {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r17);

            var group_r15 = ctx.$implicit;

            var ctx_r16 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r16.scrollTo(group_r15.id);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "async");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "mat-icon");

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var group_r15 = ctx.$implicit;

          var ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("selected", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 4, ctx_r2.currentId$) === group_r15.id);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("disabled", ctx_r2.disabled);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](group_r15.icon);
        }
      }

      var EmojiKeyboardComponent = /*#__PURE__*/function () {
        function EmojiKeyboardComponent(emojis, elref, zone) {
          var _this = this;

          _classCallCheck(this, EmojiKeyboardComponent);

          this.emojis = emojis;
          this.favorites$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"]([]);
          this.keySize = 40;
          /** Mode flag:
          * 'web' renders emoji as images
          * 'native' renders the text as it is relying on the OS native support
          */

          this.mode = 'web';
          this._disabled = false;
          /** Emits the selected emoji */

          this.keyPressed = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"](); // Rows observable adjusting on window resize to work with virtual scrolling

          this.rows$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(window, 'resize').pipe( // Makes sure to start with a value
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["startWith"])(null), // Waits for rendering to complete
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["sample"])(zone.onStable), // Computes the number of columns based on the actual width
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function () {
            return Math.floor(elref.nativeElement.scrollWidth / _this.keySize);
          }), // Filters for changes
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["distinctUntilChanged"])(), // Combines favorites with all emoji keys
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["switchMap"])(function (cols) {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["combineLatest"])( // Splits the favorites first
            _this.favorites$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (favs) {
              // Skips when no favorites
              if (!favs || favs.length <= 0) {
                return [];
              } // Returns the group of recently used 


              return [{
                name: 'Recently used',
                id: 'recently_used'
              }].concat(_this.spliRows(favs, cols));
            })), // Splits the emoji groups
            Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(_this.emojis.reduce(function (out, group) {
              // Pushes the group first 
              out.push({
                name: group.name,
                id: group.id
              }); // Concats the key rows next

              return out.concat(_this.spliRows(group.keys, cols));
            }, [])));
          }), // Concatenates the recently Used with groups
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (_ref) {
            var _ref2 = _slicedToArray(_ref, 2),
                recentlyUsed = _ref2[0],
                emojiGroups = _ref2[1];

            return recentlyUsed.concat(emojiGroups);
          }), // At last, computes the scrolling offset for each group
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["tap"])(function (rows) {
            return _this.offsets = _this.computeOffsets(rows);
          })); // Builds the current group id observable

          this.currentId$ = zone.onStable.pipe( // Waits for the rendering to complete
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["take"])(1), // Updates with scrolling
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["switchMap"])(function () {
            return _this.scroller.elementScrolled();
          }), // Measures the scrolled offset
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function () {
            return _this.scroller.measureScrollOffset('top');
          }), // Makes sure to start with 0 offset
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["startWith"])(0), // Detects the group based on the scrolled offset 
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["map"])(function (top) {
            // Computes a reversed array of group ids 
            var ids = Object.keys(_this.offsets || {}).reverse(); // Seeks for the current group id

            return ids.find(function (key) {
              return top >= _this.offsets[key];
            }) || 'recently_used';
          }), // Filters for changes
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["distinctUntilChanged"])(), // Runs within the angular's zone
          Object(_wizdm_rxjs__WEBPACK_IMPORTED_MODULE_6__["runInZone"])(zone), // Shares the same observable among subscribers
          Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["shareReplay"])(1));
        }
        /** The latest favorites */


        _createClass(EmojiKeyboardComponent, [{
          key: "favorites",
          get: function get() {
            return this.favorites$.value;
          }
          /** Array of favorites emoji for the 'Recenlty used' group */
          ,
          set: function set(favs) {
            this.favorites$.next(favs);
          }
          /** Disables the keyboard */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          },
          set: function set(disabled) {
            this._disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_4__["coerceBooleanProperty"])(disabled);
          }
        }, {
          key: "ngDoCheck",
          value: function ngDoCheck() {//this.scroller?.checkViewportSize();
          }
          /** Splits the given array of emoji keys into chuncks of the proper length */

        }, {
          key: "spliRows",
          value: function spliRows(keys, count) {
            return Array(Math.ceil(keys.length / (count || 1))).fill(0).map(function (_, i) {
              return keys.slice(i * count, i * count + count);
            });
          }
          /** Computes a map of emoji group offsets */

        }, {
          key: "computeOffsets",
          value: function computeOffsets(rows) {
            var _this2 = this;

            return this.emojis.reduce(function (map, group) {
              map[group.id] = _this2.keySize * rows.findIndex(function (row) {
                return row.id === group.id;
              });
              return map;
            }, {});
          }
          /** Scrolls to the given emoji group */

        }, {
          key: "scrollTo",
          value: function scrollTo(id) {
            this.scroller.scrollTo({
              top: this.offsets[id] || 0
            });
          }
          /** Emits the emoji key */

        }, {
          key: "press",
          value: function press(key) {
            return this.keyPressed.emit(key), false;
          }
        }]);

        return EmojiKeyboardComponent;
      }();

      EmojiKeyboardComponent.ɵfac = function EmojiKeyboardComponent_Factory(t) {
        return new (t || EmojiKeyboardComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_emoji_keys__WEBPACK_IMPORTED_MODULE_5__["EMOJI_KEYS"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]));
      };

      EmojiKeyboardComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: EmojiKeyboardComponent,
        selectors: [["wm-emoji-keyboard"]],
        viewQuery: function EmojiKeyboardComponent_Query(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_3__["CdkVirtualScrollViewport"], 1);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.scroller = _t.first);
          }
        },
        hostAttrs: [1, "wm-emoji-keyboard"],
        inputs: {
          mode: "mode",
          favorites: "favorites",
          labels: "labels",
          disabled: "disabled"
        },
        outputs: {
          keyPressed: "keyPressed"
        },
        decls: 7,
        vars: 6,
        consts: [["fxFlex", "1 1 auto", 3, "itemSize"], ["fxLayout", "row", "fxLayoutAlign", "start center", 3, "height", 4, "cdkVirtualFor", "cdkVirtualForOf"], ["fxFlex", "0 0 auto", "fxLayout", "row"], ["mat-button", "", "fxFlex", "100", 3, "selected", "disabled", "click", 4, "ngIf"], ["mat-button", "", "fxFlex", "100", 3, "selected", "disabled", "click", 4, "ngFor", "ngForOf"], ["fxLayout", "row", "fxLayoutAlign", "start center"], ["class", "group", 4, "ngIf", "ngIfElse"], ["keys", ""], [1, "group"], ["mat-icon-button", "", 3, "disabled", "mousedown", 4, "ngFor", "ngForOf"], ["mat-icon-button", "", 3, "disabled", "mousedown"], [1, "key"], ["mat-button", "", "fxFlex", "100", 3, "disabled", "click"]],
        template: function EmojiKeyboardComponent_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "cdk-virtual-scroll-viewport", 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, EmojiKeyboardComponent_div_1_Template, 4, 4, "div", 1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](2, "async");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](3, "mat-divider");

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](4, "nav", 2);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](5, EmojiKeyboardComponent_button_5_Template, 4, 5, "button", 3);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, EmojiKeyboardComponent_button_6_Template, 4, 6, "button", 4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("itemSize", ctx.keySize);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("cdkVirtualForOf", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](2, 4, ctx.rows$));

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](4);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", (ctx.favorites == null ? null : ctx.favorites.length) > 0);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.emojis);
          }
        },
        directives: [_angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_3__["CdkVirtualScrollViewport"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_3__["CdkFixedSizeVirtualScroll"], _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_7__["DefaultFlexDirective"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_3__["CdkVirtualForOf"], _angular_material_divider__WEBPACK_IMPORTED_MODULE_8__["MatDivider"], _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_7__["DefaultLayoutDirective"], _angular_common__WEBPACK_IMPORTED_MODULE_9__["NgIf"], _angular_common__WEBPACK_IMPORTED_MODULE_9__["NgForOf"], _angular_flex_layout_flex__WEBPACK_IMPORTED_MODULE_7__["DefaultLayoutAlignDirective"], _angular_material_button__WEBPACK_IMPORTED_MODULE_10__["MatButton"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_11__["MatIcon"]],
        pipes: [_angular_common__WEBPACK_IMPORTED_MODULE_9__["AsyncPipe"]],
        styles: [".wm-emoji-keyboard {\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  min-height: 240px;\n  height: 100%;\n  width: 100%;\n}\n.wm-emoji-keyboard .group {\n  padding: 0 10px;\n}\n.wm-emoji-keyboard .cdk-virtual-scroll-viewport {\n  overflow-x: hidden;\n  scroll-behavior: smooth;\n}\n.wm-emoji-keyboard .mat-button {\n  min-width: 40px;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2Vtb2ppLWtleWJvYXJkLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBQ0Usa0JBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxpQkFBQTtFQUNBLFlBQUE7RUFDQSxXQUFBO0FBQUY7QUFFRTtFQUFTLGVBQUE7QUFDWDtBQUNFO0VBQ0Usa0JBQUE7RUFDQSx1QkFBQTtBQUNKO0FBRUU7RUFDRSxlQUFBO0FBQUoiLCJmaWxlIjoiZW1vamkta2V5Ym9hcmQuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyJcbi53bS1lbW9qaS1rZXlib2FyZCB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTsgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIG1pbi1oZWlnaHQ6IDI0MHB4O1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuXG4gIC5ncm91cCB7IHBhZGRpbmc6IDAgMTBweDsgfVxuXG4gIC5jZGstdmlydHVhbC1zY3JvbGwtdmlld3BvcnQge1xuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcbiAgICBzY3JvbGwtYmVoYXZpb3I6IHNtb290aDtcbiAgfVxuXG4gIC5tYXQtYnV0dG9uIHtcbiAgICBtaW4td2lkdGg6IDQwcHg7XG4gIH1cbn0iXX0= */"],
        encapsulation: 2
      });
      /***/
    },

    /***/
    "0zyZ":
    /*!***********************************************!*\
      !*** ./wizdm/src/app/utils/textarea/index.ts ***!
      \***********************************************/

    /*! exports provided: TextareaNewline, TypeinAdapter, TextareaModule */

    /***/
    function zyZ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _textarea_newline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./textarea-newline */
      "RkJ1");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "TextareaNewline", function () {
        return _textarea_newline__WEBPACK_IMPORTED_MODULE_0__["TextareaNewline"];
      });
      /* harmony import */


      var _typein_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./typein-adapter */
      "8mPa");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "TypeinAdapter", function () {
        return _typein_adapter__WEBPACK_IMPORTED_MODULE_1__["TypeinAdapter"];
      });
      /* harmony import */


      var _textarea_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./textarea.module */
      "qM05");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "TextareaModule", function () {
        return _textarea_module__WEBPACK_IMPORTED_MODULE_2__["TextareaModule"];
      });
      /***/

    },

    /***/
    "8mPa":
    /*!**************************************************************!*\
      !*** ./wizdm/src/app/utils/textarea/typein-adapter/index.ts ***!
      \**************************************************************/

    /*! exports provided: TypeinAdapter */

    /***/
    function mPa(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _typein_adapter_directive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./typein-adapter.directive */
      "nGdH");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "TypeinAdapter", function () {
        return _typein_adapter_directive__WEBPACK_IMPORTED_MODULE_0__["TypeinAdapter"];
      });
      /***/

    },

    /***/
    "H7fF":
    /*!******************************************************!*\
      !*** ./emoji/src/lib/input/emoji-input.component.ts ***!
      \******************************************************/

    /*! exports provided: EmojiInput */

    /***/
    function H7fF(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmojiInput", function () {
        return EmojiInput;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /* harmony import */


      var _angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/cdk/coercion */
      "8LU1");
      /* harmony import */


      var _wizdm_emoji_text__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @wizdm/emoji/text */
      "WIkw");
      /* harmony import */


      var _wizdm_emoji_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @wizdm/emoji/utils */
      "eyIN");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _image_emoji_image_directive__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ../image/emoji-image.directive */
      "RYAK");

      function EmojiInput_ng_container_0_img_2_Template(rf, ctx) {
        if (rf & 1) {
          var _r6 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "img", 4);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("hit", function EmojiInput_ng_container_0_img_2_Template_img_hit_0_listener($event) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r6);

            var segment_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

            var ctx_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();

            return ctx_r4.cursorAt(segment_r1, $event);
          });

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        }

        if (rf & 2) {
          var segment_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("wm-emoji", segment_r1.content);
        }
      }

      function EmojiInput_ng_container_0_ng_container_3_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtext"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
        }

        if (rf & 2) {
          var segment_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]().$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtextInterpolate"](segment_r1.content || "\n");
        }
      }

      function EmojiInput_ng_container_0_Template(rf, ctx) {
        if (rf & 1) {
          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](1, 1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](2, EmojiInput_ng_container_0_img_2_Template, 1, 1, "img", 2);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, EmojiInput_ng_container_0_ng_container_3_Template, 2, 1, "ng-container", 3);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
        }

        if (rf & 2) {
          var segment_r1 = ctx.$implicit;

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitch", segment_r1.type);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](1);

          _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngSwitchCase", "emoji");
        }
      }
      /** @dynamic - tells ngc to ignore the error on type Document generated by strictEmitMetadata: true */


      var EmojiInput = /*#__PURE__*/function (_wizdm_emoji_text__WE) {
        _inherits(EmojiInput, _wizdm_emoji_text__WE);

        var _super = _createSuper(EmojiInput);

        function EmojiInput(document, elref, zone, utils) {
          var _this3;

          _classCallCheck(this, EmojiInput);

          _this3 = _super.call(this, utils);
          _this3.document = document;
          _this3.elref = elref;
          _this3.zone = zone;
          /** Emits the new text on changes */

          _this3.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
          _this3.disabled = false;
          _this3.required = false;
          /** Selects the newline mode.
           * - None: enter does nothig.
           * - Always: enter always inserts a new line.
           * - Shift: enter inserts newline in conjunction with the shift key only */

          _this3.newline = 'always';
          /** Undo history bouncing time */

          _this3.historyTime = 1000;
          /** Undo history limits */

          _this3.historyLimit = 128;
          /********** HISTORY UNDO/REDO ***********/

          _this3.store$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
          return _this3;
        }
        /** True whenever the curernt selection is collapsed in a cursor */


        _createClass(EmojiInput, [{
          key: "collapsed",
          get: function get() {
            return this.start === this.end;
          }
          /** Input's HTMLElement */

        }, {
          key: "element",
          get: function get() {
            return this.elref.nativeElement;
          }
          /** The Document's Selection object */

        }, {
          key: "selection",
          get: function get() {
            return this.document.getSelection();
          }
          /** The Window object */

        }, {
          key: "window",
          get: function get() {
            return this.document.defaultView;
          }
          /** True whenever the platform is Mac, iPhone or iPad */

        }, {
          key: "mac",
          get: function get() {
            return /Mac|^iP/.test(this.window.navigator.platform);
          }
          /** True whenever this input has focus */

        }, {
          key: "focused",
          get: function get() {
            return this.document.activeElement === this.element;
          }
          /** Sets the focus on the input's element */

        }, {
          key: "focus",
          value: function focus() {
            this.element.focus();
          }
          /** Removes focus from the input's element; keystrokes will subsequently go nowhere. */

        }, {
          key: "blur",
          value: function blur() {
            this.element.blur();
          } // Applies the contentediable attribute unless the input is disabled

        }, {
          key: "editable",
          get: function get() {
            return this.disabled ? undefined : '';
          } // Marks the input as empty supporting displaying/hiding of the placeholder text

        }, {
          key: "showPlaceholder",
          get: function get() {
            return !this.value;
          }
          /** The input value */

        }, {
          key: "value",
          set: function set(value) {
            // Avoids unecessary changes
            if (value === this.value) {
              return;
            } // Restarts the undo history whenevevr the input value changes.


            this.enableHistory(this.historyTime, this.historyLimit); // Compiles the new text and emits the update

            this.compile(this._value = value);
          } // Clears the history while leaving 

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.clearHistory();
          }
          /** Disables the input */

        }, {
          key: "disableInput",
          set: function set(value) {
            this.disabled = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
          }
          /** Marks the input as required */

        }, {
          key: "requireInput",
          set: function set(value) {
            this.required = Object(_angular_cdk_coercion__WEBPACK_IMPORTED_MODULE_3__["coerceBooleanProperty"])(value);
          } // Handles beforeinput event

        }, {
          key: "beforeInput",
          value: function beforeInput(ev) {
            // Divert the insertion content to the internal implementation
            if (ev.data) {
              this.insert(ev.data);
            } // Prevents the default behavior


            return false;
          } // Handles keydown event

        }, {
          key: "keyDown",
          value: function keyDown(ev) {
            switch (ev.key) {
              // Reverts navigation to default
              case 'ArrowDown':
              case 'ArrowLeft':
              case 'ArrowRight':
              case 'ArrowUp':
              case 'Tab':
              case 'Home':
              case 'End':
              case 'PageUp':
              case 'PageDown':
                return true;
              // Deletes the current selection

              case 'Delete':
                this.del();
                break;
              // Deletes back

              case 'Backspace':
                this.backspace();
                break;
              // Insert a newline according to the newline input mode

              case 'Enter':
                if (this.newline === 'always' || this.newline === 'shift' && ev.shiftKey) {
                  this.insert('\n');
                }

                break;
              // Editing

              default:
                if (ev.key.length === 1 || this.utils.isEmoji(ev.key)) {
                  // Prevents keyboard repeating giving a chance to Mac's press&hold to work
                  if (ev.repeat && this.mac) {
                    return false;
                  } // Intercepts accelerators


                  if (ev.metaKey && this.mac || ev.ctrlKey) {
                    return this.keyAccellerators(ev);
                  } // Inserts new content


                  this.insert(ev.key);
                }

            } // Prevents default


            return false;
          }
          /** Handles keayboard accellerators */

        }, {
          key: "keyAccellerators",
          value: function keyAccellerators(ev) {
            switch (ev.key) {
              // Ctrl/Cmd Z -> Undo
              case 'z':
              case 'Z':
                // Reverts to Redo whenever shift is pressed on a Mac
                if (ev.shiftKey && this.mac) {
                  return this.redo(), false;
                } // Performs thr Undo


                return this.undo(), false;
              // Ctrl/Cmd Y -> Redo 

              case 'y':
              case 'Y':
                // Performs the Redo unless its a Mac
                if (!this.mac) {
                  return this.redo(), false;
                }

            } // Reverts to default


            return true;
          } // Handles cut event

        }, {
          key: "editCut",
          value: function editCut(ev) {
            // Reverts the cut request to copy the content first...
            this.editCopy(ev); // Deletes the selection

            this.del(); // Always prevent default

            return false;
          } // Handles copy event

        }, {
          key: "editCopy",
          value: function editCopy(ev) {
            // Gets the clipboard object
            var cp = ev.clipboardData || this.window.clipboardData;

            if (!cp) {
              return true;
            } // Copies the selected text


            try {
              cp.setData('text', this.query().value.slice(this.start, this.end));
            } catch (e) {
              /*console.error(e);*/
            } // Prevents default


            return false;
          } // Handles paste event

        }, {
          key: "editPaste",
          value: function editPaste(ev) {
            // Gets the clipboard object
            var cp = ev.clipboardData || window.clipboardData;

            if (!cp) {
              return false;
            } // Pastes the data from the clipboard


            try {
              this.insert(cp.getData('text'));
            } catch (e) {
              /*console.error(e);*/
            } // Prevents default


            return false;
          }
          /** Compiles the input text into segment accounting for multiple lines */

        }, {
          key: "compile",
          value: function compile(source) {
            // Appends an extra '\n' forcing the browser displaying a new line normally omitted when at the end
            return _get(_getPrototypeOf(EmojiInput.prototype), "compile", this).call(this, source + (source && source.endsWith('\n') ? '\n' : ''));
          }
          /** Wait for the current queue of microtaks to be emptied. The async funtion will than be called after the rendering completed */

        }, {
          key: "whenDone",
          value: function whenDone(async) {
            this.zone.onStable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["take"])(1)).subscribe(function () {
              return async();
            });
          }
          /** Selects the text between start and end when specified.
           * Sets the cursor position otherwise */

        }, {
          key: "select",
          value: function select(start, end) {
            this.start = Math.max(start, 0);
            this.end = Math.min(end || this.start, this.value.length);
            return this.sort().apply();
          }
          /** Insert a new text at the current cursor position */

        }, {
          key: "insert",
          value: function insert(key) {
            // Skips empty insertions when unfruitful
            if (!key && this.collapsed) {
              return this;
            } // Stores the current values in history


            return this.query().store().ins(key);
          }
          /** Deletes the current selection (Del-like) */

        }, {
          key: "del",
          value: function del() {
            // Stores the current values in history
            this.query().store(); // Whenevevr collapsed...

            if (this.collapsed) {
              // Skips when at the end of the text
              if (this.end === this.value.length) {
                return;
              } // Moves the end side of the selection ahead otherwise


              this.end = this.next(this.end);
            } // Removes the selected text


            return this.ins('');
          }
          /** Deletes the previous character (Backspace-like) */

        }, {
          key: "backspace",
          value: function backspace() {
            // Stores the current values in history
            this.query().store(); // Whenevevr collapsed...

            if (this.collapsed) {
              // Skips when at the start of the text
              if (this.start <= 0) {
                return;
              } // Moves the start side of the selection back otherwise


              this.start = this.prev(this.start);
            } // Deletes the selected block 


            return this.ins('');
          }
          /** Internal insertion/deletion helper */

        }, {
          key: "ins",
          value: function ins(key) {
            // Computes the new text value
            var text = this.value.slice(0, this.start) + key + this.value.slice(this.end); // Computes the new cursor location

            var caret = this.start + key.length; // Updates the content

            return this.update(text, caret, caret);
          }
          /** Updates the value of the text and selection  */

        }, {
          key: "update",
          value: function update(value, start, end) {
            var _this4 = this;

            // Restores the selection
            this.start = start;
            this.end = end; // Restores the content

            this.compile(this._value = value); // Applies the selection back when rendering is done

            this.focused && this.whenDone(function () {
              return _this4.apply();
            }); // Emits the ne value

            this.valueChange.emit(this.value); // Returns this for chaining purposes

            return this;
          }
          /** Moves the given selection index ahead by one character */

        }, {
          key: "next",
          value: function next(pos) {
            // Moving ahead requires to jump one or more character depending on the letngh of the emoji, if any.
            // So, search for a match with an emoij, first
            var match = this.utils.matchEmojiCodes(this.value.slice(pos)); // Updates the position accordingly

            return pos + (match && match.index === 0 ? match[0].length : 1);
          }
          /** Moves the given selection index back by one character */

        }, {
          key: "prev",
          value: function prev(pos) {
            // Moving the cursor backwards is performed by moving forward from index 0 up until one step before the starting position.
            // This accounts for the variable length of emoji(s) that can't be successfully matched backwards
            var offset = 0;
            var next = 0;

            while ((next = this.next(next)) < pos) {
              offset = next;
            }

            return offset;
          }
          /** Sorts the selection edges */

        }, {
          key: "sort",
          value: function sort() {
            if (this.start <= this.end) {
              return this;
            }

            var tmp = this.start;
            this.start = this.end;
            this.end = tmp;
            return this;
          }
          /** Queries the current selection */

        }, {
          key: "query",
          value: function query() {
            try {
              // Gets the current document selection first
              var sel = this.selection; // Computes the start offset from the anchor node

              this.start = this.offset(sel.anchorNode, sel.anchorOffset); // Computes the end offset from the focus node

              this.end = sel.isCollapsed ? this.start : this.offset(sel.focusNode, sel.focusOffset);
            } catch (e) {
              this.start = this.end = 0;
              /*console.error(e);*/
            } // Sorts the edges and returns this for chaining purposes


            return this.sort();
          }
          /** Applies the current selection back to the dom */

        }, {
          key: "apply",
          value: function apply() {
            var _this5 = this;

            try {
              // Gets the current document selection first
              var sel = this.selection; // Computes the dom node/offset selection pair for the start offset only

              var _this$range = this.range(this.start),
                  _this$range2 = _slicedToArray(_this$range, 2),
                  node = _this$range2[0],
                  offset = _this$range2[1]; // Applies the selection as a collapsed cursor


              sel.collapse(node, offset); // Check for the seleciton to be applied correctly...

              if (sel.anchorNode !== node || sel.anchorOffset !== offset) {
                // ...otherwise schedule a second attempt during the next animation frame update to cope with
                // browsers (Safari) requiring the dome to be actually rendered for the selection to work
                rxjs__WEBPACK_IMPORTED_MODULE_1__["animationFrameScheduler"].schedule(function () {
                  return _this5.apply();
                });
              }
            } catch (e) {
              /*console.error(e);*/
            } // Returns this for chaining purposes


            return this;
          }
          /** Forces the cursor position to fall right before or after the emoji image the user clicked onto */

        }, {
          key: "cursorAt",
          value: function cursorAt(segment, at) {
            var _this$selection;

            // Updates the current cursor position based on the emoji image the user clicked onto
            this.start = this.end = this.abs(segment, at === 'right' ? segment.content.length : 0);

            (_this$selection = this.selection).collapse.apply(_this$selection, _toConsumableArray(this.range(this.start)));
          }
          /** Selection helper function: Computes the absolute offset from the given segment and relative offset */

        }, {
          key: "abs",
          value: function abs(segment) {
            var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

            // Skips invalid segments
            if (!segment) {
              return 0;
            } // Loops on all the segments


            var _iterator = _createForOfIteratorHelper(this.segments),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var seg = _step.value;

                // Stops when the requested segment matches
                if (segment === seg) {
                  break;
                } // Accumulates the offset by the segment's content length


                offset += (seg.content || '').length;
              } // Returns the accumulated offset

            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            return offset;
          }
          /** Computes the absolute text offset from the Node/offset dom selection pair */

        }, {
          key: "offset",
          value: function offset(node, _offset) {
            var _a, _b; // Short-circuits for invalid nodes


            if (!node) {
              return ((_a = this.value) === null || _a === void 0 ? void 0 : _a.length) || 0;
            } // Case #1: The given node is a text node, meaning the dom selection is expressed as the text-node and the relative offset whithin such text. We keep the pair unchanged and move forward.


            if (node.nodeType !== Node.TEXT_NODE) {
              // Cases #2: The given node isn't a text node (likely is the host container element), meaning the dom selection is expressed as the containing node while the offseet is the index of the selected element.
              // Ensures the given node has chilldren
              var count = node.childNodes.length;

              if (!count) {
                return 0;
              } // Gets the selected child node (saturating to the last child) and resets the offset for the furtner calculations


              node = node.childNodes.item(Math.min(_offset, count - 1));
              _offset = 0;
            } // Loops on the nodes composing the rendered output


            var child = this.element.firstChild;
            var text = '';

            while (child) {
              // When we match the requested node, we are done. The offset is calculated as the accumulated text length.
              if (child == node) {
                return text.length + _offset;
              } // Appends the text content depending on the node type


              text += this.nodeText(child); // Skips to the next node

              child = child.nextSibling;
            }

            return ((_b = this.value) === null || _b === void 0 ? void 0 : _b.length) || 0;
          }
          /** Computes a Node/offset dom selection pair from an absolute offset */

        }, {
          key: "range",
          value: function range(offset) {
            // Starts with the first child node of the input's element
            var node = this.element.firstChild; // Seeks for the relevan node matching the index

            var count = 0;

            while (node) {
              // Gets the node text content, if any 
              var text = this.nodeText(node); // When the offset fits within the node we are done

              if (offset <= text.length) {
                // Case #1: When the matching node is a text node...
                if (node.nodeType === Node.TEXT_NODE) {
                  // Returns the text node kind of selection with the content based offset
                  return [node, offset];
                } // Case #2: We must be at the IMG, so, return the element offset instead


                return [this.element, count + 1];
              } // Decreses the absolute offset


              offset -= text.length; // Counts the number of child nodes otherwise (including comments)

              count++; // Goes to the next sibling

              node = node.nextSibling;
            } // Case #3: No matches found, return a zero based offset


            return [this.element, 0];
          }
          /** Returns the text associated with the given node */

        }, {
          key: "nodeText",
          value: function nodeText(node) {
            switch (node.nodeType) {
              // The value of the tetxt node
              case Node.TEXT_NODE:
                return node.nodeValue;
                break;
              // The alt of an image element

              case Node.ELEMENT_NODE:
                switch (node.tagName) {
                  case 'IMG':
                    return node.alt || '';
                    break;
                }

            }

            return '';
          }
          /** Clears the history buffer */

        }, {
          key: "clearHistory",
          value: function clearHistory() {
            // Unsubscribe the previous subscription, if any
            if (!!this.sub$) {
              this.sub$.unsubscribe();
            } // Initializes the history buffer


            this.timeIndex = 0;
            this.history = [];
            return this;
          }
          /** Initilizes the history buffer */

        }, {
          key: "enableHistory",
          value: function enableHistory() {
            var _this6 = this;

            var debounce = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1000;
            var limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 128;
            // Clears the history buffer
            this.clearHistory(); // Builts up the stream optimizing the amout of snapshot saved in the history 

            this.sub$ = this.store$.pipe( // Append a time interval between storing emissions
            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["timeInterval"])(), // Filters requests coming too fast (within 'debounce time')
            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["filter"])(function (payload) {
              return _this6.history.length === 0 || payload.interval > debounce;
            }), // Gets a snapshot of the value with updated selection
            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (payload) {
              return payload.value;
            })).subscribe(function (snapshot) {
              // Wipes the further future undoed snapshots since they are now 
              if (_this6.timeIndex > 0) {
                // Save the last snapshot wiping the further future undoed once
                _this6.history.splice(0, _this6.timeIndex + 1, snapshot); // Resets the time index


                _this6.timeIndex = 0;
              } // Saves the last snapshot in the history
              else {
                  _this6.history.unshift(snapshot);
                } // Removes the oldest snapshot when exceeeding the history limit


              if (_this6.history.length > limit) {
                _this6.history.pop();
              }
            });
            return this;
          }
          /** Stores a snapshot in the undo/redo history buffer
           * @param force (option) when true forces the storage unconditionally.
           * Storage will be performed conditionally to the time elapsed since
           * the last modification otherwise.
          */

        }, {
          key: "store",
          value: function store(force) {
            if (!!force) {
              // Pushes a snapshot into the history buffer unconditionally
              this.history.unshift({
                value: this.value,
                selection: [this.start, this.end]
              });
              return this;
            } // Pushes the document for conditional history save


            this.store$.next({
              value: this.value,
              selection: [this.start, this.end]
            });
            return this;
          }
          /** Returns true whenever the last modifications can be undone */

        }, {
          key: "undoable",
          get: function get() {
            return this.history.length > 0 && this.timeIndex < this.history.length - (!!this.timeIndex ? 1 : 0);
          }
          /** Undoes the latest changes. It requires enableHistory() to be called */

        }, {
          key: "undo",
          value: function undo() {
            // Stops undoing when history is finished
            if (!this.undoable) {
              return this;
            } // Saves the present moment to be restored eventually


            if (this.timeIndex === 0) {
              this.store(true);
            } // Gets the latest snapshot from the history


            var snapshot = this.history[++this.timeIndex]; // Reloads the snapshot's content restoring the selection too

            return this.update.apply(this, [snapshot.value].concat(_toConsumableArray(snapshot.selection)));
          }
          /** Returns true whenever the last undone modifications can be redone */

        }, {
          key: "redoable",
          get: function get() {
            return this.history.length > 0 && this.timeIndex > 0;
          }
          /** Redoes the last undone modifications. It requires enableHistory() to be called */

        }, {
          key: "redo",
          value: function redo() {
            // Stops redoing when back to the present
            if (!this.redoable) {
              return this;
            } // Gets the previous snapshot from the history


            var snapshot = this.history[--this.timeIndex]; // Removes the newest snapshot when back to the present

            if (this.timeIndex === 0) {
              this.history.shift();
            } // Reloads the snapshot's content restoring the selection too


            return this.update.apply(this, [snapshot.value].concat(_toConsumableArray(snapshot.selection)));
          }
        }]);

        return EmojiInput;
      }(_wizdm_emoji_text__WEBPACK_IMPORTED_MODULE_4__["EmojiText"]);

      EmojiInput.ɵfac = function EmojiInput_Factory(t) {
        return new (t || EmojiInput)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_6__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_wizdm_emoji_utils__WEBPACK_IMPORTED_MODULE_5__["EmojiUtils"]));
      };

      EmojiInput.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
        type: EmojiInput,
        selectors: [["wm-emoji-input"]],
        hostAttrs: [1, "wm-emoji-input"],
        hostVars: 4,
        hostBindings: function EmojiInput_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("beforeinput", function EmojiInput_beforeinput_HostBindingHandler($event) {
              return ctx.beforeInput($event);
            })("keydown", function EmojiInput_keydown_HostBindingHandler($event) {
              return ctx.keyDown($event);
            })("cut", function EmojiInput_cut_HostBindingHandler($event) {
              return ctx.editCut($event);
            })("copy", function EmojiInput_copy_HostBindingHandler($event) {
              return ctx.editCopy($event);
            })("paste", function EmojiInput_paste_HostBindingHandler($event) {
              return ctx.editPaste($event);
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("contenteditable", ctx.editable)("placeholder", ctx.placeholder);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("empty", ctx.showPlaceholder);
          }
        },
        inputs: {
          mode: "mode",
          placeholder: "placeholder",
          value: "value",
          disableInput: ["disabled", "disableInput"],
          requireInput: ["required", "requireInput"],
          newline: "newline",
          historyTime: "historyTime",
          historyLimit: "historyLimit"
        },
        outputs: {
          valueChange: "valueChange"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
        decls: 1,
        vars: 2,
        consts: [[4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngSwitch"], ["draggable", "false", 3, "wm-emoji", "hit", 4, "ngSwitchCase"], [4, "ngSwitchDefault"], ["draggable", "false", 3, "wm-emoji", "hit"]],
        template: function EmojiInput_Template(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, EmojiInput_ng_container_0_Template, 4, 2, "ng-container", 0);
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngForOf", ctx.segments)("ngForTrackBy", ctx.trackByFn);
          }
        },
        directives: [_angular_common__WEBPACK_IMPORTED_MODULE_6__["NgForOf"], _angular_common__WEBPACK_IMPORTED_MODULE_6__["NgSwitch"], _angular_common__WEBPACK_IMPORTED_MODULE_6__["NgSwitchCase"], _angular_common__WEBPACK_IMPORTED_MODULE_6__["NgSwitchDefault"], _image_emoji_image_directive__WEBPACK_IMPORTED_MODULE_7__["EmojiImage"]],
        styles: [".wm-emoji-input {\n  display: inline-block;\n  white-space: pre-wrap;\n  min-height: 1em;\n  outline: none;\n}\n.wm-emoji-input::before {\n  content: attr(placeholder);\n  position: absolute;\n  opacity: 0.5;\n  visibility: hidden;\n}\n.wm-emoji-input.empty::before {\n  visibility: visible;\n}\n.mat-form-field .wm-emoji-input::before {\n  transition: opacity 150ms ease 200ms;\n}\n.mat-form-field.mat-form-field-hide-placeholder .wm-emoji-input::before {\n  transition: unset;\n  opacity: 0;\n}\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2Vtb2ppLWlucHV0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBO0VBRUUscUJBQUE7RUFDQSxxQkFBQTtFQUNBLGVBQUE7RUFDQSxhQUFBO0FBREY7QUFJRTtFQUVFLDBCQUFBO0VBQ0Esa0JBQUE7RUFDQSxZQUFBO0VBR0Esa0JBQUE7QUFMSjtBQVNFO0VBQ0UsbUJBQUE7QUFQSjtBQWVFO0VBQ0Usb0NBQUE7QUFaSjtBQWdCRTtFQUNFLGlCQUFBO0VBQ0EsVUFBQTtBQWRKIiwiZmlsZSI6ImVtb2ppLWlucHV0LmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiXG4ud20tZW1vamktaW5wdXQge1xuXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xuICBtaW4taGVpZ2h0OiAxZW07XG4gIG91dGxpbmU6IG5vbmU7XG5cbiAgLy8gVXNlcyA6OmJlZm9yZSBtZXRhLWVsZW1lbnQgdG8gc2ltdWxhdGUgdGhlIHBsYWNlaG9kZXJcbiAgJjo6YmVmb3JlIHtcbiAgICAvLyBDb250ZW50cyBjb21lcyBmcm9tIHRoZSBwbGFjZWhvZGVyIGF0dHJpYnV0ZVxuICAgIGNvbnRlbnQ6IGF0dHIocGxhY2Vob2xkZXIpOyBcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgb3BhY2l0eTogMC41O1xuXG4gICAgLy8gVGhlIHBsYWNlaG9sZGVyIGlzIG5vcm1hbGx5IGhpZGRlblxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgfVxuXG4gIC8vIERpc3BsYXlzIHRoZSBwbGFjZWhvbGRlciB3aGVuIGVtcHR5XG4gICYuZW1wdHk6OmJlZm9yZSB7XG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgfVxufVxuXG4vLyBUaGlzIGlzIHByb3ZpZGVkIHRvIHN1cHBvcnQgc3R5bGluZyBmb3IgbWF0RW1vamkgZGlyZWN0aXZlIHNpbmNlIHRoZSBkaXJlY3RpdmUgY2FuJ3QgaGF2ZSBzdHlsZXMgb2YgaXRzIG93bi4gXG4ubWF0LWZvcm0tZmllbGQge1xuXG4gIC8vIEFkZHMgdHJhbnN0aW9uIHRpbWluaWcgb24gb3BhY2l0eSB0byBjb3BlIHdpdGggdGhlIGZsb2F0aW5nIGxhYmVsXG4gIC53bS1lbW9qaS1pbnB1dDo6YmVmb3JlIHtcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IDE1MG1zIGVhc2UgMjAwbXM7XG4gIH1cblxuICAvLyBIaWRlcyB0aGUgcGxhY2Vob2xkZXIgaW1tZWRpYXRlbHlcbiAgJi5tYXQtZm9ybS1maWVsZC1oaWRlLXBsYWNlaG9sZGVyIC53bS1lbW9qaS1pbnB1dDo6YmVmb3JlIHtcbiAgICB0cmFuc2l0aW9uOiB1bnNldDtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG59Il19 */"],
        encapsulation: 2
      });
      /***/
    },

    /***/
    "KRLS":
    /*!*****************************************!*\
      !*** ./emoji/src/lib/material/index.ts ***!
      \*****************************************/

    /*! exports provided: EmojiMaterial, EmojiMaterialModule */

    /***/
    function KRLS(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _emoji_material_directive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./emoji-material.directive */
      "XtK9");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "EmojiMaterial", function () {
        return _emoji_material_directive__WEBPACK_IMPORTED_MODULE_0__["EmojiMaterial"];
      });
      /* harmony import */


      var _emoji_material_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./emoji-material.module */
      "omZD");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "EmojiMaterialModule", function () {
        return _emoji_material_module__WEBPACK_IMPORTED_MODULE_1__["EmojiMaterialModule"];
      });
      /***/

    },

    /***/
    "RkJ1":
    /*!****************************************************************!*\
      !*** ./wizdm/src/app/utils/textarea/textarea-newline/index.ts ***!
      \****************************************************************/

    /*! exports provided: TextareaNewline */

    /***/
    function RkJ1(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _textarea_newline_directive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./textarea-newline.directive */
      "gX7t");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "TextareaNewline", function () {
        return _textarea_newline_directive__WEBPACK_IMPORTED_MODULE_0__["TextareaNewline"];
      });
      /***/

    },

    /***/
    "TDrZ":
    /*!***************************************************!*\
      !*** ./emoji/src/lib/input/emoji-input.module.ts ***!
      \***************************************************/

    /*! exports provided: EmojiInputModule */

    /***/
    function TDrZ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmojiInputModule", function () {
        return EmojiInputModule;
      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _wizdm_emoji_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @wizdm/emoji/image */
      "W6g8");
      /* harmony import */


      var _emoji_input_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./emoji-input.component */
      "H7fF");
      /* harmony import */


      var _emoji_control_directive__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./emoji-control.directive */
      "owKJ");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");

      var EmojiInputModule = function EmojiInputModule() {
        _classCallCheck(this, EmojiInputModule);
      };

      EmojiInputModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineNgModule"]({
        type: EmojiInputModule
      });
      EmojiInputModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵdefineInjector"]({
        factory: function EmojiInputModule_Factory(t) {
          return new (t || EmojiInputModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _wizdm_emoji_image__WEBPACK_IMPORTED_MODULE_1__["EmojiImageModule"]]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_4__["ɵɵsetNgModuleScope"](EmojiInputModule, {
          declarations: [_emoji_input_component__WEBPACK_IMPORTED_MODULE_2__["EmojiInput"], _emoji_control_directive__WEBPACK_IMPORTED_MODULE_3__["EmojiControl"]],
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _wizdm_emoji_image__WEBPACK_IMPORTED_MODULE_1__["EmojiImageModule"]],
          exports: [_emoji_input_component__WEBPACK_IMPORTED_MODULE_2__["EmojiInput"], _emoji_control_directive__WEBPACK_IMPORTED_MODULE_3__["EmojiControl"]]
        });
      })();
      /***/

    },

    /***/
    "UYqx":
    /*!**************************************!*\
      !*** ./emoji/src/lib/input/index.ts ***!
      \**************************************/

    /*! exports provided: EmojiControl, EmojiInput, EmojiInputModule */

    /***/
    function UYqx(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _emoji_control_directive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./emoji-control.directive */
      "owKJ");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "EmojiControl", function () {
        return _emoji_control_directive__WEBPACK_IMPORTED_MODULE_0__["EmojiControl"];
      });
      /* harmony import */


      var _emoji_input_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./emoji-input.component */
      "H7fF");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "EmojiInput", function () {
        return _emoji_input_component__WEBPACK_IMPORTED_MODULE_1__["EmojiInput"];
      });
      /* harmony import */


      var _emoji_input_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./emoji-input.module */
      "TDrZ");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "EmojiInputModule", function () {
        return _emoji_input_module__WEBPACK_IMPORTED_MODULE_2__["EmojiInputModule"];
      });
      /***/

    },

    /***/
    "XtK9":
    /*!************************************************************!*\
      !*** ./emoji/src/lib/material/emoji-material.directive.ts ***!
      \************************************************************/

    /*! exports provided: EmojiMaterial */

    /***/
    function XtK9(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmojiMaterial", function () {
        return EmojiMaterial;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/material/form-field */
      "Q2Ze");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var _wizdm_emoji_input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @wizdm/emoji/input */
      "UYqx");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");

      var EmojiMaterial = /*#__PURE__*/function () {
        /** Gets the NgControl for this control or null. */
        function EmojiMaterial(formField, ngControl, input) {
          _classCallCheck(this, EmojiMaterial);

          this.formField = formField;
          this.ngControl = ngControl;
          this.input = input;

          if (!formField) {
            throw new Error("matEmoji directive is ment to be used within a mat-form-field component!");
          }

          this.stateChanges = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["merge"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(this.input.element, 'blur'), this.input.valueChange);
        }
        /** The value of the control. */


        _createClass(EmojiMaterial, [{
          key: "value",
          get: function get() {
            return this.input.value;
          }
        }, {
          key: "placeholder",
          get:
          /** The placeholder for this control. */
          function get() {
            return this.input.placeholder;
          }
        }, {
          key: "focused",
          get:
          /** Whether the control is focused. */
          function get() {
            return this.input.focused;
          }
          /** Whether the control is empty. */

        }, {
          key: "empty",
          get: function get() {
            return !this.input.value;
          }
          /** Whether the control is disabled. */

        }, {
          key: "disabled",
          get: function get() {
            if (this.ngControl && this.ngControl.disabled !== null) {
              return this.ngControl.disabled;
            }

            return this.input.disabled;
          }
          /** Whether the control is required. */

        }, {
          key: "required",
          get: function get() {
            return this.input.required;
          }
          /** Whether the `MatFormField` label should try to float. */

        }, {
          key: "shouldLabelFloat",
          get: function get() {
            return this.focused || !this.empty;
          }
          /** Whether the control is in an error state. */

        }, {
          key: "errorState",
          get: function get() {
            return !!this.ngControl && !!this.ngControl.errors;
          }
          /** Sets the list of element IDs that currently describe this control. */

        }, {
          key: "setDescribedByIds",
          value: function setDescribedByIds(ids) {}
          /** Handles a click on the control's container. */

        }, {
          key: "onContainerClick",
          value: function onContainerClick(event) {
            this.input.focus();
          }
        }]);

        return EmojiMaterial;
      }();

      EmojiMaterial.ɵfac = function EmojiMaterial_Factory(t) {
        return new (t || EmojiMaterial)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_material_form_field__WEBPACK_IMPORTED_MODULE_1__["MatFormField"], 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_4__["NgControl"], 10), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_wizdm_emoji_input__WEBPACK_IMPORTED_MODULE_3__["EmojiInput"]));
      };

      EmojiMaterial.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: EmojiMaterial,
        selectors: [["wm-emoji-input", "matEmoji", ""]],
        hostAttrs: [1, "mat-input-element"],
        exportAs: ["EmojiMaterial"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([{
          provide: _angular_material_form_field__WEBPACK_IMPORTED_MODULE_1__["MatFormFieldControl"],
          useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(function () {
            return EmojiMaterial;
          })
        }])]
      });
      /***/
    },

    /***/
    "gX7t":
    /*!*************************************************************************************!*\
      !*** ./wizdm/src/app/utils/textarea/textarea-newline/textarea-newline.directive.ts ***!
      \*************************************************************************************/

    /*! exports provided: TextareaNewline */

    /***/
    function gX7t(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TextareaNewline", function () {
        return TextareaNewline;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");

      var TextareaNewline = /*#__PURE__*/function () {
        function TextareaNewline() {
          _classCallCheck(this, TextareaNewline);

          /** Selects the newline mode.
           * - None: enter does nothig.
           * - Always: enter always inserts a new line.
           * - Shift: enter inserts newline in conjunction with the shift key only */
          this.newline = 'always';
        }
        /** Intercepts the keydown event to customize the textarea behavior */


        _createClass(TextareaNewline, [{
          key: "keyDown",
          value: function keyDown(ev) {
            // Prevents the default behavior according to the newline input value
            switch (ev.code === 'Enter' ? this.newline : 'always') {
              case 'none':
                return false;

              case 'shift':
                return ev.shiftKey;
            }

            return true;
          }
        }]);

        return TextareaNewline;
      }();

      TextareaNewline.ɵfac = function TextareaNewline_Factory(t) {
        return new (t || TextareaNewline)();
      };

      TextareaNewline.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: TextareaNewline,
        selectors: [["textarea", "newline", ""]],
        hostBindings: function TextareaNewline_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("keydown", function TextareaNewline_keydown_HostBindingHandler($event) {
              return ctx.keyDown($event);
            });
          }
        },
        inputs: {
          newline: "newline"
        }
      });
      /***/
    },

    /***/
    "glvt":
    /*!*************************************!*\
      !*** ./emoji-keyboard/src/index.ts ***!
      \*************************************/

    /*! exports provided: EmojiKeyboardComponent, EmojiKeyboardModule, EMOJI_KEYS */

    /***/
    function glvt(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _lib_emoji_keyboard_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./lib/emoji-keyboard.component */
      "0qK6");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "EmojiKeyboardComponent", function () {
        return _lib_emoji_keyboard_component__WEBPACK_IMPORTED_MODULE_0__["EmojiKeyboardComponent"];
      });
      /* harmony import */


      var _lib_emoji_keyboard_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./lib/emoji-keyboard.module */
      "niQ8");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "EmojiKeyboardModule", function () {
        return _lib_emoji_keyboard_module__WEBPACK_IMPORTED_MODULE_1__["EmojiKeyboardModule"];
      });
      /* harmony import */


      var _lib_emoji_keys__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./lib/emoji-keys */
      "vKPu");
      /* harmony reexport (safe) */


      __webpack_require__.d(__webpack_exports__, "EMOJI_KEYS", function () {
        return _lib_emoji_keys__WEBPACK_IMPORTED_MODULE_2__["EMOJI_KEYS"];
      });
      /***/

    },

    /***/
    "nGdH":
    /*!*********************************************************************************!*\
      !*** ./wizdm/src/app/utils/textarea/typein-adapter/typein-adapter.directive.ts ***!
      \*********************************************************************************/

    /*! exports provided: TypeinAdapter */

    /***/
    function nGdH(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TypeinAdapter", function () {
        return TypeinAdapter;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _wizdm_emoji_input__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @wizdm/emoji/input */
      "UYqx");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /** Typing In Adapter for texarea and EmojiInput */


      var TypeinAdapter = /*#__PURE__*/function () {
        function TypeinAdapter(document, elref, emoji) {
          _classCallCheck(this, TypeinAdapter);

          this.document = document;
          this.elref = elref;
          this.emoji = emoji;
          /** Emits for valua changes */

          this.valueChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        }
        /** The host element */


        _createClass(TypeinAdapter, [{
          key: "element",
          get: function get() {
            return this.elref.nativeElement;
          }
          /** The host element as a textarea */

        }, {
          key: "textarea",
          get: function get() {
            // Assert the element is a texarea
            if (this.element.tagName !== 'TEXTAREA') {
              throw new Error('This element expected to be a textarea!');
            } // Return the element as a textarea


            return this.element;
          }
          /** True whenever the element has focus */

        }, {
          key: "hasFocus",
          get: function get() {
            return this.element === this.document.activeElement;
          }
          /** Returns the input value */

        }, {
          key: "value",
          get: function get() {
            return (this.emoji || this.textarea).value;
          }
        }, {
          key: "ensureFocus",
          value: function ensureFocus() {
            // Do nothing whenever the elment already has focus
            if (this.hasFocus) {
              return;
            } // Focuses the element


            this.element.focus(); // Moves the selection at the end of the current text

            if (this.emoji) {
              this.emoji.select(this.value.length);
            } else {
              this.textarea.selectionStart = this.textarea.selectionEnd = this.value.length;
            }
          } // Hooks on the input event (textarea only)

        }, {
          key: "onInput",
          value: function onInput(ev) {
            // Redirects the textarea oninput event to the valueChange
            this.valueChange.emit(this.textarea.value);
          }
          /** Types the given text in the textarea/emoji-input at the current cursor position */

        }, {
          key: "typein",
          value: function typein(key) {
            // Ensure the input has focus
            this.ensureFocus(); // Redirects the input to the EmojiInput.insert()

            if (this.emoji) {
              this.emoji.insert(key);
            } else {
              // Insert the given text into the textarea
              this.textarea.setRangeText(key, this.textarea.selectionStart, this.textarea.selectionEnd, 'end'); // Force the new value emission since there's no input event triggering

              this.valueChange.emit(this.textarea.value);
            }
          }
        }]);

        return TypeinAdapter;
      }();

      TypeinAdapter.ɵfac = function TypeinAdapter_Factory(t) {
        return new (t || TypeinAdapter)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_2__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_wizdm_emoji_input__WEBPACK_IMPORTED_MODULE_1__["EmojiInput"], 10));
      };

      TypeinAdapter.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: TypeinAdapter,
        selectors: [["textarea", "typein", ""], ["wm-emoji-input", "typein", ""]],
        hostBindings: function TypeinAdapter_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("input", function TypeinAdapter_input_HostBindingHandler() {
              return ctx.onInput(ctx.event$);
            });
          }
        },
        outputs: {
          valueChange: "valueChange"
        }
      });
      /***/
    },

    /***/
    "niQ8":
    /*!*********************************************************!*\
      !*** ./emoji-keyboard/src/lib/emoji-keyboard.module.ts ***!
      \*********************************************************/

    /*! exports provided: EmojiKeyboardModule */

    /***/
    function niQ8(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmojiKeyboardModule", function () {
        return EmojiKeyboardModule;
      });
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_flex_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/flex-layout */
      "u9T3");
      /* harmony import */


      var _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/cdk/scrolling */
      "7KAL");
      /* harmony import */


      var _angular_material_icon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/material/icon */
      "Tj54");
      /* harmony import */


      var _angular_material_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/material/button */
      "Dxy4");
      /* harmony import */


      var _angular_material_divider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/material/divider */
      "BSbQ");
      /* harmony import */


      var _emoji_keyboard_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./emoji-keyboard.component */
      "0qK6");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");

      var EmojiKeyboardModule = function EmojiKeyboardModule() {
        _classCallCheck(this, EmojiKeyboardModule);
      };

      EmojiKeyboardModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineNgModule"]({
        type: EmojiKeyboardModule
      });
      EmojiKeyboardModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵdefineInjector"]({
        factory: function EmojiKeyboardModule_Factory(t) {
          return new (t || EmojiKeyboardModule)();
        },
        imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_flex_layout__WEBPACK_IMPORTED_MODULE_1__["FlexLayoutModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__["ScrollingModule"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_3__["MatIconModule"], _angular_material_button__WEBPACK_IMPORTED_MODULE_4__["MatButtonModule"], _angular_material_divider__WEBPACK_IMPORTED_MODULE_5__["MatDividerModule"]]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_7__["ɵɵsetNgModuleScope"](EmojiKeyboardModule, {
          declarations: [_emoji_keyboard_component__WEBPACK_IMPORTED_MODULE_6__["EmojiKeyboardComponent"]],
          imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_flex_layout__WEBPACK_IMPORTED_MODULE_1__["FlexLayoutModule"], _angular_cdk_scrolling__WEBPACK_IMPORTED_MODULE_2__["ScrollingModule"], _angular_material_icon__WEBPACK_IMPORTED_MODULE_3__["MatIconModule"], _angular_material_button__WEBPACK_IMPORTED_MODULE_4__["MatButtonModule"], _angular_material_divider__WEBPACK_IMPORTED_MODULE_5__["MatDividerModule"]],
          exports: [_emoji_keyboard_component__WEBPACK_IMPORTED_MODULE_6__["EmojiKeyboardComponent"]]
        });
      })();
      /***/

    },

    /***/
    "omZD":
    /*!*********************************************************!*\
      !*** ./emoji/src/lib/material/emoji-material.module.ts ***!
      \*********************************************************/

    /*! exports provided: EmojiMaterialModule */

    /***/
    function omZD(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmojiMaterialModule", function () {
        return EmojiMaterialModule;
      });
      /* harmony import */


      var _emoji_material_directive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./emoji-material.directive */
      "XtK9");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");

      var EmojiMaterialModule = function EmojiMaterialModule() {
        _classCallCheck(this, EmojiMaterialModule);
      };

      EmojiMaterialModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
        type: EmojiMaterialModule
      });
      EmojiMaterialModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
        factory: function EmojiMaterialModule_Factory(t) {
          return new (t || EmojiMaterialModule)();
        }
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](EmojiMaterialModule, {
          declarations: [_emoji_material_directive__WEBPACK_IMPORTED_MODULE_0__["EmojiMaterial"]],
          exports: [_emoji_material_directive__WEBPACK_IMPORTED_MODULE_0__["EmojiMaterial"]]
        });
      })();
      /***/

    },

    /***/
    "owKJ":
    /*!********************************************************!*\
      !*** ./emoji/src/lib/input/emoji-control.directive.ts ***!
      \********************************************************/

    /*! exports provided: EmojiControl */

    /***/
    function owKJ(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EmojiControl", function () {
        return EmojiControl;
      });
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _input_emoji_input_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ../input/emoji-input.component */
      "H7fF");
      /* harmony import */


      var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! rxjs */
      "qCKp");
      /* harmony import */


      var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! rxjs/operators */
      "kU1M");
      /**
       * Bridges the EmojiInput with the Angular's form API implementing a ControlValueAccessor
       */


      var EmojiControl = /*#__PURE__*/function () {
        function EmojiControl(input) {
          _classCallCheck(this, EmojiControl);

          this.input = input;
          this.dispose$ = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"](); // Creates an observable from the input's element blur event for further use 

          this.blur$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["fromEvent"])(input.element, 'blur').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(this.dispose$)); // Creates an observable from the input valueChange event for further use 

          this.change$ = input.valueChange.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["takeUntil"])(this.dispose$));
        }
        /** Called by the forms API to write to the view when programmatic changes from model to view are requested */


        _createClass(EmojiControl, [{
          key: "writeValue",
          value: function writeValue(value) {
            //if(typeof value === 'string') {
            this.input.value = value; //}
          }
          /** Registers a callback function that is called when the control's value changes in the UI */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.change$.subscribe(function (value) {
              return fn(value);
            });
          }
          /** Registers a callback function is called by the forms API on initialization to update the form model on blur. */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.blur$.subscribe(function () {
              return fn();
            });
          }
          /**
           * Function that is called by the forms API when the control status changes to or from 'DISABLED'.
           * Depending on the status, it enables or disables the appropriate DOM element.
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(disabled) {
            this.input.disabled = disabled;
          } // Disposes of the observables on destroy

        }, {
          key: "ngOnDestroy",
          value: function ngOnDestroy() {
            this.dispose$.next();
            this.dispose$.complete();
          }
        }]);

        return EmojiControl;
      }();

      EmojiControl.ɵfac = function EmojiControl_Factory(t) {
        return new (t || EmojiControl)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_input_emoji_input_component__WEBPACK_IMPORTED_MODULE_2__["EmojiInput"]));
      };

      EmojiControl.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({
        type: EmojiControl,
        selectors: [["wm-emoji-input", "ngModel", ""], ["wm-emoji-input", "formControl", ""], ["wm-emoji-input", "formControlName", ""]],
        exportAs: ["EmojiControl"],
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵProvidersFeature"]([{
          provide: _angular_forms__WEBPACK_IMPORTED_MODULE_0__["NG_VALUE_ACCESSOR"],
          useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(function () {
            return EmojiControl;
          }),
          multi: true
        }])]
      });
      /***/
    },

    /***/
    "qM05":
    /*!*********************************************************!*\
      !*** ./wizdm/src/app/utils/textarea/textarea.module.ts ***!
      \*********************************************************/

    /*! exports provided: TextareaModule */

    /***/
    function qM05(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "TextareaModule", function () {
        return TextareaModule;
      });
      /* harmony import */


      var _textarea_newline__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! ./textarea-newline */
      "RkJ1");
      /* harmony import */


      var _typein_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./typein-adapter */
      "8mPa");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");

      var TextareaModule = function TextareaModule() {
        _classCallCheck(this, TextareaModule);
      };

      TextareaModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineNgModule"]({
        type: TextareaModule
      });
      TextareaModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵdefineInjector"]({
        factory: function TextareaModule_Factory(t) {
          return new (t || TextareaModule)();
        },
        imports: [[]]
      });

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_2__["ɵɵsetNgModuleScope"](TextareaModule, {
          declarations: [_textarea_newline__WEBPACK_IMPORTED_MODULE_0__["TextareaNewline"], _typein_adapter__WEBPACK_IMPORTED_MODULE_1__["TypeinAdapter"]],
          exports: [_textarea_newline__WEBPACK_IMPORTED_MODULE_0__["TextareaNewline"], _typein_adapter__WEBPACK_IMPORTED_MODULE_1__["TypeinAdapter"]]
        });
      })();
      /***/

    },

    /***/
    "vKPu":
    /*!**********************************************!*\
      !*** ./emoji-keyboard/src/lib/emoji-keys.ts ***!
      \**********************************************/

    /*! exports provided: EMOJI_KEYS */

    /***/
    function vKPu(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "EMOJI_KEYS", function () {
        return EMOJI_KEYS;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");

      ;
      var EMOJI_KEYS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('wizdm.emoji.keys', {
        providedIn: 'root',
        factory: function factory() {
          return [{
            id: "smileys_and_people",
            name: "Smileys & People",
            icon: "sentiment_satisfied_alt",
            keys: ["😀", "😃", "😄", "😁", "😆", "😅", "🤣", "😂", "🙂", "🙃", "😉", "😊", "😇", "🥰", "😍", "🤩", "😘", "😗", "😚", "😙", "😋", "😛", "😜", "🤪", "😝", "🤑", "🤗", "🤭", "🤫", "🤔", "🤐", "🤨", "😐", "😑", "😶", "😏", "😒", "🙄", "😬", "🤥", "😌", "😔", "😪", "🤤", "😴", "😷", "🤒", "🤕", "🤢", "🤮", "🤧", "🥵", "🥶", "🥴", "😵", "🤯", "🤠", "🥳", "😎", "🤓", "🧐", "😕", "😟", "🙁", "😮", "😯", "😲", "😳", "🥺", "😦", "😧", "😨", "😰", "😥", "😢", "😭", "😱", "😖", "😣", "😞", "😓", "😩", "😫", "🥱", "😤", "😡", "😠", "🤬", "😈", "👿", "💀", "☠️", "💩", "🤡", "👹", "👺", "👻", "👽", "👾", "🤖", "😺", "😸", "😹", "😻", "😼", "😽", "🙀", "😿", "😾", "🙈", "🙉", "🙊", "💋", "💌", "💘", "💝", "💖", "💗", "💓", "💞", "💕", "💟", "❣️", "💔", "❤️", "🧡", "💛", "💚", "💙", "💜", "🤎", "🖤", "🤍", "💯", "💢", "💥", "💫", "💦", "💨", "🕳️", "💣", "💬", "👁️‍🗨️", "🗨️", "🗯️", "💭", "💤", "👋", "🤚", "🖐️", "✋", "🖖", "👌", "🤏", "✌️", "🤞", "🤟", "🤘", "🤙", "👈", "👉", "👆", "🖕", "👇", "☝️", "👍", "👎", "✊", "👊", "🤛", "🤜", "👏", "🙌", "👐", "🤲", "🤝", "🙏", "✍️", "💅", "🤳", "💪", "🦾", "🦿", "🦵", "🦶", "👂", "🦻", "👃", "🧠", "🦷", "🦴", "👀", "👁️", "👅", "👄", "👶", "🧒", "👦", "👧", "🧑", "👱", "👨", "🧔", "👨‍🦰", "👨‍🦱", "👨‍🦳", "👨‍🦲", "👩", "👩‍🦰", "🧑‍🦰", "👩‍🦱", "🧑‍🦱", "👩‍🦳", "🧑‍🦳", "👩‍🦲", "🧑‍🦲", "👱‍♀️", "👱‍♂️", "🧓", "👴", "👵", "🙍", "🙍‍♂️", "🙍‍♀️", "🙎", "🙎‍♂️", "🙎‍♀️", "🙅", "🙅‍♂️", "🙅‍♀️", "🙆", "🙆‍♂️", "🙆‍♀️", "💁", "💁‍♂️", "💁‍♀️", "🙋", "🙋‍♂️", "🙋‍♀️", "🧏", "🧏‍♂️", "🧏‍♀️", "🙇", "🙇‍♂️", "🙇‍♀️", "🤦", "🤦‍♂️", "🤦‍♀️", "🤷", "🤷‍♂️", "🤷‍♀️", "🧑‍⚕️", "👨‍⚕️", "👩‍⚕️", "🧑‍🎓", "👨‍🎓", "👩‍🎓", "🧑‍🏫", "👨‍🏫", "👩‍🏫", "🧑‍⚖️", "👨‍⚖️", "👩‍⚖️", "🧑‍🌾", "👨‍🌾", "👩‍🌾", "🧑‍🍳", "👨‍🍳", "👩‍🍳", "🧑‍🔧", "👨‍🔧", "👩‍🔧", "🧑‍🏭", "👨‍🏭", "👩‍🏭", "🧑‍💼", "👨‍💼", "👩‍💼", "🧑‍🔬", "👨‍🔬", "👩‍🔬", "🧑‍💻", "👨‍💻", "👩‍💻", "🧑‍🎤", "👨‍🎤", "👩‍🎤", "🧑‍🎨", "👨‍🎨", "👩‍🎨", "🧑‍✈️", "👨‍✈️", "👩‍✈️", "🧑‍🚀", "👨‍🚀", "👩‍🚀", "🧑‍🚒", "👨‍🚒", "👩‍🚒", "👮", "👮‍♂️", "👮‍♀️", "🕵️", "🕵️‍♂️", "🕵️‍♀️", "💂", "💂‍♂️", "💂‍♀️", "👷", "👷‍♂️", "👷‍♀️", "🤴", "👸", "👳", "👳‍♂️", "👳‍♀️", "👲", "🧕", "🤵", "👰", "🤰", "🤱", "👼", "🎅", "🤶", "🦸", "🦸‍♂️", "🦸‍♀️", "🦹", "🦹‍♂️", "🦹‍♀️", "🧙", "🧙‍♂️", "🧙‍♀️", "🧚", "🧚‍♂️", "🧚‍♀️", "🧛", "🧛‍♂️", "🧛‍♀️", "🧜", "🧜‍♂️", "🧜‍♀️", "🧝", "🧝‍♂️", "🧝‍♀️", "🧞", "🧞‍♂️", "🧞‍♀️", "🧟", "🧟‍♂️", "🧟‍♀️", "💆", "💆‍♂️", "💆‍♀️", "💇", "💇‍♂️", "💇‍♀️", "🚶", "🚶‍♂️", "🚶‍♀️", "🧍", "🧍‍♂️", "🧍‍♀️", "🧎", "🧎‍♂️", "🧎‍♀️", "🧑‍🦯", "👨‍🦯", "👩‍🦯", "🧑‍🦼", "👨‍🦼", "👩‍🦼", "🧑‍🦽", "👨‍🦽", "👩‍🦽", "🏃", "🏃‍♂️", "🏃‍♀️", "💃", "🕺", "🕴️", "👯", "👯‍♂️", "👯‍♀️", "🧖", "🧖‍♂️", "🧖‍♀️", "🧗", "🧗‍♂️", "🧗‍♀️", "🤺", "🏇", "⛷️", "🏂", "🏌️", "🏌️‍♂️", "🏌️‍♀️", "🏄", "🏄‍♂️", "🏄‍♀️", "🚣", "🚣‍♂️", "🚣‍♀️", "🏊", "🏊‍♂️", "🏊‍♀️", "⛹️", "⛹️‍♂️", "⛹️‍♀️", "🏋️", "🏋️‍♂️", "🏋️‍♀️", "🚴", "🚴‍♂️", "🚴‍♀️", "🚵", "🚵‍♂️", "🚵‍♀️", "🤸", "🤸‍♂️", "🤸‍♀️", "🤼", "🤼‍♂️", "🤼‍♀️", "🤽", "🤽‍♂️", "🤽‍♀️", "🤾", "🤾‍♂️", "🤾‍♀️", "🤹", "🤹‍♂️", "🤹‍♀️", "🧘", "🧘‍♂️", "🧘‍♀️", "🛀", "🛌", "🧑‍🤝‍🧑", "👭", "👫", "👬", "💏", "👩‍❤️‍💋‍👨", "👨‍❤️‍💋‍👨", "👩‍❤️‍💋‍👩", "💑", "👩‍❤️‍👨", "👨‍❤️‍👨", "👩‍❤️‍👩", "👪", "👨‍👩‍👦", "👨‍👩‍👧", "👨‍👩‍👧‍👦", "👨‍👩‍👦‍👦", "👨‍👩‍👧‍👧", "👨‍👨‍👦", "👨‍👨‍👧", "👨‍👨‍👧‍👦", "👨‍👨‍👦‍👦", "👨‍👨‍👧‍👧", "👩‍👩‍👦", "👩‍👩‍👧", "👩‍👩‍👧‍👦", "👩‍👩‍👦‍👦", "👩‍👩‍👧‍👧", "👨‍👦", "👨‍👦‍👦", "👨‍👧", "👨‍👧‍👦", "👨‍👧‍👧", "👩‍👦", "👩‍👦‍👦", "👩‍👧", "👩‍👧‍👦", "👩‍👧‍👧", "🗣️", "👤", "👥", "👣"]
          }, {
            id: "animals_and_nature",
            name: "Animals & Nature",
            icon: "pets",
            keys: ["🐵", "🐒", "🦍", "🦧", "🐶", "🐕", "🦮", "🐕‍🦺", "🐩", "🐺", "🦊", "🦝", "🐱", "🐈", "🦁", "🐯", "🐅", "🐆", "🐴", "🐎", "🦄", "🦓", "🦌", "🐮", "🐂", "🐃", "🐄", "🐷", "🐖", "🐗", "🐽", "🐏", "🐑", "🐐", "🐪", "🐫", "🦙", "🦒", "🐘", "🦏", "🦛", "🐭", "🐁", "🐀", "🐹", "🐰", "🐇", "🐿️", "🦔", "🦇", "🐻", "🐨", "🐼", "🦥", "🦦", "🦨", "🦘", "🦡", "🐾", "🦃", "🐔", "🐓", "🐣", "🐤", "🐥", "🐦", "🐧", "🕊️", "🦅", "🦆", "🦢", "🦉", "🦩", "🦚", "🦜", "🐸", "🐊", "🐢", "🦎", "🐍", "🐲", "🐉", "🦕", "🦖", "🐳", "🐋", "🐬", "🐟", "🐠", "🐡", "🦈", "🐙", "🐚", "🐌", "🦋", "🐛", "🐜", "🐝", "🐞", "🦗", "🕷️", "🕸️", "🦂", "🦟", "🦠", "💐", "🌸", "💮", "🏵️", "🌹", "🥀", "🌺", "🌻", "🌼", "🌷", "🌱", "🌲", "🌳", "🌴", "🌵", "🌾", "🌿", "☘️", "🍀", "🍁", "🍂", "🍃"]
          }, {
            id: "food_and_drink",
            name: "Food & Drink",
            icon: "fastfood",
            keys: ["🍇", "🍈", "🍉", "🍊", "🍋", "🍌", "🍍", "🥭", "🍎", "🍏", "🍐", "🍑", "🍒", "🍓", "🥝", "🍅", "🥥", "🥑", "🍆", "🥔", "🥕", "🌽", "🌶️", "🥒", "🥬", "🥦", "🧄", "🧅", "🍄", "🥜", "🌰", "🍞", "🥐", "🥖", "🥨", "🥯", "🥞", "🧇", "🧀", "🍖", "🍗", "🥩", "🥓", "🍔", "🍟", "🍕", "🌭", "🥪", "🌮", "🌯", "🥙", "🧆", "🥚", "🍳", "🥘", "🍲", "🥣", "🥗", "🍿", "🧈", "🧂", "🥫", "🍱", "🍘", "🍙", "🍚", "🍛", "🍜", "🍝", "🍠", "🍢", "🍣", "🍤", "🍥", "🥮", "🍡", "🥟", "🥠", "🥡", "🦀", "🦞", "🦐", "🦑", "🦪", "🍦", "🍧", "🍨", "🍩", "🍪", "🎂", "🍰", "🧁", "🥧", "🍫", "🍬", "🍭", "🍮", "🍯", "🍼", "🥛", "☕", "🍵", "🍶", "🍾", "🍷", "🍸", "🍹", "🍺", "🍻", "🥂", "🥃", "🥤", "🧃", "🧉", "🧊", "🥢", "🍽️", "🍴", "🥄", "🔪", "🏺"]
          }, {
            id: "travel_and_places",
            name: "Travel & Places",
            icon: "beach_access",
            keys: ["🌍", "🌎", "🌏", "🌐", "🗺️", "🗾", "🧭", "🏔️", "⛰️", "🌋", "🗻", "🏕️", "🏖️", "🏜️", "🏝️", "🏞️", "🏟️", "🏛️", "🏗️", "🧱", "🏘️", "🏚️", "🏠", "🏡", "🏢", "🏣", "🏤", "🏥", "🏦", "🏨", "🏩", "🏪", "🏫", "🏬", "🏭", "🏯", "🏰", "💒", "🗼", "🗽", "⛪", "🕌", "🛕", "🕍", "⛩️", "🕋", "⛲", "⛺", "🌁", "🌃", "🏙️", "🌄", "🌅", "🌆", "🌇", "🌉", "♨️", "🎠", "🎡", "🎢", "💈", "🎪", "🚂", "🚃", "🚄", "🚅", "🚆", "🚇", "🚈", "🚉", "🚊", "🚝", "🚞", "🚋", "🚌", "🚍", "🚎", "🚐", "🚑", "🚒", "🚓", "🚔", "🚕", "🚖", "🚗", "🚘", "🚙", "🚚", "🚛", "🚜", "🏎️", "🏍️", "🛵", "🦽", "🦼", "🛺", "🚲", "🛴", "🛹", "🚏", "🛣️", "🛤️", "🛢️", "⛽", "🚨", "🚥", "🚦", "🛑", "🚧", "⚓", "⛵", "🛶", "🚤", "🛳️", "⛴️", "🛥️", "🚢", "✈️", "🛩️", "🛫", "🛬", "🪂", "💺", "🚁", "🚟", "🚠", "🚡", "🛰️", "🚀", "🛸", "🛎️", "🧳", "⌛", "⏳", "⌚", "⏰", "⏱️", "⏲️", "🕰️", "🕛", "🕧", "🕐", "🕜", "🕑", "🕝", "🕒", "🕞", "🕓", "🕟", "🕔", "🕠", "🕕", "🕡", "🕖", "🕢", "🕗", "🕣", "🕘", "🕤", "🕙", "🕥", "🕚", "🕦", "🌑", "🌒", "🌓", "🌔", "🌕", "🌖", "🌗", "🌘", "🌙", "🌚", "🌛", "🌜", "🌡️", "☀️", "🌝", "🌞", "🪐", "⭐", "🌟", "🌠", "🌌", "☁️", "⛅", "⛈️", "🌤️", "🌥️", "🌦️", "🌧️", "🌨️", "🌩️", "🌪️", "🌫️", "🌬️", "🌀", "🌈", "🌂", "☂️", "☔", "⛱️", "⚡", "❄️", "☃️", "⛄", "☄️", "🔥", "💧", "🌊"]
          }, {
            id: "activities",
            name: "Activities",
            icon: "emoji_events",
            keys: ["🎃", "🎄", "🎆", "🎇", "🧨", "✨", "🎈", "🎉", "🎊", "🎋", "🎍", "🎎", "🎏", "🎐", "🎑", "🧧", "🎀", "🎁", "🎗️", "🎟️", "🎫", "🎖️", "🏆", "🏅", "🥇", "🥈", "🥉", "⚽", "⚾", "🥎", "🏀", "🏐", "🏈", "🏉", "🎾", "🥏", "🎳", "🏏", "🏑", "🏒", "🥍", "🏓", "🏸", "🥊", "🥋", "🥅", "⛳", "⛸️", "🎣", "🤿", "🎽", "🎿", "🛷", "🥌", "🎯", "🪀", "🪁", "🎱", "🔮", "🧿", "🎮", "🕹️", "🎰", "🎲", "🧩", "🧸", "♠️", "♥️", "♦️", "♣️", "♟️", "🃏", "🀄", "🎴", "🎭", "🖼️", "🎨", "🧵", "🪡", "🧶"]
          }, {
            id: "objects",
            name: "Objects",
            icon: "emoji_objects",
            keys: ["👓", "🕶️", "🥽", "🥼", "🦺", "👔", "👕", "👖", "🧣", "🧤", "🧥", "🧦", "👗", "👘", "🥻", "🩱", "🩲", "🩳", "👙", "👚", "👛", "👜", "👝", "🛍️", "🎒", "👞", "👟", "🥾", "🥿", "👠", "👡", "🩰", "👢", "👑", "👒", "🎩", "🎓", "🧢", "⛑️", "📿", "💄", "💍", "💎", "🔇", "🔈", "🔉", "🔊", "📢", "📣", "📯", "🔔", "🔕", "🎼", "🎵", "🎶", "🎙️", "🎚️", "🎛️", "🎤", "🎧", "📻", "🎷", "🎸", "🎹", "🎺", "🎻", "🪕", "🥁", "📱", "📲", "☎️", "📞", "📟", "📠", "🔋", "🔌", "💻", "🖥️", "🖨️", "⌨️", "🖱️", "🖲️", "💽", "💾", "💿", "📀", "🧮", "🎥", "🎞️", "📽️", "🎬", "📺", "📷", "📸", "📹", "📼", "🔍", "🔎", "🕯️", "💡", "🔦", "🏮", "🪔", "📔", "📕", "📖", "📗", "📘", "📙", "📚", "📓", "📒", "📃", "📜", "📄", "📰", "🗞️", "📑", "🔖", "🏷️", "💰", "💴", "💵", "💶", "💷", "💸", "💳", "🧾", "💹", "✉️", "📧", "📨", "📩", "📤", "📥", "📦", "📫", "📪", "📬", "📭", "📮", "🗳️", "✏️", "✒️", "🖋️", "🖊️", "🖌️", "🖍️", "📝", "💼", "📁", "📂", "🗂️", "📅", "📆", "🗒️", "🗓️", "📇", "📈", "📉", "📊", "📋", "📌", "📍", "📎", "🖇️", "📏", "📐", "✂️", "🗃️", "🗄️", "🗑️", "🔒", "🔓", "🔏", "🔐", "🔑", "🗝️", "🔨", "🪓", "⛏️", "⚒️", "🛠️", "🗡️", "⚔️", "🔫", "🏹", "🛡️", "🔧", "🔩", "⚙️", "🗜️", "⚖️", "🦯", "🔗", "⛓️", "🧰", "🧲", "⚗️", "🧪", "🧫", "🧬", "🔬", "🔭", "📡", "💉", "🩸", "💊", "🩹", "🩺", "🚪", "🛏️", "🛋️", "🪑", "🚽", "🚿", "🛁", "🪒", "🧴", "🧷", "🧹", "🧺", "🧻", "🧼", "🧽", "🧯", "🛒", "🚬", "⚰️", "⚱️", "🗿"]
          }, {
            id: "symbols",
            name: "Symbols",
            icon: "emoji_symbols",
            keys: ["🏧", "🚮", "🚰", "♿", "🚹", "🚺", "🚻", "🚼", "🚾", "🛂", "🛃", "🛄", "🛅", "⚠️", "🚸", "⛔", "🚫", "🚳", "🚭", "🚯", "🚱", "🚷", "📵", "🔞", "☢️", "☣️", "⬆️", "↗️", "➡️", "↘️", "⬇️", "↙️", "⬅️", "↖️", "↕️", "↔️", "↩️", "↪️", "⤴️", "⤵️", "🔃", "🔄", "🔙", "🔚", "🔛", "🔜", "🔝", "🛐", "⚛️", "🕉️", "✡️", "☸️", "☯️", "✝️", "☦️", "☪️", "☮️", "🕎", "🔯", "♈", "♉", "♊", "♋", "♌", "♍", "♎", "♏", "♐", "♑", "♒", "♓", "⛎", "🔀", "🔁", "🔂", "▶️", "⏩", "⏭️", "⏯️", "◀️", "⏪", "⏮️", "🔼", "⏫", "🔽", "⏬", "⏸️", "⏹️", "⏺️", "⏏️", "🎦", "🔅", "🔆", "📶", "📳", "📴", "✖️", "➕", "➖", "➗", "♾️", "❓", "❔", "❕", "❗", "〰️", "💱", "💲", "⚕️", "♻️", "⚜️", "🔱", "📛", "🔰", "⭕", "✅", "☑️", "✔️", "❌", "❎", "➰", "➿", "〽️", "✳️", "✴️", "❇️", "#️⃣", "*️⃣", "0️⃣", "1️⃣", "2️⃣", "3️⃣", "4️⃣", "5️⃣", "6️⃣", "7️⃣", "8️⃣", "9️⃣", "🔟", "🔠", "🔡", "🔢", "🔣", "🔤", "🅰️", "🆎", "🅱️", "🆑", "🆒", "🆓", "ℹ️", "🆔", "Ⓜ️", "🆕", "🆖", "🅾️", "🆗", "🅿️", "🆘", "🆙", "🆚", "🈁", "🈂️", "🈷️", "🈶", "🈯", "🉐", "🈹", "🈚", "🈲", "🉑", "🈸", "🈴", "🈳", "㊗️", "㊙️", "🈺", "🈵", "🔴", "🟠", "🟡", "🟢", "🔵", "🟣", "🟤", "⚫", "⚪", "🟥", "🟧", "🟨", "🟩", "🟦", "🟪", "🟫", "⬛", "⬜", "◼️", "◻️", "◾", "◽", "▪️", "▫️", "🔶", "🔷", "🔸", "🔹", "🔺", "🔻", "💠", "🔘", "🔳", "🔲"]
          }, {
            id: "flags",
            name: "Flags",
            icon: "emoji_flags",
            keys: ["🏁", "🚩", "🎌", "🏴", "🏳️", "🏳️‍🌈", "🏴‍☠️", "🇦🇨", "🇦🇩", "🇦🇪", "🇦🇫", "🇦🇬", "🇦🇮", "🇦🇱", "🇦🇲", "🇦🇴", "🇦🇶", "🇦🇷", "🇦🇸", "🇦🇹", "🇦🇺", "🇦🇼", "🇦🇽", "🇦🇿", "🇧🇦", "🇧🇧", "🇧🇩", "🇧🇪", "🇧🇫", "🇧🇬", "🇧🇭", "🇧🇮", "🇧🇯", "🇧🇱", "🇧🇲", "🇧🇳", "🇧🇴", "🇧🇶", "🇧🇷", "🇧🇸", "🇧🇹", "🇧🇻", "🇧🇼", "🇧🇾", "🇧🇿", "🇨🇦", "🇨🇨", "🇨🇩", "🇨🇫", "🇨🇬", "🇨🇭", "🇨🇮", "🇨🇰", "🇨🇱", "🇨🇲", "🇨🇳", "🇨🇴", "🇨🇵", "🇨🇷", "🇨🇺", "🇨🇻", "🇨🇼", "🇨🇽", "🇨🇾", "🇨🇿", "🇩🇪", "🇩🇬", "🇩🇯", "🇩🇰", "🇩🇲", "🇩🇴", "🇩🇿", "🇪🇦", "🇪🇨", "🇪🇪", "🇪🇬", "🇪🇭", "🇪🇷", "🇪🇸", "🇪🇹", "🇪🇺", "🇫🇮", "🇫🇯", "🇫🇰", "🇫🇲", "🇫🇴", "🇫🇷", "🇬🇦", "🇬🇧", "🇬🇩", "🇬🇪", "🇬🇫", "🇬🇬", "🇬🇭", "🇬🇮", "🇬🇱", "🇬🇲", "🇬🇳", "🇬🇵", "🇬🇶", "🇬🇷", "🇬🇸", "🇬🇹", "🇬🇺", "🇬🇼", "🇬🇾", "🇭🇰", "🇭🇲", "🇭🇳", "🇭🇷", "🇭🇹", "🇭🇺", "🇮🇨", "🇮🇩", "🇮🇪", "🇮🇱", "🇮🇲", "🇮🇳", "🇮🇴", "🇮🇶", "🇮🇷", "🇮🇸", "🇮🇹", "🇯🇪", "🇯🇲", "🇯🇴", "🇯🇵", "🇰🇪", "🇰🇬", "🇰🇭", "🇰🇮", "🇰🇲", "🇰🇳", "🇰🇵", "🇰🇷", "🇰🇼", "🇰🇾", "🇰🇿", "🇱🇦", "🇱🇧", "🇱🇨", "🇱🇮", "🇱🇰", "🇱🇷", "🇱🇸", "🇱🇹", "🇱🇺", "🇱🇻", "🇱🇾", "🇲🇦", "🇲🇨", "🇲🇩", "🇲🇪", "🇲🇫", "🇲🇬", "🇲🇭", "🇲🇰", "🇲🇱", "🇲🇲", "🇲🇳", "🇲🇴", "🇲🇵", "🇲🇶", "🇲🇷", "🇲🇸", "🇲🇹", "🇲🇺", "🇲🇻", "🇲🇼", "🇲🇽", "🇲🇾", "🇲🇿", "🇳🇦", "🇳🇨", "🇳🇪", "🇳🇫", "🇳🇬", "🇳🇮", "🇳🇱", "🇳🇴", "🇳🇵", "🇳🇷", "🇳🇺", "🇳🇿", "🇴🇲", "🇵🇦", "🇵🇪", "🇵🇫", "🇵🇬", "🇵🇭", "🇵🇰", "🇵🇱", "🇵🇲", "🇵🇳", "🇵🇷", "🇵🇸", "🇵🇹", "🇵🇼", "🇵🇾", "🇶🇦", "🇷🇪", "🇷🇴", "🇷🇸", "🇷🇺", "🇷🇼", "🇸🇦", "🇸🇧", "🇸🇨", "🇸🇩", "🇸🇪", "🇸🇬", "🇸🇭", "🇸🇮", "🇸🇯", "🇸🇰", "🇸🇱", "🇸🇲", "🇸🇳", "🇸🇴", "🇸🇷", "🇸🇸", "🇸🇹", "🇸🇻", "🇸🇽", "🇸🇾", "🇸🇿", "🇹🇦", "🇹🇨", "🇹🇩", "🇹🇫", "🇹🇬", "🇹🇭", "🇹🇯", "🇹🇰", "🇹🇱", "🇹🇲", "🇹🇳", "🇹🇴", "🇹🇷", "🇹🇹", "🇹🇻", "🇹🇼", "🇹🇿", "🇺🇦", "🇺🇬", "🇺🇲", "🇺🇳", "🇺🇸", "🇺🇾", "🇺🇿", "🇻🇦", "🇻🇨", "🇻🇪", "🇻🇬", "🇻🇮", "🇻🇳", "🇻🇺", "🇼🇫", "🇼🇸", "🇽🇰", "🇾🇪", "🇾🇹", "🇿🇦", "🇿🇲", "🇿🇼", "🏴󠁧󠁢󠁥󠁮󠁧󠁿", "🏴󠁧󠁢󠁳󠁣󠁴󠁿", "🏴󠁧󠁢󠁷󠁬󠁳󠁿"]
          }];
        }
      });
      /***/
    }
  }]);
})();
//# sourceMappingURL=default~dialogs-post-post-dlg-module~pages-chat-chat-module-es5.js.map