{"version":3,"sources":["webpack:///wizdm/src/app/navigator/toolbar/index.ts","webpack:///wizdm/src/app/navigator/toolbar/toolbar.module.ts","webpack:///wizdm/src/app/navigator/footer/sticky-footer.directive.ts","webpack:///wizdm/src/app/pages/chat/chat.animations.ts","webpack:///wizdm/src/app/pages/chat/composer/index.ts","webpack:///wizdm/src/app/navigator/footer/index.ts","webpack:///wizdm/src/app/pages/chat/conversation/conversation.component.ts","webpack:///wizdm/src/app/pages/chat/conversation/conversation.component.html","webpack:///wizdm/src/app/pages/chat/chat.module.ts","webpack:///connect/src/lib/database/pipes/pipes.pipe.ts","webpack:///wizdm/src/app/pages/chat/chat.component.ts","webpack:///wizdm/src/app/pages/chat/chat.component.html","webpack:///elements/src/lib/balloon/index.ts","webpack:///elements/src/lib/balloon/balloon.module.ts","webpack:///wizdm/src/app/pages/chat/composer/composer.component.ts","webpack:///wizdm/src/app/pages/chat/composer/composer.component.html","webpack:///wizdm/src/app/pages/chat/message/message.module.ts","webpack:///wizdm/src/app/navigator/toolbar/toolbar.directive.ts","webpack:///wizdm/src/app/pages/chat/conversation/index.ts","webpack:///wizdm/src/app/pages/chat/conversation/conversation.module.ts","webpack:///wizdm/src/app/pages/chat/composer/composer.module.ts","webpack:///wizdm/src/app/pages/chat/message/index.ts","webpack:///elements/src/lib/balloon/balloon.component.ts","webpack:///elements/src/lib/balloon/balloon.component.html","webpack:///wizdm/src/app/pages/chat/chat.service.ts","webpack:///wizdm/src/app/pages/chat/message/message.component.ts","webpack:///wizdm/src/app/pages/chat/message/message.component.html","webpack:///connect/src/lib/database/pipes/index.ts","webpack:///connect/src/lib/database/pipes/pipes.module.ts","webpack:///wizdm/src/app/navigator/footer/sticky-footer.module.ts"],"names":["ToolbarModule","StickyFooterDirective","teleport","template","activate","clear","$timing","$animations","transform","opacity","$event","stopPropagation","Conversation","db","user","_deleting","deletingChange","data","id","uid","value","toString","conv","ref","unwrap","data$","stream","pipe","thread$","collection","senderId","recipients","find","me","sender$","fromUserId","userName","unknownUser","last$","qf","orderBy","limitToLast","msgs","unread$","status","lastRead","x","y","isEqual","zone","length","emit","wipe","where","limit","then","count","console","log","update","arrayRemove","transaction","trx","get","menuTrigger","openMenu","routes","path","content","component","canActivate","authGuardPipe","canDeactivate","ChatModule","forChild","SnapshotDataPipe","DocumentSnapshot","TimestampPipe","Timestamp","toDate","CreatedTimePipe","created","UpdatedTimePipe","updated","ChatComponent","route","router","scroller","regex","reload$","loading","browse","deletingCount","autoScroll","stats","text","recipient","conversations$","source","convs","cursor","sortByUpdated","snap","size","metadata","hasPendingWrites","latest","concat","conversationId$","queryParamMap","params","startsWith","replace","fromUserName","activeConversation$","more$","scroll","top","messages$","conversation","document","thread","paged","scrollToBottom","scrolled$","bottom","scrolled","sub","fromId","favorites","keys","sortFavorites","lastMessage","msg","newStatus","merge","subscribe","unsubscribe","onStable","conversationsList","changes","undefined","messagesList","last","flag","reload","navigate","relativeTo","replaceUrl","next","scrollTo","body","updateFavorites","add","sender","Object","sort","a","b","match","emojis","key","findIndex","emoji","push","exec","dir","_dir","aDate","bDate","BalloonModule","expanded","MessageComposer","utils","touch","_disabled","valueChange","send","_value","emojiKeysPanel","close","typeinAdapter","typein","toggle","emojiMode","ev","shiftKey","sendNow","valid","MessageModule","ToolbarDirective","align","wmToolbarAlign","gap","wmToolbarGap","ngOnInit","ConversationModule","ComposerModule","BalloonComponent","ChatService","state","auth","authenticated","doc","arrayUnion","exists","set","empty","docs","createUrlTree","url","split","queryParams","Message","dataChange","message","deleted$","asObservable","deleted","PipesModule","StickyFooterModule"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACCA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAMaA,a;;;;;cAAAA;;;;2BAAAA,a;AAAa;;;;4HAAbA,a,EAAa;AAAA,yBAHR,mEAGQ;AAHQ,oBACrB,mEADqB;AAGR,S;AAFG,O;;;;;;;;;;;;;;;;;ACL7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAMaC,qB;AAEX,uCAAoBC,QAApB,EAAuDC,QAAvD,EAAmF;AAAA;;AAA/D,eAAAD,QAAA,GAAAA,QAAA;AAAmC,eAAAC,QAAA,GAAAA,QAAA;AAA+B,S,CAEtF;;;;;iBACA,oBAAW;AAAE,iBAAKD,QAAL,CAAcE,QAAd,CAAuB,QAAvB,EAAiC,KAAKD,QAAtC;AAAkD,W,CAE/D;;;;iBACA,uBAAc;AAAE,iBAAKD,QAAL,CAAcG,KAAd,CAAoB,QAApB,EAA8B,KAAKF,QAAnC;AAA+C;;;;;;;yBARpDF,qB,EAAqB,gI,EAAA,0H;AAAA,O;;;cAArBA,qB;AAAqB;;;;;;;;;;;;;;;;;ACNlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAEA,UAAMK,OAAO,GAAG,yCAAhB;AAEO,UAAIC,WAAW,GAAG,CAEvB,oEAAQ,KAAR,EAAe,CACb,uEAAW,QAAX,EAAqB,CACnB,kEAAM;AAAEC,iBAAS,EAAE,YAAb;AAA2BC,eAAO,EAAE;AAApC,OAAN,CADmB,EAEnB,oEAAQH,OAAR,EAAiB,kEAAM,GAAN,CAAjB,CAFmB,CAArB,CADa,EAKb,uEAAW,QAAX,EACE,oEAAQA,OAAR,EACE,kEAAM;AAAEE,iBAAS,EAAE,YAAb;AAA2BC,eAAO,EAAE;AAApC,OAAN,CADF,CADF,CALa,CAAf,CAFuB,CAAlB;;;;;;;;;;;;;;;;ACJP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AC2CQ;;;;;;;;AAIF;;AAGE;;;;;;;;AAMA;;AAAoE;AAAA,mBAASC,MAAM,CAACC,eAAP,EAAT;AAAiC,WAAjC;;AAAmC;;AAAW;;AAClH;;AAGE;;;;AAAuE;;AAAwC;;AAG/G;;AAAsB;AAAA;;AAAA;;AAAA,mBAAS,UAAT;AAA6B,WAA7B;;AAA+B;;AAAyC;;AAG9F;;AAA0B;AAAA;;AAAA;;AAAA;AAAA;;AAExB;;AAAqB;;AAAG;;AAAkD;;AAAI;;AAE9E;;AACE;;AAAgB;;AAAG;;AAAM;;AAAK;;AAAkB;;AAAI;;AACtD;;AAEA;;AACE;;AAA8E;;AAA2C;;AACzH;;AAA0D;;AAAyC;;AACrG;;AAEF;;AAEF;;AAEF;;;;;;;;;;;;;AAhCyB;;AAAA,yLAAoD,kBAApD,EAAoD,iFAApD;;AAEA;;AAGkB;;AAAA;;AAIjB;;AAAA;;AAAiD;;AAAA;;AAGlB;;AAAA;;AAK3B;;AAAA;;AAEJ;;AAAA;;AAKiB;;AAAA;;AAA2C;;AAAA;;AAC9C;;AAAA;;AAA0B;;AAAA;;;;;;;;;;;;;;;AAvEtE;;AAGE;;;;;;AAEE;;;;;;AAEF;;AAGA;;AAGE;;AAGE;;;;AAAiG;;;;;;AAI/F;;AAGF;;AAA+C;;;;;;;;AAS7C;;AAEJ;;AAGA;;AAKA;;AAsCF;;AAEF;;;;;;;;;;;;AA/EyB;;AAAA,qLAAyC,gBAAzC,EAAyC,2GAAzC;;AAEuB;;AAAA;;AAAjC;;AAW0C;;AAAA;;AAA8C;;AAAA;;AAOlD;;AAAA;;AAmB5B;;AAAA,6FAAiB,UAAjB,EAAiB,GAAjB;;;;;;;;;;UD1BdC,Y;;;;;AA8BX,8BAAYC,EAAZ,EAAyCC,IAAzC,EAA4D;AAAA;;AAAA;;AAC1D,oCAAMD,EAAN;AADuC,gBAAAC,IAAA,GAAAA,IAAA;AAVjC,gBAAAC,SAAA,GAAqB,KAArB;AAsGY,gBAAAC,cAAA,GAAiB,IAAI,0DAAJ,EAAjB;AA5FwC;AAE3D;AAlBD;;;;;eACA,eAAM;AAAa,mBAAO,KAAKC,IAAL,CAAUC,EAAjB;AAAsB;AACzC;;;;eACA,eAAM;AAAa,mBAAO,KAAKJ,IAAL,CAAUK,GAAjB;AAAuB;;;eAE1C,eAAY;AAAc,mBAAO,KAAKJ,SAAZ;AAAwB;AAGlD;;;;eACA,eAAe;AAAa,qCAAkB,KAAKE,IAAL,CAAUC,EAAV,IAAgB,GAAlC;AAA0C;AAEtE;;;;iBACO,qBAAYE,KAAZ,EAAyB;AAC9B,mBAAOA,KAAK,GAAG,EAAR,GAAa,KAAb,GAAqBA,KAAK,SAAL,IAAAA,KAAK,WAAL,GAAK,MAAL,GAAAA,KAAK,CAAEC,QAAP,EAA5B;AACD;;;eAeD,aAAqBC,IAArB,EAAoE;AAAA;;mBAAA,CAElE;;;AACA,gBAAGA,IAAI,IAAIA,IAAI,CAACJ,EAAL,MAAO,MAAK,KAAKK,GAAV,MAAa,IAAb,IAAa,aAAb,GAAa,MAAb,GAAa,GAAEL,EAAtB,CAAX,EAAqC;AAAE;AAAS,aAHkB,CAKlE;;;AACA,iBAAKD,IAAL,GAAY,KAAKO,MAAL,CAAYF,IAAZ,CAAZ,CANkE,CAQlE;;AACA,iBAAKG,KAAL,GAAa,KAAKC,MAAL,GAAcC,IAAd,CAAoB,iEAAU,KAAKV,IAAf,CAApB,EAA0C,mEAAY,CAAZ,CAA1C,CAAb,CATkE,CAWlE;;AACA,iBAAKW,OAAL,GAAe,KAAKC,UAAL,CAA6B,UAA7B,CAAf,CAZkE,CAclE;;AACA,gBAAMC,QAAQ,GAAG,KAAKb,IAAL,CAAUc,UAAV,CAAqBC,IAArB,CAA0B,UAAAd,EAAE;AAAA,qBAAIA,EAAE,KAAK,MAAI,CAACe,EAAhB;AAAA,aAA5B,KAAmD,SAApE,CAfkE,CAiBlE;;AACA,iBAAKC,OAAL,GAAe,KAAKpB,IAAL,CAAUqB,UAAV,CAAsBL,QAAtB,EAAiCH,IAAjC,CAAuC,2DAAK,UAAAV,IAAI;AAAA,qBAAIA,IAAI,IAAI;AAAEmB,wBAAQ,EAAE,MAAI,CAACC;AAAjB,eAAZ;AAAA,aAAT,CAAvC,CAAf,CAlBkE,CAoBlE;;AACA,iBAAKC,KAAL,GAAa,KAAKV,OAAL,CAAaF,MAAb,CAAqB,UAAAa,EAAE;AAAA,qBAAIA,EAAE,CAACC,OAAH,CAAW,SAAX,EAAsBC,WAAtB,CAAkC,CAAlC,CAAJ;AAAA,aAAvB,EAAkEd,IAAlE,EACX;AACA,uEAAK,UAAAe,IAAI;AAAA,qBAAIA,IAAI,CAAC,CAAD,CAAR;AAAA,aAAT,CAFW,EAGX;AACA,+EAAY,CAAZ,CAJW,CAAb,CArBkE,CA4BlE;;AACA,iBAAKC,OAAL,GAAe,KAAKlB,KAAL,CAAWE,IAAX,EACb;AACA,uEAAkC,UAAAV,IAAI,EAAI;AAAD;;AAAA,iCAACA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,GAAI,MAAJ,GAAAA,IAAI,CAAE2B,MAAP,MAAa,IAAb,IAAa,aAAb,GAAa,MAAb,GAAa,GAAG,MAAI,CAACX,EAAR,CAAb,MAAuB,IAAvB,IAAuB,aAAvB,GAAuB,MAAvB,GAAuB,GAAGY,QAA1B;AAAkC,aAA3E,CAFa,EAGb;AACA,wFAAsB,UAACC,CAAD,EAAIC,CAAJ;AAAA,qBAAU,CAAC,CAACD,CAAF,IAAO,CAAC,CAACC,CAAT,IAAcD,CAAC,CAACE,OAAF,CAAUD,CAAV,CAAxB;AAAA,aAAtB,CAJa,EAKb;AACA,6EAAW,UAAAF,QAAQ;AAAA,qBAAI,MAAI,CAACjB,OAAL,CAAaD,IAAb,EACrB;AACA,yGAAM,QAAN,EAAgB,IAAhB,EAAsBG,QAAtB,CAFqB,EAEY,6FAAQ,SAAR,CAFZ,EAEgC,gGAAWe,QAAX,CAFhC,EAEsD,2FAAM,EAAN,CAFtD,EAEiE,4FAAO,MAAI,CAAChC,EAAL,CAAQoC,IAAf,CAFjE,EAGrB;AACA,yEAAK,UAAAP,IAAI;AAAA,uBAAIA,IAAI,CAACQ,MAAT;AAAA,eAAT,CAJqB,EAKrB;AACA,iFAAY,CAAZ,CANqB,CAAJ;AAAA,aAAnB,CANa,CAAf;AAeD;;;iBAEM,mBAAS;AAAA;;AAEd;AACA,iBAAKlC,cAAL,CAAoBmC,IAApB,CAAyB,KAAKpC,SAAL,GAAiB,IAA1C,EAHc,CAKd;;AACA,mBAAO,KAAKa,OAAL,CAAawB,IAAb,CAAmB,UAAAb,EAAE;AAAA,qBAAIA,EAAE,CAACc,KAAH,CAAS,QAAT,EAAmB,IAAnB,EAAyB,MAAI,CAACpB,EAA9B,EAAkCqB,KAAlC,CAAwC,GAAxC,CAAJ;AAAA,aAArB,EAAwEC,IAAxE,CAA8E,UAAAC,KAAK,EAAI;AAE5FC,qBAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,KAAhC,EAF4F,CAG5F;;AACA,qBAAO,MAAI,CAACG,MAAL,CAAa;AAAE5B,0BAAU,EAAE,MAAI,CAAClB,EAAL,CAAQ+C,WAAR,CAAoB,MAAI,CAAC3B,EAAzB;AAAd,eAAb,EAAkEsB,IAAlE,CAAwE,YAAM;AACnF;AACA,uBAAO,MAAI,CAAC1C,EAAL,CAAQgD,WAAR,CAAqB,UAAAC,GAAG,EAAI;AACjC;AACA,yBAAOA,GAAG,CAACC,GAAJ,CAAQ,MAAI,CAACxC,GAAb,EAAkBgC,IAAlB,CAAwB,UAAAtC,IAAI,EAAI;2BAAA,CACrC;;;AACA,wBAAG,OAAAA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,GAAI,MAAJ,GAAAA,IAAI,CAAEc,UAAN,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEmB,MAAlB,KAA4B,CAA/B,EAAkC;AAAEY,yBAAG,UAAH,CAAW,MAAI,CAACvC,GAAhB;AAAuB;AAC5D,mBAHM,CAAP;AAID,iBANM,CAAP;AAOD,eATM,CAAP,CAJ4F,CAc5F;AACD,aAfM,EAeJgC,IAfI,CAeE;AAAA,qBAAM,MAAI,CAACvC,cAAL,CAAoBmC,IAApB,CAAyB,MAAI,CAACpC,SAAL,GAAiB,KAA1C,CAAN;AAAA,aAfF,CAAP;AAgBD;;;iBAI4B,yBAAgB;mBAAA,CAC3C;;;AACA,uBAAKiD,WAAL,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,QAAF,EAAhB,CAF2C,CAG3C;;AACA,mBAAO,KAAP;AACD;;;;QAxH+B,iF;;;yBAArBrD,Y,EAAY,wI,EAAA,2H;AAAA,O;;;cAAZA,Y;AAAY,wC;AAAA;AAAA;sEAkHZ,qE,EAAc,C;;;;;;;;;;;;;qBAlHd,mB;AAAe,a;;;;;;;;;;;;;;;;;;;;;;ACnB5B;;;;AAGE;;AAoFF;;;;;;AAvFkC;;AAGN;;AAAA;;;;;;;;;;;;;;;;;;;;;;ACJ5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAkCA,UAAMsD,MAAM,GAAsB,CAChC;AACEC,YAAI,EAAE,EADR;AAEEC,eAAO,EAAE,CAAC,MAAD,EAAS,YAAT,CAFX;AAGEC,iBAAS,EAAE,8DAHb;AAIEC,mBAAW,EAAE,CAAE,+DAAF,EAAa,4DAAb,EAA2B,0DAA3B,CAJf;AAIyDrD,YAAI,EAAE;AAAEsD,uBAAa,EAAE;AAAjB,SAJ/D;AAKEC,qBAAa,EAAE,CAAE,kEAAF;AALjB,OADgC,CAAlC;;UA4CaC,U;;;;;cAAAA;;;;2BAAAA,U;AAAU,S;AAAA,kBAhCZ,CACP,4DADO,EAEP,qEAFO,EAGP,oEAHO,EAIP,wEAJO,EAKP,oEALO,EAMP,sEANO,EAOP,0EAPO,EAQP,2FARO,EASP,8DATO,EAUP,0EAVO,EAWP,uDAXO,EAYP,gEAZO,EAaP,2EAbO,EAcP,2DAdO,EAeP,oEAfO,EAgBP,sEAhBO,EAiBP,oEAjBO,EAkBP,+DAlBO,EAmBP,wEAnBO,EAoBP,oEApBO,EAqBP,oEArBO,EAsBP,wEAtBO,EAuBP,4DAvBO,EAwBP,sEAxBO,EAyBP,mEAzBO,EA0BP,iEA1BO,EA2BP,uDA3BO,EA4BP,yDA5BO,EA6BP,mEAAoBC,QAApB,CAA6BR,MAA7B,CA7BO,CAgCY;;;;6HAAVO,U,EAAU;AAAA,yBAjCL,8DAiCK;AAjCQ,oBAE3B,4DAF2B,EAG3B,qEAH2B,EAI3B,oEAJ2B,EAK3B,wEAL2B,EAM3B,oEAN2B,EAO3B,sEAP2B,EAQ3B,0EAR2B,EAS3B,2FAT2B,EAU3B,8DAV2B,EAW3B,0EAX2B,EAY3B,uDAZ2B,EAa3B,gEAb2B,EAc3B,2EAd2B,EAe3B,2DAf2B,EAgB3B,oEAhB2B,EAiB3B,sEAjB2B,EAkB3B,oEAlB2B,EAmB3B,+DAnB2B,EAoB3B,wEApB2B,EAqB3B,oEArB2B,EAsB3B,oEAtB2B,EAuB3B,wEAvB2B,EAwB3B,4DAxB2B,EAyB3B,sEAzB2B,EA0B3B,mEA1B2B,EA2B3B,iEA3B2B,EA4B3B,uDA5B2B,EA6B3B,yDA7B2B,EA6Bb,kGA7Ba;AAiCR,S;AAJL,O;;;;;;;;;;;;;;;;;ACxElB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAIaE,gB;;;;;;;iBAEX,mBAAkCvD,KAAlC,EAA4D;AAE1D,mBAAOA,KAAK,YAAY,uDAAUwD,gBAA3B,GAA8C,uEAAkBxD,KAAlB,CAA9C,GAAyEA,KAAhF;AACD;;;;;;;yBALUuD,gB;AAAgB,O;;;;cAAhBA,gB;AAAgB;;;UAShBE,a;;;;;;;iBAEX,mBAAUzD,KAAV,EAA0B;AAExB,mBAAOA,KAAK,YAAY,uDAAU0D,SAA3B,GAAuC1D,KAAK,CAAC2D,MAAN,EAAvC,GAAwD3D,KAA/D;AACD;;;;;;;yBALUyD,a;AAAa,O;;;;cAAbA,a;AAAa;;;UASbG,e;;;;;;;iBAEX,mBAAkC5D,KAAlC,EAA8D;;;AAE5D,gBAAMH,IAAI,GAAGG,KAAK,YAAY,uDAAUwD,gBAA3B,GAA8C,uEAAkBxD,KAAlB,CAA9C,GAAyEA,KAAtF;AAEA,mBAAO,CAAP,KAAOH,IAAI,SAAJ,IAAAA,IAAI,WAAJ,GAAI,MAAJ,GAAAA,IAAI,CAAEgE,OAAN,MAAa,IAAb,IAAa,aAAb,GAAa,MAAb,GAAa,GAAEF,MAAF,EAApB;AACD;;;;;;;yBAPUC,e;AAAe,O;;;;cAAfA,e;AAAe;;;UAWfE,e;;;;;;;iBAEX,mBAAkC9D,KAAlC,EAA8D;;;AAE5D,gBAAMH,IAAI,GAAGG,KAAK,YAAY,uDAAUwD,gBAA3B,GAA8C,uEAAkBxD,KAAlB,CAA9C,GAAyEA,KAAtF;AAEA,mBAAO,CAAC,EAAR,GAAQ,CAAAH,IAAI,SAAJ,IAAAA,IAAI,WAAJ,GAAI,MAAJ,GAAAA,IAAI,CAAEkE,OAAN,MAAiBlE,IAAI,SAAJ,IAAAA,IAAI,WAAJ,GAAI,MAAJ,GAAAA,IAAI,CAAEgE,OAAvB,CAAD,MAAgC,IAAhC,IAAgC,aAAhC,GAAgC,MAAhC,GAAgC,GAAEF,MAAF,EAAvC;AACD;;;;;;;yBAPUG,e;AAAe,O;;;;cAAfA,e;AAAe;;;;;;;;;;;;;;;;;ACpyC;;;;;;AAGhB;;;;;;AAAA;;;;;;;;AAkBrB;;AAA2D;AAAA;;AAAA;;AAAA;AAAA,aAAwC,OAAxC,EAAwC;AAAA;;AAAA;;AAAA;AAAA,WAAxC;;AAAoE;;;;;;AAAnG;;;;;;AAF9B;;AAEE;;AAEF;;;;;;;;AAGA;;AAKiB;AAAA;;AAAA;;AAAA;;AAAA;AAAA,aAAwC,OAAxC,EAAwC;AAAA;;AAAA;;AAAA;;AAAA;AAAA,WAAxC;;AAEjB;;;;;;;;AALiB,wFAAgB,WAAhB,EAAgB,yCAAhB,EAAgB,YAAhB,EAAgB,yCAAhB;;;;;;AAZnB;;AAGE;;AAOA;;;;AASF;;;;;;;;AAhBiB;;AAAA;;AAOmB;;AAAA,uKAA2B,cAA3B,EAA2B,iBAA3B;;;;;;AAVpC;;;;;;;;AAAe;;;;;;;;AAnBjB;;AAGE;;AAGA;;AAEF;;AAQA;;;;AAAgG;AAAA;;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;AAhBnC;;AAGjD;;AAAA,sFAAc,UAAd,EAAc,IAAd;;AAaW;;AAAA;;;;;;AAgCvB;;AACE;;AACF;;;;;;;;;;;;;;;AAQI;;AAGE;;AAAsE;;;;;;AASpE;;AAEJ;;;;;;;;AAXwE;;AAAA;;;;;;AAN1E;;AAGE;;;;;;;;;;AAiBA;;;;AAEF;;;;;;;;;;;AAnBiB;;AAAA;;AAiBH;;AAAA,oNAAiD,SAAjD,EAAiD,OAAjD;;;;;;AAvBhB;;AAGE;;AAwBF;;;;;;;;AAxBgC;;AAAA,4FAAa,cAAb,EAAa,gBAAb;;;;;;;;AAgChC;;AAAqC;AAAA;;AAAA;;AAAA;AAAA;;AACnC;;AAAU;;AAAW;;AACvB;;;;AAF0F;;;;;;AAA1F;;;;;;;;AAAiE;;;;;;;;AAOnE;;AAAuB;AAAA;;AAAA;;AAAA;AAAA,aAAgB,UAAhB,EAAgB;AAAA;;AAAA;;AAAA;AAAA,WAAhB,EAAgB,MAAhB,EAAgB;AAAA;;AAAA;;AAAA;AAAA,WAAhB;;AAKvB;;;;;;AALuB,yFAAgB,MAAhB,EAAgB,WAAhB,EAAgB,UAAhB,EAAgB,sDAAhB;;;;;;AAQvB;;AAEE;;AAAqB;;AAAG;;AAAqC;;AAAI;;AAEjE;;AACE;;AACF;;AAEA;;AACE;;AAA2E;;AAA4B;;AACvG;;AAA6D;;AAA2B;;AAC1F;;AAEF;;;;;;;;AAb0C;;AAEhB;;AAAA;;AAEJ;;AAAA;;AAKc;;AAAA;;AAA2C;;AAAA;;AACxC;;AAAA;;AAA0B;;AAAA;;;;;;AAtHnE;;AAGE;;AAgDA;;AAGE;;AAIA;;;;AA6BF;;AAGA;;AAUA;;AAQA;;AAeF;;;;;;;;AArEgD;;AAAA;;AAI7B;;AAAA;;AAkDL;;AAAA;;;;UDvFDE,a;;;;;AAqCX,+BAAYvE,EAAZ,EAAyCwE,KAAzC,EAAwEC,MAAxE,EAAgGC,QAAhG,EACUzE,IADV,EACmE0E,KADnE,EAC0FvC,IAD1F,EACwG;AAAA;;AAAA;;AAEtG,sCAAMpC,EAAN,EAAU,eAAV;AAHuC,iBAAAwE,KAAA,GAAAA,KAAA;AAA+B,iBAAAC,MAAA,GAAAA,MAAA;AAAwB,iBAAAC,QAAA,GAAAA,QAAA;AACtF,iBAAAzE,IAAA,GAAAA,IAAA;AAAyD,iBAAA0E,KAAA,GAAAA,KAAA;AAAuB,iBAAAvC,IAAA,GAAAA,IAAA;AApBlF,iBAAAwC,OAAA,GAAU,IAAI,oDAAJ,CAA0B,IAA1B,CAAV;AACD,iBAAAC,OAAA,GAAmB,IAAnB;AACA,iBAAAC,MAAA,GAAkB,IAAlB;AAGC,iBAAAC,aAAA,GAAwB,CAAxB;AAIC,iBAAAC,UAAA,GAAsB,IAAtB,CAW+F,CATxG;;AACQ,iBAAAC,KAAA,GAA+B;AAAE,kBAAM,CAAR;AAAW,oBAAQ,CAAnB;AAAsB,kBAAM,CAA5B;AAA+B,kBAAM,CAArC;AAAwC,kBAAM;AAA9C,WAA/B;AAEA,iBAAAC,IAAA,GAAO,EAAP;AAGA,iBAAAC,SAAA,GAAoB,EAApB,CAGgG,CAItG;;AACA,iBAAKC,cAAL,GAAsB,OAAKR,OAAL,CAAa9D,IAAb,CAAmB,iEAAW;AAAA,mBAAM,OAAKA,IAAL,EAExD;AACA,uGAAM,YAAN,EAAoB,gBAApB,EAAsC,OAAKM,EAA3C,CAHwD,EAGR,6FAAQ,SAAR,EAAmB,MAAnB,CAHQ,EAKxD;AACA,sBAAAiE,MAAM;AAAA,qBAAIA,MAAM,CAACvE,IAAP,EAER;AACA;AACA;AACA,yGALQ,EAKA,2DAAK,UAAAwE,KAAK;AAAA,uBAAK;AAAEC,wBAAM,EAAED,KAAK,CAAC,CAAD,CAAf;AAAoBA,uBAAK,EAAE,OAAKE,aAAL,CAAmBF,KAAnB,EAA0B,MAA1B;AAA3B,iBAAL;AAAA,eAAV,CALA,EAOR;AACA,4EAAQ;AAAA,oBAAGC,MAAH,QAAGA,MAAH;AAAA,oBAAWD,KAAX,QAAWA,KAAX;AAAA,uBAAuBD,MAAM,CAACvE,IAAP,EAC7B;AACA,+GAAWyE,MAAX,CAF6B,EAG7B;AACA,gHAAWnD,IAAX,CAJ6B,EAK7B;AACA;AACA,8EAAQ,UAAAqD,IAAI;AAAA,yBAAIA,IAAI,CAACC,IAAL,GAAY,CAAZ,IAAiB,CAACD,IAAI,CAACE,QAAL,CAAcC,gBAApC;AAAA,iBAAZ,CAP6B,EAQ7B;AACA,2GAT6B,EASrB,4DAAK,CAAL,CATqB,EAU7B;AACA,2EAAK,UAAAC,MAAM;AAAA,yBAAK;AAAEN,0BAAM,EAAEM,MAAM,CAAC,CAAD,CAAhB;AAAqBP,yBAAK,EAAEO,MAAM,CAACC,MAAP,CAAcR,KAAd;AAA5B,mBAAL;AAAA,iBAAX,CAX6B,CAAvB;AAAA,eAAR,CARQ,EAsBR;AACA,2EAAM,OAAN,CAvBQ,CAAJ;AAAA,aANkD,EAgCxD;AACA,+EAAY,CAAZ,CAjCwD,CAAN;AAAA,WAAX,CAAnB,CAAtB,CALsG,CAyCtG;;AACA,iBAAKS,eAAL,GAAuBvB,KAAK,CAACwB,aAAN,CAAoBlF,IAApB,EAErB;AACA,qEAAK,UAAAmF,MAAM;AAAA,mBAAIA,MAAM,CAAC/C,GAAP,CAAW,MAAX,KAAsB,EAA1B;AAAA,WAAX,CAHqB,EAGsB,6EAHtB,EAG8C,6DAAM,CAAN,CAH9C,EAKrB;AACA,2EAAW,UAAA3B,QAAQ,EAAI;AAErB;AACA;AACA;AACA,gBAAGA,QAAQ,CAAC2E,UAAT,CAAoB,UAApB,CAAH,EAAoC;AAElC;AACA,qBAAKf,SAAL,GAAiB,EAAjB,CAHkC,CAKlC;;AACA,qBAAO,gDAAG5D,QAAQ,CAAC4E,OAAT,CAAiB,WAAjB,EAA8B,EAA9B,CAAH,CAAP;AACD,aAZoB,CAcrB;;;AACA,mBAAOlG,IAAI,CAACmG,YAAL,CAAkB7E,QAAlB,EAA4BT,IAA5B,CAAkC,4DAAK,CAAL,CAAlC,EAA2C,2DAAK,UAAAb,IAAI,EAAI;AAE7D;AACA,kBAAG,CAACA,IAAJ,EAAU;AAAE,uBAAO,OAAKkF,SAAL,GAAiB,EAAxB;AAA6B,eAHoB,CAK7D;;;AACA,qBAAKA,SAAL,GAAiBlF,IAAI,CAACI,EAAtB,CAN6D,CAQ7D;;AACA,qBAAQ,OAAKe,EAAL,GAAUnB,IAAI,CAACI,EAAf,GAAoB,OAAKe,EAAL,CAAQ0E,MAAR,CAAe7F,IAAI,CAACI,EAApB,CAApB,GAA8C,OAAK8E,SAAL,CAAeW,MAAf,CAAsB,OAAK1E,EAA3B,CAAtD;AACD,aAViD,CAA3C,CAAP;AAWD,WA1BD,CANqB,EAiCrB;AACA,6EAAY,CAAZ,CAlCqB,CAAvB,CA1CsG,CA+EtG;;AACA,iBAAKiF,mBAAL,GAA2B,2DAAc,OAAKjB,cAAnB,EAAmC,OAAKW,eAAxC,EAAyDjF,IAAzD,CACzB,2DAAK;AAAA;AAAA,gBAAEwE,KAAF;AAAA,gBAASjF,EAAT;;AAAA,mBAAiB,CAAAiF,KAAK,SAAL,IAAAA,KAAK,WAAL,GAAK,MAAL,GAAAA,KAAK,CAAEnE,IAAP,CAAa,UAAAV,IAAI;AAAA,qBAAIA,IAAI,CAACJ,EAAL,KAAYA,EAAhB;AAAA,aAAjB,MAAyC,EAA1D;AAAA,WAAL,CADyB,CAA3B,CAhFsG,CAoFtG;;AACA,cAAMiG,KAAK,GAAG5B,QAAQ,CAAC5D,IAAT,EAEZ;AACA,qEAAK,UAAAyF,MAAM;AAAA,mBAAIA,MAAM,CAACC,GAAP,GAAa,EAAjB;AAAA,WAAX,CAHY,EAKZ;AACA,uFANY,EAMY,8DAAQ,UAAAjG,KAAK;AAAA,mBAAIA,KAAJ;AAAA,WAAb,CANZ,EAQZ;AACA,qEAAK;AAAA,mBAAM,EAAN;AAAA,WAAL,CATY,EAWZ;AACA,qEAAK;AAAA,mBAAM,OAAKsE,OAAL,GAAe,IAArB;AAAA,WAAL,CAZY,CAAd,CArFsG,CAoGtG;;AACA,iBAAK4B,SAAL,GAAiB,OAAKV,eAAL,CAAqBjF,IAArB,EAEf;AACA,qEAAK,UAAAT,EAAE;AAAA,mBAAI,OAAKqG,YAAL,GAAoBrG,EAAE,IAAI,OAAKsG,QAAL,CAActG,EAAd,CAA9B;AAAA,WAAP,CAHe,EAKf;AACA,qEAAK,UAAAI,IAAI;AAAA,mBAAI,OAAKmG,MAAL,GAAcnG,IAAI,IAAIA,IAAI,CAACO,UAAL,CAA6B,UAA7B,CAA1B;AAAA,WAAT,CANe,EAQf;AACA,2EAAW,UAAA4F,MAAM;AAAA,mBAAIA,MAAM,GAAGA,MAAM,CAAC9F,IAAP,CAAa,6FAAQ,SAAR,CAAb,EAE5B;AACA,sBAAAuE,MAAM;AAAA,qBAAIA,MAAM,CAACvE,IAAP,EAER;AACA,+GAAYwF,KAAZ,CAHQ,EAKR;AACA,4EAAQ,UAAAO,KAAK;AAAA,uBAAIxB,MAAM,CAACvE,IAAP,EACf;AACA,gHAAY+F,KAAK,CAACA,KAAK,CAACxE,MAAN,GAAe,CAAhB,CAAjB,CAFe,EAGf;AACA,gHAAW,OAAKrC,EAAL,CAAQoC,IAAnB,CAJe,EAKf;AACA,8EAAQ,UAAAqD,IAAI;AAAA,yBAAIA,IAAI,CAACC,IAAL,GAAY,CAAZ,IAAiB,CAACD,IAAI,CAACE,QAAL,CAAcC,gBAApC;AAAA,iBAAZ,CANe,EAOf;AACA,2GARe,EAQP,4DAAK,CAAL,CARO,EASf;AACA,2EAAK,UAAAC,MAAM;AAAA,yBAAIgB,KAAK,CAACf,MAAN,CAAaD,MAAb,CAAJ;AAAA,iBAAX,CAVe,CAAJ;AAAA,eAAb,CANQ,EAkBR;AACA,+EAAU,EAAV,CAnBQ,CAAJ;AAAA,aAHsB,CAwB5B;AAxB4B,aAAH,GAyBvB,gDAAG,EAAH,CAzBa;AAAA,WAAjB,CATe,EAoCf;AACA,yEAAYzD,IAAZ,EAAkB,YAAM;AACtB;AACA,mBAAK4C,UAAL,IAAmB,OAAK8B,cAAL,EAAnB,CAFsB,CAGtB;;AACA,mBAAKjC,OAAL,GAAe,KAAf;AACD,WALD,CArCe,EA4Cf;AACA,6EAAY,CAAZ,CA7Ce,CAAjB;AAgDA;;AACA,iBAAKkC,SAAL,GAAiBrC,QAAQ,CAAC5D,IAAT,EAEf;AACA,qEAAK,UAAAyF,MAAM;AAAA,mBAAIA,MAAM,CAACS,MAAP,IAAiB,EAArB;AAAA,WAAX,CAHe,EAKf;AACA,uFANe,EAQf;AACA,qEAAK,UAAAC,QAAQ;AAAA,mBAAI,OAAKjC,UAAL,GAAkB,CAACiC,QAAvB;AAAA,WAAb,CATe,EAWf;AACA,wEAAU,OAAK7E,IAAf,CAZe,CAAjB;AAtJsG;AAoKvG;;;;eApLD,eAAmB;AAAc,mBAAO,KAAK2C,aAAL,GAAqB,CAA5B;AAAgC;;;eAYjE,eAAa;AAAa,mBAAO,KAAK9E,IAAL,CAAUK,GAAjB;AAAuB;;;iBA0KjD,2BAAkB;AAAA;;AAEhB;AACA;AACA,iBAAK4G,GAAL,GAAW,KAAKnB,eAAL,CAAqBjF,IAArB,EAET;AACA,6EAAW,UAAAT,EAAE;AAAA,qBAAI,MAAI,CAAC8G,MAAL,CAAY9G,EAAZ,EAAgBS,IAAhB,CAAsB,4DAAK,CAAL,CAAtB,CAAJ;AAAA,aAAb,CAHS,EAG2C,2DAAK,UAAAV,IAAI,EAAI;AAAD;;AAAA,2BAACA,IAAI,SAAJ,IAAAA,IAAI,WAAJ,GAAI,MAAJ,GAAAA,IAAI,CAAE2B,MAAP,MAAa,IAAb,IAAa,aAAb,GAAa,MAAb,GAAa,GAAG,MAAI,CAACX,EAAR,CAAb;AAAwB,aAApC,CAH3C,EAKT;AACA,uEAAK,UAAAW,MAAM,EAAI;AAEb;AACAa,qBAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBd,MAAvB,EAHa,CAIb;;AACA,oBAAI,CAACkD,KAAL,GAAa,CAAAlD,MAAM,SAAN,IAAAA,MAAM,WAAN,GAAM,MAAN,GAAAA,MAAM,CAAEqF,SAAR,KAAqB,MAAI,CAACnC,KAAvC,CALa,CAMb;;AACA,oBAAI,CAACoC,IAAL,GAAY,MAAI,CAACC,aAAL,CAAmB,MAAI,CAACrC,KAAxB,CAAZ;AACD,aARD,CANS,EAgBT;AACA,0EAAQ,UAAAlD,MAAM;AAAA,qBAAI,MAAI,CAACwF,WAAL,GAAmBzG,IAAnB,EAEhB;AACA,+EAAU,MAAI,CAACiF,eAAL,CAAqBjF,IAArB,CAA0B,4DAAK,CAAL,CAA1B,CAAV,CAHgB,EAKhB;AACA,yEAAK,UAAA0G,GAAG;AAAA,uBAAIA,GAAG,SAAH,IAAAA,GAAG,WAAH,GAAG,MAAH,GAAAA,GAAG,CAAEpD,OAAT;AAAA,eAAR,CANgB,EAQhB;AACA,4EAAQ,UAAAA,OAAO;AAAA,uBAAI,CAAC,CAACA,OAAF,KAAc,EAAErC,MAAM,SAAN,IAAAA,MAAM,WAAN,GAAM,MAAN,GAAAA,MAAM,CAAEC,QAAV,KAAyBoC,OAAO,GAAGrC,MAAM,CAACC,QAAxD,CAAJ;AAAA,eAAf,CATgB,EAWhB;AACA,+EAAW,UAAAA,QAAQ,EAAI;AACrB;AACA,oBAAMyF,SAAS,GAAG;AAAEL,2BAAS,EAAE,MAAI,CAACnC,KAAlB;AAAyBjD,0BAAQ,EAARA;AAAzB,iBAAlB,CAFqB,CAGrB;;AACAY,uBAAO,CAACC,GAAR,CAAY,aAAZ,EAA2B4E,SAA3B,EAJqB,CAKrB;;AACA,uBAAO,MAAI,CAACf,YAAL,CAAkBgB,KAAlB,CAAwB;AAAE3F,wBAAM,sBAAK,MAAI,CAACX,EAAV,EAAeqG,SAAf;AAAR,iBAAxB,EACJ/E,IADI,CACE;AAAA,yBAAM+E,SAAN;AAAA,iBADF,CAAP;AAED,eARD,CAZgB,EAsBhB;AACA,0EAAK,CAAL,CAvBgB,CAAJ;AAAA,aAAd,CAjBS,EA2CTE,SA3CS,EAAX;AA4CD,W,CAED;;;;iBACA,uBAAc;AAAE,iBAAKT,GAAL,CAASU,WAAT;AAAyB;AAGzC;;;;iBACQ,gBAAOvH,EAAP,EAAiB;AAAA;;AAEvB;AACA,mBAAO,KAAK+B,IAAL,CAAUyF,QAAV,CAAmB/G,IAAnB,CAAyB,4DAAK,CAAL,CAAzB,EACL;AACA,6EAAW;AAAA,qBAAM,MAAI,CAACgH,iBAAL,CAAuBC,OAAvB,CAA+BjH,IAA/B,CAAqC,iEAAU,IAAV,CAArC,CAAN;AAAA,aAAX,CAFK,EAGL;AACA,uEAAK;AAAA,qBAAM,MAAI,CAACgH,iBAAL,CAAuB3G,IAAvB,CAA6B,UAAAV,IAAI;AAAA,uBAAIA,IAAI,CAACJ,EAAL,KAAYA,EAAhB;AAAA,eAAjC,CAAN;AAAA,aAAL,CAJK,EAKL;AACA,0EAAQ,UAAAI,IAAI;AAAA,qBAAI,CAAC,CAACA,IAAN;AAAA,aAAZ,CANK,EAMqB,4EAAsBuH,SAAtB,EAAiC,UAAAvH,IAAI;AAAA,qBAAIA,IAAI,CAACJ,EAAT;AAAA,aAArC,CANrB,EAOL;AACA,6EAAW,UAAAI,IAAI;AAAA,qBAAIA,IAAI,CAACG,KAAT;AAAA,aAAf,CARK,CAAP;AAUD;AAED;;;;iBACQ,uBAAW;AAAA;;AAEjB;AACA,mBAAO,KAAKwB,IAAL,CAAUyF,QAAV,CAAmB/G,IAAnB,CAAyB,4DAAK,CAAL,CAAzB,EACL;AACA,6EAAW;AAAA,qBAAM,MAAI,CAACmH,YAAL,CAAkBF,OAAlB,CAA0BjH,IAA1B,CAAgC,iEAAU,IAAV,CAAhC,CAAN;AAAA,aAAX,CAFK,EAGL;AACA,uEAAK,YAAM;AAAD;;AAAA,2BAAC,MAAI,CAACmH,YAAL,CAAkBC,IAAnB,MAAuB,IAAvB,IAAuB,aAAvB,GAAuB,MAAvB,GAAuB,GAAE9H,IAAzB;AAA6B,aAAvC,CAJK,EAKL;AACA,yFANK,CAAP;AAQD;AAED;;;;iBACO,oBAAW+H,IAAX,EAA0B9H,EAA1B,EAAsC;AAE3C;AACA,iBAAK0E,aAAL,GAAqB,KAAKA,aAAL,IAAsBoD,IAAI,GAAG,CAAH,GAAO,CAAC,CAAlC,CAArB,CAH2C,CAI3C;;AACA,gBAAG,KAAKpD,aAAL,IAAsB,CAAzB,EAA4B;AAC1B;AACA,mBAAKG,IAAL,GAAY,EAAZ,CAF0B,CAG1B;;AACA,mBAAKkD,MAAL;AACD;AACF;AAED;;;;iBACO,kBAAS;AAAA;;AAEd;AACA;AACA,mBAAO,KAAK3D,MAAL,CAAY4D,QAAZ,CAAqB,CAAC,GAAD,CAArB,EAA4B;AAAEC,wBAAU,EAAE,KAAK9D,KAAnB;AAA0B+D,wBAAU,EAAG;AAAvC,aAA5B,EACL;AADK,aAEJ7F,IAFI,CAEE;AAAA,qBAAM,MAAI,CAACkC,OAAL,CAAa4D,IAAb,EAAN;AAAA,aAFF,CAAP;AAGD;AAED;;;;iBACO,0BAAiB;AACtB,iBAAK9D,QAAL,CAAc+D,QAAd,CAAuB;AAAEzB,oBAAM,EAAE;AAAV,aAAvB;AACD;AAED;;;;iBACO,4BAAmB;AACxB;AACA,iBAAKhC,UAAL,IAAmB,KAAK8B,cAAL,EAAnB;AACD;AAED;;;;iBACO,cAAK4B,IAAL,EAAmB;AAAA;;AACxB;AACA,iBAAKC,eAAL,CAAqBD,IAArB,EAFwB,CAGxB;;AACA,iBAAK9B,MAAL,CAAYgC,GAAZ,CAAgB;AAAEF,kBAAI,EAAJA,IAAF;AAAQG,oBAAM,EAAE,KAAKzH,EAArB;AAAyB+D,uBAAS,EAAE,KAAKA;AAAzC,aAAhB,EAAsEzC,IAAtE,CAA4E,YAAM;AAChF;AACA,oBAAI,CAACsC,UAAL,GAAkB,IAAlB,CAFgF,CAGhF;;AACA,oBAAI,CAACE,IAAL,GAAY,EAAZ;AACD,aALD,EAJwB,CAUxB;;AACA,mBAAO,KAAP;AACD;AAED;;;;iBACQ,uBAAcD,KAAd,EAA0C;AAChD,mBAAO6D,MAAM,CAACzB,IAAP,CAAYpC,KAAZ,EAAmB8D,IAAnB,CAAyB,UAACC,CAAD,EAAGC,CAAH;AAAA,qBAAShE,KAAK,CAACgE,CAAD,CAAL,GAAWhE,KAAK,CAAC+D,CAAD,CAAzB;AAAA,aAAzB,CAAP;AACD;AAED;;;;iBACO,yBAAgBN,IAAhB,EAA8B;AAAA;;AAEnC,gBAAIQ,KAAJ;AAAW,gBAAIC,MAAM,GAAG,EAAb;;AAFwB;AAKjC,kBAAMC,GAAG,GAAGF,KAAK,CAAC,CAAD,CAAjB;;AAEA,kBAAGC,MAAM,CAACE,SAAP,CAAkB,UAAAC,KAAK;AAAA,uBAAIA,KAAK,KAAKF,GAAd;AAAA,eAAvB,IAA6C,CAAhD,EAAmD;AAEjDD,sBAAM,CAACI,IAAP,CAAYL,KAAK,CAAC,CAAD,CAAjB;AAEA,uBAAI,CAACjE,KAAL,CAAWmE,GAAX,IAAkB,CAAC,OAAI,CAACnE,KAAL,CAAWmE,GAAX,KAAmB,CAApB,IAAyB,CAA3C;AACD;AAZgC;;AAGnC,mBAAMF,KAAK,GAAG,KAAKvE,KAAL,CAAW6E,IAAX,CAAgBd,IAAhB,CAAd,EAAqC;AAAA;AAUpC;;AAED,gBAAGS,MAAM,CAAC9G,MAAP,GAAgB,CAAnB,EAAsB;AACpB,mBAAKgF,IAAL,GAAY,KAAKC,aAAL,CAAmB,KAAKrC,KAAxB,CAAZ;AACD;AACF;AAGD;;;;iBACO,mBAAU7E,IAAV,EAA4C;AACjD,mBAAOA,IAAI,CAACC,EAAZ;AACD;AAED;;;;iBACQ,uBAAcD,IAAd,EAAkDqJ,GAAlD,EAAoE;AAE1E,gBAAMC,IAAI,GAAGD,GAAG,KAAK,MAAR,GAAiB,CAAC,CAAlB,GAAsB,CAAnC;;AAEA,mBAAOrJ,IAAI,CAAC2I,IAAL,CAAU,UAACC,CAAD,EAAGC,CAAH,EAAS;AAExB,kBAAMU,KAAK,GAAGX,CAAC,SAAD,IAAAA,CAAC,WAAD,GAAC,MAAD,GAAAA,CAAC,CAAE5I,IAAH,GAAUkE,OAAxB;;AACA,kBAAG,CAACqF,KAAJ,EAAW;AAAE,uBAAOD,IAAP;AAAc;;AAE3B,kBAAME,KAAK,GAAGX,CAAC,SAAD,IAAAA,CAAC,WAAD,GAAC,MAAD,GAAAA,CAAC,CAAE7I,IAAH,GAAUkE,OAAxB;;AACA,kBAAG,CAACsF,KAAJ,EAAW;AAAE,uBAAO,CAACF,IAAR;AAAe;;AAE5B,qBAAOE,KAAK,GAAGD,KAAR,GAAgBD,IAAhB,GAAwBE,KAAK,GAAGD,KAAR,GAAgB,CAACD,IAAjB,GAAwB,CAAvD;AACD,aATM,CAAP;AAUD;;;;QAjYgC,qF;;;yBAAtBnF,a,EAAa,wI,EAAA,+H,EAAA,uH,EAAA,qI,EAAA,2H,EAAA,gEAsCuB,8DAtCvB,C,EAsCiC,qH;AAAA,O;;;cAtC9CA,a;AAAa,gC;AAAA;AAAA;sEAGV,kF,EAAY,C;;sEAUZ,mE,EAAO,C;;;;;;;;;;;;;;;;AClCvB;;;;AAAmC;;;;;;;qBDmBrB;;;;;;;;;;;;;;;;;;AErBd;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACCA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAOasF,a;;;;;cAAAA;;;;2BAAAA,a;AAAa,S;AAAA,kBAJf,EAIe;;;;4HAAbA,a,EAAa;AAAA,yBAHR,mEAGQ;AAHQ,oBACrB,mEADqB;AAGR,S;AAFG,O;;;;;;;;;;;;;;;;;ACN7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;ACOI;;AACE;;AAAW;;AAA0C;;AACrD;;AAA0B;AAAA;;AAAA;;AAAA;AAAA;;AAC1B;;AAAA;;AACA;;AAIS;AAAA;;AAAA;;AAAA;AAAA;;AACP;;AACJ;;;;;;;;AATa;;AAAA;;AACe;;AAAA,0FAAiB,SAAjB,EAAiB,gBAAjB,EAAiB,UAAjB,EAAiB,eAAjB;;AAGjB;;AAAA;;AACA,qJAA8C,YAA9C,EAA8C,2EAA9C;;;;;;;;AAQT;;AACE;;AAAW;;AAA0C;;AACrD;;AAAgC;AAAA;;AAAA;;AAAA;AAAA;;AAA8D;;AAC9F;;AAIS;AAAA;;AAAA;;AAAA;AAAA;;AACT;;AACF;;;;;;;;AARa;;AAAA;;AACqB;;AAAA,0FAAiB,SAAjB,EAAiB,gBAAjB,EAAiB,UAAjB,EAAiB,eAAjB;;AAEvB;;AAAA;;AACA,qJAA8C,YAA9C,EAA8C,2EAA9C;;;;;;;;AAxBjB;;AAEE;;AAA6D;AAAA;;AAAA;;AAAA;AAAA;;AAG3D;;AAaA;;AAcA;;AAAwD;AAAA;;AAAA;;AAAA;AAAA;;AACtD;;AACF;;AAEF;;AAGA;;AAAwD;AAAA;;AAAA;;AAAA,mBAAe,QAAAC,QAAA,OAAf;AAA8B,WAA9B;;AAEtD;;AAAoD;AAAA;;AAAA;;AAAA;AAAA;;AAA2C;;AAEjG;;AAEF;;;;;;;;;;AAxC2D;;AAAA,qGAAyB,UAAzB,EAAyB,GAAzB;;AA2B/B;;AAAA;;AACb;;AAAA,wIAAkC,YAAlC,EAAkC,8DAAlC;;AAQQ;;AAAA,6FAAkB,MAAlB,EAAkB,WAAlB;;;;UD9BVC,e;AAmCX,iCAAoBC,KAApB,EAAwEC,KAAxE,EAAwF;AAAA;;AAApE,eAAAD,KAAA,GAAAA,KAAA;AAAoD,eAAAC,KAAA,GAAAA,KAAA;AAXhE,eAAAC,SAAA,GAAqB,KAArB;AAER;;AACU,eAAAC,WAAA,GAAc,IAAI,0DAAJ,EAAd;AAEV;;AACU,eAAAL,QAAA,GAAW,IAAI,0DAAJ,EAAX;AAEV;;AACU,eAAAM,IAAA,GAAO,IAAI,0DAAJ,EAAP;AAEiF;AA5B3F;;;;;eAGA,eAAS;AAAa,mBAAO,KAAKC,MAAZ;AAAqB;AAK3C;;eAPA,aACU9J,KADV,EACyB;AAAE,iBAAK4J,WAAL,CAAiB7H,IAAjB,CAAsB,KAAK+H,MAAL,GAAc9J,KAApC;AAA6C;;;eAcxE,eAAY;AAAc,mBAAO,KAAK2J,SAAZ;AAAwB;AAclD;;eArBA,aAAsB3J,KAAtB,EAAsC;;;AAEpC,gBAAI,KAAK2J,SAAL,GAAiB,oFAAsB3J,KAAtB,CAArB,EAAoD;AAClD;AACA,yBAAK+J,cAAL,MAAmB,IAAnB,IAAmB,aAAnB,GAAmB,MAAnB,GAAmB,GAAEC,KAAF,EAAnB;AACD;AACF;;;iBAgBM,gBAAOnB,GAAP,EAAoB;mBAAA,CACzB;;;AACA,mBAAO,WAAKoB,aAAL,MAAkB,IAAlB,IAAkB,aAAlB,GAAkB,MAAlB,GAAkB,GAAEC,MAAF,CAASrB,GAAT,CAAlB,EAAiC,KAAxC;AACD;AAED;;;;iBACO,2BAAkB;AACvB;AACA,mBAAO,KAAKkB,cAAL,CAAoBI,MAApB,IAA8B,KAArC;AACD;AAED;;;;eACA,eAAe;AACb;AACA,mBAAO,KAAKV,KAAL,CAAWW,SAAX,EAAP;AACD;AAED;;;;eACA,eAAuB;AACrB;AACA;AACA,mBAAO,KAAKV,KAAL,GAAa,QAAb,GAAwB,OAA/B;AACD;AAED;;;;iBACO,qBAAYW,EAAZ,EAA+B;AACpC;AACA,mBAAQ,KAAKX,KAAL,IAAcW,EAAE,CAACC,QAAjB,IAA6BD,EAAE,CAACxB,GAAH,KAAW,OAAzC,IAAqD,KAAK0B,OAAL,EAA5D;AACD;;;eAED,eAAgB;AACd,mBAAO,CAAC,KAAKvK,KAAL,IAAc,EAAf,EAAmB2I,KAAnB,CAAyB,OAAzB,MAAsC,IAA7C;AACD;AAED;;;;iBACO,mBAAU;AAEf,iBAAK6B,KAAL,IAAc,KAAKX,IAAL,CAAU9H,IAAV,CAAgB,KAAK/B,KAArB,CAAd;AACA,mBAAO,KAAP;AACD;;;;;;;yBA7EUwJ,e,EAAe,8H,EAAA,gEAmCqB,iEAnCrB,C;AAmCmC,O;;;cAnClDA,e;AAAe,oC;AAAA;AAAA;sEAEf,6E,EAAiB,C;;sEACjB,gE,EAAa,C;;;;;;;;;;;;;;;;;;;;;;;;;;ACd1B;;;;AAAmC;;;;;;;;;;;;;;;;;;;;;ACDnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UA4BaiB,a;;;;;cAAAA;;;;2BAAAA,a;AAAa,S;AAAA,kBAff,CACP,4DADO,EAEP,qEAFO,EAGP,oEAHO,EAIP,oEAJO,EAKP,iEALO,EAMP,+DANO,EAOP,qEAPO,EAQP,qEARO,EASP,yEATO,EAUP,4DAVO,CAee;;;;6HAAbA,a,EAAa;AAAA,yBAHR,2DAGQ;AAHD,oBAXrB,4DAWqB,EAVrB,qEAUqB,EATrB,oEASqB,EARrB,oEAQqB,EAPrB,iEAOqB,EANrB,+DAMqB,EALrB,qEAKqB,EAJrB,qEAIqB,EAHrB,yEAGqB,EAFrB,4DAEqB,CAGC;AALT,oBAGJ,2DAHI;AAKS,S;AAFN,O;;;;;;;;;;;;;;;;;AC3BpB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAWaC,gB;AAEX,kCAAoB5L,QAApB,EAAuDC,QAAvD,EAAmF;AAAA;;AAA/D,eAAAD,QAAA,GAAAA,QAAA;AAAmC,eAAAC,QAAA,GAAAA,QAAA;AAA+B,S,CAQtF;;;;;iBACA,oBAAW;AAET,iBAAKD,QAAL,CAAcE,QAAd,CAAuB,SAAvB,EAAkC,KAAKD,QAAvC,EAAiD;AAC/C4L,mBAAK,EAAE,KAAKC,cADmC;AAE/CC,iBAAG,EAAE,KAAKC;AAFqC,aAAjD;AAID,W,CAED;;;;iBACA,qBAAYtD,OAAZ,EAAoC;AAAE,iBAAKuD,QAAL;AAAkB,W,CAExD;;;;iBACA,uBAAc;AAAE,iBAAKjM,QAAL,CAAcG,KAAd,CAAoB,SAApB,EAA+B,KAAKF,QAApC;AAAgD;;;;;;;yBAvBrD2L,gB,EAAgB,gI,EAAA,0H;AAAA,O;;;cAAhBA,gB;AAAgB,qD;AAAA;AAAA;AAAA;AAAA,S;AAAA;;;;;;;;;;;;;;;;;ACX7B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACCA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAsCaM,kB;;;;;cAAAA;;;;2BAAAA,kB;AAAkB,S;AAAA,kBApBpB,CACP,4DADO,EAEP,4DAFO,EAGP,qEAHO,EAIP,sEAJO,EAKP,wEALO,EAMP,oEANO,EAOP,oEAPO,EAQP,mFARO,EASP,iEATO,EAUP,0DAVO,EAWP,oEAXO,EAYP,oEAZO,EAaP,6DAbO,EAcP,sEAdO,EAeP,0EAfO,CAoBoB;;;;6HAAlBA,kB,EAAkB;AAAA,yBAHb,qEAGa;AAHD,oBAhB1B,4DAgB0B,EAf1B,4DAe0B,EAd1B,qEAc0B,EAb1B,sEAa0B,EAZ1B,wEAY0B,EAX1B,oEAW0B,EAV1B,oEAU0B,EAT1B,mFAS0B,EAR1B,iEAQ0B,EAP1B,0DAO0B,EAN1B,oEAM0B,EAL1B,oEAK0B,EAJ1B,6DAI0B,EAH1B,sEAG0B,EAF1B,0EAE0B,CAGC;AALhB,oBAGF,qEAHE;AAKgB,S;AAFN,O;;;;;;;;;;;;;;;;;ACpCzB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAkCaC,c;;;;;cAAAA;;;;2BAAAA,c;AAAc,S;AAAA,kBAlBhB,CACP,4DADO,EAEP,qEAFO,EAGP,wEAHO,EAIP,sEAJO,EAKP,+EALO,EAMP,8EANO,EAOP,0EAPO,EAQP,mEARO,EASP,0EATO,EAUP,0EAVO,EAWP,4DAXO,EAYP,+DAZO,EAaP,kEAbO,CAkBgB;;;;6HAAdA,c,EAAc;AAAA,yBAHT,oEAGS;AAHM,oBAd7B,4DAc6B,EAb7B,qEAa6B,EAZ7B,wEAY6B,EAX7B,sEAW6B,EAV7B,+EAU6B,EAT7B,8EAS6B,EAR7B,0EAQ6B,EAP7B,mEAO6B,EAN7B,0EAM6B,EAL7B,0EAK6B,EAJ7B,4DAI6B,EAH7B,+DAG6B,EAF7B,kEAE6B,CAGN;AALT,oBAGL,oEAHK;AAKS,S;AAFC,O;;;;;;;;;;;;;;;;;ACjC5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCUaC,gB;;;;;yBAAAA,gB;AAAgB,O;;;cAAhBA,gB;AAAgB,mC;AAAA,oC;AAAA,mB;AAAA;AAAA;;;;;;;;;;;;;;;;;ACT7B;;AAEE;;AAEF;;;;;;;;;;;;;;;;;;;;;ACLA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAUA;;;UAIaC,W;;;;;AAIX,6BAAY1L,EAAZ,EAAyCC,IAAzC,EAAoEwE,MAApE,EAAoF;AAAA;;AAAA;;AAClF,uCAAMzE,EAAN,EAAU,eAAV;AADuC,kBAAAC,IAAA,GAAAA,IAAA;AAA2B,kBAAAwE,MAAA,GAAAA,MAAA;AAAgB;AAEnF;;;;eAJD,eAAc;AAAa,mBAAO,KAAKxE,IAAL,CAAUK,GAAjB;AAAuB;;;iBAMlD,qBAAYkE,KAAZ,EAA2CmH,KAA3C,EAAuE;AAAA;;mBAAA,CAErE;;;AACA,gBAAMpK,QAAQ,GAAGiD,KAAK,CAACwB,aAAN,CAAoB9C,GAApB,CAAwB,MAAxB,CAAjB,CAHqE,CAKrE;;AACA,gBAAG,CAAC,KAAKjD,IAAL,CAAU2L,IAAV,CAAeC,aAAhB,IAAiCtK,QAAQ,WAAI,KAAKtB,IAAL,CAAUG,IAAd,MAAkB,IAAlB,IAAkB,aAAlB,GAAkB,MAAlB,GAAkB,GAAEmB,QAApB,CAA5C,EAA0E;AACxE,qBAAO,KAAP;AACD,aARoE,CAUrE;;;AACA,gBAAGA,QAAH,EAAa;AAEX;AACA;AACA;AACA,kBAAGA,QAAQ,CAAC2E,UAAT,CAAoB,UAApB,CAAH,EAAoC;AAAE,uBAAO,gDAAG,IAAH,CAAP;AAAkB,eAL7C,CAOX;;;AACA,qBAAO,KAAKjG,IAAL,CAAUmG,YAAV,CAAuB7E,QAAvB,EAAiCT,IAAjC,CAAuC,4DAAK,CAAL,CAAvC,EAAgD,iEAAW,UAAAb,IAAI,EAAI;AAExE;AACA,oBAAG,CAACA,IAAD,IAASA,IAAI,CAACI,EAAL,KAAY,OAAI,CAACe,EAA7B,EAAiC;AAAE,yBAAO,gDAAG,KAAH,CAAP;AAAmB,iBAHkB,CAKxE;;;AACA,oBAAMV,GAAG,GAAG,OAAI,CAACA,GAAL,CAASoL,GAAT,CAAc,OAAI,CAAC1K,EAAL,GAAUnB,IAAI,CAACI,EAAf,GAAoB,OAAI,CAACe,EAAL,CAAQ0E,MAAR,CAAe7F,IAAI,CAACI,EAApB,CAApB,GAA8CJ,IAAI,CAACI,EAAL,CAAQyF,MAAR,CAAe,OAAI,CAAC1E,EAApB,CAA5D,CAAZ,CANwE,CAQxE;;;AACA,oBAAMF,UAAU,GAAQ,OAAI,CAAClB,EAAL,CAAQ+L,UAAR,CAAmB,OAAI,CAAC9L,IAAL,CAAUK,GAA7B,EAAkCL,IAAI,CAACI,EAAvC,CAAxB,CATwE,CAWxE;;;AACA,uBAAO,OAAI,CAACL,EAAL,CAAQgD,WAAR,CAAoB,UAAAC,GAAG,EAAI;AAEhC;AACA,yBAAOA,GAAG,CAACwC,IAAJ,CAAS/E,GAAT,EAAcgC,IAAd,CAAoB,iBAAgB;AAAA,wBAAbsJ,MAAa,SAAbA,MAAa;;AAEzC;AACA;AACA;AACA,wBAAGA,MAAH,EAAW;AAAE/I,yBAAG,CAACyE,KAAJ,CAAUhH,GAAV,EAAe;AAAEQ,kCAAU,EAAVA;AAAF,uBAAf;AAAiC,qBAA9C,CAEA;AAFA,yBAGK;AAAE+B,2BAAG,CAACgJ,GAAJ,CAAQvL,GAAR,EAAa;AAAEQ,oCAAU,EAAVA;AAAF,yBAAb;AAA+B,uBARG,CAUzC;;;AACA,2BAAO,IAAP;AACD,mBAZM,CAAP;AAaD,iBAhBM,CAAP;AAiBD,eA7BsD,CAAhD,CAAP;AA8BD,aAjDoE,CAmDrE;;;AACA,mBAAO,KAAKJ,IAAL,EAEL;AACA,uGAAO,UAAAY,EAAE;AAAA,qBAAIA,EAAE,CAACc,KAAH,CAAS,YAAT,EAAuB,gBAAvB,EAAyC,OAAI,CAACpB,EAA9C,EAAkDO,OAAlD,CAA0D,SAA1D,EAAqE,MAArE,EAA6Ec,KAA7E,CAAmF,CAAnF,CAAJ;AAAA,aAAT,CAHK,EAGiG,0FAHjG,EAKL;AACA,6EAAW,UAAAgD,IAAI,EAAI;AAEjB;AACA,kBAAGA,IAAI,CAACyG,KAAR,EAAe;AAAE,uBAAO,gDAAG,IAAH,CAAP;AAAkB,eAHlB,CAKjB;;;AACA,kBAAM9L,IAAI,GAAGqF,IAAI,CAAC0G,IAAL,CAAU,CAAV,EAAa/L,IAAb,EAAb,CANiB,CAQjB;;AACA,kBAAMyI,MAAM,GAAGzI,IAAI,CAACc,UAAL,CAAgBC,IAAhB,CAAsB,UAAAgE,SAAS;AAAA,uBAAIA,SAAS,IAAI,OAAI,CAAC/D,EAAtB;AAAA,eAA/B,CAAf,CATiB,CAWjB;AACA;;AACA,qBAAO,OAAI,CAACnB,IAAL,CAAUqB,UAAV,CAAqBuH,MAArB,EAA6B/H,IAA7B,CAAmC,4DAAK,CAAL,CAAnC,EAA4C,2DAAK,UAAAb,IAAI,EAAI;AAE9D;AACA,oBAAMsB,QAAQ,GAAG,CAAAtB,IAAI,SAAJ,IAAAA,IAAI,WAAJ,GAAI,MAAJ,GAAAA,IAAI,CAAEsB,QAAN,uBAA6BkE,IAAI,CAAC0G,IAAL,CAAU,CAAV,EAAa9L,EAA1C,CAAjB,CAH8D,CAK9D;;AACA,uBAAO,OAAI,CAACoE,MAAL,CAAY2H,aAAZ,CAA0BT,KAAK,CAACU,GAAN,CAAUC,KAAV,CAAgB,GAAhB,CAA1B,EAAgD;AACrDC,6BAAW,EAAE;AACX,4BAAMhL;AADK;AADwC,iBAAhD,CAAP;AAKD,eAXkD,CAA5C,CAAP;AAYD,aAzBD,CANK,CAAP;AAiCD;;;;QA7F8B,qF;;;yBAApBmK,W,EAAW,+H,EAAA,kH,EAAA,8G;AAAA,O;;;eAAXA,W;AAAW,iBAAXA,WAAW,K;AAAA,oBAFV;;;;;;;;;;;;;;;;;ACZd;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACaM;;AAAqC;;AAAG;;;;AAAiC;;AAAI;;;;;;;;AAArC;;AAAA;;;;;;AAMtC;;AACE;;AACA;;AAAM;;AAA6D;;AACrE;;;;;;AAFW;;AAAA;;AACH;;AAAA;;;;;;AAIkB;;;;;;AAAM;;;;;;;;AAShC;;AAGE;;AAAkD;;AAAW;;AAE7D;;AAGE;;AAAsB;AAAA;;AAAA;;AAAA;AAAA;;AAAmB;;AAA4C;;AAEvF;;AAEF;;;;;;;;AATyB;;AAAA;;AAKoB;;AAAA;;;;;;AAxCrD;;AAGE;;AAKE;;AAGE;;AAGA;;AAGE;;;;AAMA;;AAGA;;AAGA;;AAA6B;;;;;;AAAgE;;AAG7F;;AAcF;;AAEF;;AAEF;;AAEF;;;;;;;;;;AAjDc;;AAAA,oKAAoD,MAApD,EAAoD,kFAApD,EAAoD,QAApD,EAAoD,kFAApD;;AAQF;;AAAA;;AAMmB;;AAAA,6JAAwB,UAAxB,EAAwB,GAAxB;;AAYM;;AAAA;;AAGd;;AAAA;;;ADxBvB;;;UAWac,O;;;;;AAcX,yBAAYxM,EAAZ,EAAyCC,IAAzC,EAA4D;AAAA;;AAAA;;AAC1D,uCAAMD,EAAN;AADuC,kBAAAC,IAAA,GAAAA,IAAA;AAqCzC;;AACgB,kBAAAwM,UAAA,GAAa,IAAI,0DAAJ,EAAb;AAtC4C;AAE3D;AAPD;;;;;eACA,eAAM;AAAa,mBAAO,KAAKrM,IAAL,CAAUC,EAAjB;AAAsB;AACzC;;;;eACA,eAAM;AAAa,mBAAO,KAAKJ,IAAL,CAAUK,GAAjB;AAAuB;AAS1C;;;;eACA,aAAqBoM,OAArB,EAAkE;AAEhE;AACA,iBAAKtM,IAAL,GAAY,KAAKO,MAAL,CAAY+L,OAAZ,CAAZ,CAHgE,CAKhE;;AACA,iBAAKrL,OAAL,GAAe,KAAKpB,IAAL,CAAUqB,UAAV,CAAqB,KAAKlB,IAAL,CAAUyI,MAA/B,CAAf,CANgE,CAQhE;;AACA,iBAAK8D,QAAL,GAAgB,KAAKC,YAAL,GAAoB9L,IAApB,EACd;AACA,uEAAK,UAAA2E,IAAI;AAAA,qBAAI,CAACA,IAAI,CAACuG,MAAV;AAAA,aAAT,CAFc,EAEe,iEAAW,CAACU,OAAO,CAACV,MAApB,CAFf,EAGd;AACA,6EAAU,UAAAa,OAAO;AAAA,qBAAI,CAACA,OAAL;AAAA,aAAjB,EAA+B,IAA/B,CAJc,EAIyB,6EAJzB,CAAhB,CATgE,CAgBhE;;AACA,iBAAKJ,UAAL,CAAgBnK,IAAhB,CAAqB,KAAKlC,IAA1B;AACD;;;iBAI4B,yBAAgB;mBAAA,CAC3C;;;AACA,uBAAK+C,WAAL,MAAgB,IAAhB,IAAgB,aAAhB,GAAgB,MAAhB,GAAgB,GAAEC,QAAF,EAAhB,CAF2C,CAG3C;;AACA,mBAAO,KAAP;AACD;;;;QAjD0B,iF;;;yBAAhBoJ,O,EAAO,wI,EAAA,2H;AAAA,O;;;cAAPA,O;AAAO,mC;AAAA;AAAA;sEA2CP,qE,EAAc,C;;;;;;;;;;;;;;qBA3Cd,mB;AAAe,a;;;;;;;;;;;;;;;;;;;;ACnB5B;;;;AAAmC;;;;;;;;;;;;;;;;;;;;;;ACFnC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAOaM,W;;;;;cAAAA;;;;2BAAAA,W;AAAW;;;;4HAAXA,W,EAAW;AAAA,yBAHN,4DAGM,EAHY,yDAGZ,EAH2B,2DAG3B,EAH4C,2DAG5C;AAH2D,oBACtE,4DADsE,EACpD,yDADoD,EACrC,2DADqC,EACpB,2DADoB;AAG3D,S;AAFsD,O;;;;;;;;;;;;;;;;;ACH9E;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAcaC,kB;;;;;cAAAA;;;;2BAAAA,kB;AAAkB,S;AAAA,kBAVpB,CACP;AADO,SAUoB;;;;4HAAlBA,kB,EAAkB;AAAA,yBAN3B,8EAM2B;AANN,oBAGrB,8EAHqB;AAMM,S;AAHN,O","file":"pages-chat-chat-module-es5.js","sourcesContent":["export * from './toolbar.directive';\nexport * from './toolbar.module';","import { NgModule } from '@angular/core';\nimport { ToolbarDirective } from './toolbar.directive';\n\n@NgModule({\n  declarations: [ ToolbarDirective ],\n  exports: [ ToolbarDirective ]\n})\nexport class ToolbarModule { }\n","import { Directive, TemplateRef, OnInit, OnDestroy } from '@angular/core';\nimport { TeleportService } from '@wizdm/teleport';\n\n@Directive({\n  selector: 'ng-template[wmFooter]'\n})\nexport class StickyFooterDirective implements OnInit, OnDestroy {\n\n  constructor(private teleport: TeleportService, private template: TemplateRef<any>) { }\n\n  // Teleports the template to the 'footer' portal\n  ngOnInit() { this.teleport.activate('footer', this.template); }\n\n  // Clears the 'footer' portal\n  ngOnDestroy() { this.teleport.clear('footer', this.template); }\n}\n","import { trigger, state, animate, style, transition, keyframes, query, stagger } from '@angular/animations';\n\nconst $timing = '450ms cubic-bezier(0.8, -0.5, 0.2, 1.5)';\n\nexport let $animations = [\n\n  trigger('pop', [\n    transition(':enter', [\n      style({ transform: 'scale(0.5)', opacity: 0 }),\n      animate($timing, style('*'))\n    ]),\n    transition(':leave', \n      animate($timing , \n        style({ transform: 'scale(0.5)', opacity: 0 })\n      )\n    )\n  ])\n];","export * from './composer.component';\nexport * from './composer.module';","export * from './footer.component';\nexport * from './footer.module';\n\nexport * from './sticky-footer.directive';\nexport * from './sticky-footer.module';","import { Component, Input, Output, EventEmitter, ViewChild, HostListener } from '@angular/core';\nimport { where, orderBy, startAfter, stream, limit } from '@wizdm/connect/database/collection/operators';\nimport { map, startWith, switchMap, shareReplay, distinctUntilChanged } from 'rxjs/operators';\nimport { QueryDocumentSnapshot, DatabaseCollection } from '@wizdm/connect/database/collection';\nimport { DatabaseService, Timestamp } from '@wizdm/connect/database';\nimport { DatabaseDocument } from '@wizdm/connect/database/document';\nimport { UserProfile, UserData } from 'app/utils/user';\nimport { ConversationData, MessageData } from '../chat-types';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { ThemePalette } from '@angular/material/core'\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'wm-conversation',\n  templateUrl: './conversation.component.html',\n  styleUrls: ['./conversation.component.scss'],\n  host: {\n    '[attr.selected]' : 'highlight',\n    '[attr.color]' : 'color'\n  }\n})\nexport class Conversation extends DatabaseDocument<ConversationData> {\n\n  private thread$: DatabaseCollection<MessageData>;\n  private data: ConversationData;\n\n  /** The conversation data */\n  public data$: Observable<ConversationData>;\n  /** The sender profile */\n  public sender$: Observable<UserData>;\n  /** The last message */\n  public last$: Observable<MessageData>;\n  /** The unread messages count */\n  public unread$: Observable<number>;\n\n  /** The conversation id */\n  get id(): string { return this.data.id; }\n  /** The current user's id */\n  get me(): string { return this.user.uid; }\n\n  get deleting(): boolean { return this._deleting; }\n  private _deleting: boolean = false;\n\n  /** Computes the unknown user id appending the conversation id */\n  get unknownUser(): string { return `unknown-${this.data.id || '0'}`; }\n\n  /** Returns the unread count label */\n  public unreadCount(value: number): string {\n    return value > 10 ? '10+' : value?.toString();\n  }\n\n  constructor(db: DatabaseService, private user: UserProfile) {\n    super(db);\n  }\n\n  /** Highlight the conversation */\n  @Input() highlight: boolean;\n\n  /** Highlighting color */\n  @Input() color: ThemePalette;\n\n  /** Shows the unread message counter */\n  @Input() showUnread: boolean;\n\n  @Input() set content(conv: QueryDocumentSnapshot<ConversationData>) {\n\n    // Skips useless changes\n    if(conv && conv.id === this.ref?.id) { return; }\n    \n    // Unwraps the document data from the snapshot\n    this.data = this.unwrap(conv);\n\n    // Streams new data as an observable\n    this.data$ = this.stream().pipe( startWith(this.data), shareReplay(1) );\n    \n    // The conversation's messages thread\n    this.thread$ = this.collection<MessageData>('messages');\n\n    // Assumes the sender being the first recipient differing from the current user\n    const senderId = this.data.recipients.find(id => id !== this.me) || 'unknown';\n\n    // Resolves the sender user profile falling back to an unknown userName including the conversation id\n    this.sender$ = this.user.fromUserId( senderId ).pipe( map( data => data || { userName: this.unknownUser } ) );\n\n    // Resolves the last message in the thread\n    this.last$ = this.thread$.stream( qf => qf.orderBy('created').limitToLast(1) ).pipe( \n      // Gets the last message\n      map( msgs => msgs[0] ),\n      // Shares the same result to multiple subscribers\n      shareReplay(1)\n    );\n\n    // Resolves the unread messages count up to 10+ unread messages\n    this.unread$ = this.data$.pipe( \n      // Streams the conversation data getting the user's specific lastRead timestamp that will be used as a cursor\n      map<ConversationData, Timestamp>( data => data?.status?.[this.me]?.lastRead ), \n      // Filters unchanged values\n      distinctUntilChanged( (x, y) => !!x && !!y && x.isEqual(y) ), \n      // Streams the messages...\n      switchMap( lastRead => this.thread$.pipe( \n        // Selects sender messages after the lastRead timestamp up to 11 messages\n        where('sender', '==', senderId), orderBy('created'), startAfter(lastRead), limit(11), stream(this.db.zone), \n        // Turns the results lenght into the unread counter\n        map( msgs => msgs.length ),\n        // Shares the same result to all subscribers\n        shareReplay(1) \n      ))\n    );\n  }\n\n  public delete() {\n\n    // Notifies the beginning of the process.\n    this.deletingChange.emit(this._deleting = true);\n\n    // Starts by wiping messages in batches of 100\n    return this.thread$.wipe( qf => qf.where('sender', '==', this.me).limit(100) ).then( count => {\n\n      console.log('Messages deleted', count);\n      // Atomically remove my id from the recipients array\n      return this.update( { recipients: this.db.arrayRemove(this.me) as any }).then( () => {\n        // Attempts to delete the conversation within a transaction\n        return this.db.transaction( trx => {\n          // Gets the conversartion data first\n          return trx.get(this.ref).then( data => {\n            // Deletes the conversation whenever the recipients array is empty\n            if(data?.recipients?.length <= 0) { trx.delete(this.ref); }\n          });\n        });\n      });\n      // At last, reports the deletion completed\n    }).then( () => this.deletingChange.emit(this._deleting = false) );\n  }\n\n  // Gets the menu trigger\n  @ViewChild(MatMenuTrigger) private menuTrigger: MatMenuTrigger;\n  @HostListener('contextmenu') onContextMenu() {\n    // Opens the menu on contextmenu event  \n    this.menuTrigger?.openMenu();\n    // Prevents default\n    return false;\n  }\n\n  @Output('deleting') deletingChange = new EventEmitter<boolean>();\n}\n","\n<!-- Use a button for hover/focus/ripple effects -->\n<button mat-button routerLink=\".\" [queryParams]=\"{ with: (sender$ | async)?.userName }\">\n\n  <!-- Gets the localized content -->\n  <div *wmContent=\"let msgs select 'chat.conversation'\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n    <!-- Displays the avatar of the sender on the left -->\n    <div fxFlex=\"0 0 auto\" [matBadge]=\"unreadCount(unread$ | async)\" [matBadgeHidden]=\"!showUnread || (unread$ | async) <= 0\" matBadgeSize=\"small\">\n\n      <wm-avatar [src]=\"(sender$ | async)?.photo\" [class.skeleton-loading]=\"!(sender$ | async)\" color=\"primary\"></wm-avatar>\n      \n    </div>\n\n    <!-- Displays the conversation body on the right -->\n    <div fxFlex=\"1 1 auto\" fxLayout=\"column\" fxLayoutAlign=\"start stretch\" class=\"content\">\n\n      <!-- First body line -->\n      <div fxLayout=\"row\" fxLayoutGap=\"8px\">\n\n        <!-- Sender full name -->\n        <div fxFlex=\"1 1 auto\" class=\"name mat-title text\" [class.skeleton-loading]=\"!(sender$ | async)\">{{\n\n          (sender$ | async) ? ((sender$ | async).fullName || msgs.unknownUser || 'Unknown user') : ''\n          \n        }}</div>\n\n        <!-- Last message time (moment calendar) -->\n        <time fxFlex=\"0 0 auto\" class=\"time mat-small\">{{ \n\n          ((last$ | async) || data) | updatedTime | calendar:msgs.timeFormat || {\n            sameDay: \"LT\",\n            lastDay: \"[Yesterday]\",\n            lastWeek: \"dddd\",\n            sameElse: \"L\"\n          }\n\n        }}</time>\n\n      </div>\n\n      <!-- Deletion progress bar -->\n      <ng-template #deletingProgress>\n        <mat-progress-bar class=\"mat-body\" style=\"height: 1em\" color=\"primary\" mode=\"indeterminate\"></mat-progress-bar>        \n      </ng-template>\n\n      <!-- Second body line -->\n      <div fxLayout=\"row\" *ngIf=\"!deleting; else deletingProgress\">\n\n        <!-- Last message body -->\n        <div fxFlex=\"1 1 auto\" class=\"last mat-body text\" \n                               [class.unread]=\"showUnread && (unread$ | async) > 0\" \n                               [class.skeleton-loading]=\"!(sender$ | async)\"\n                               [wm-emoji-text]=\"(last$ | async)?.body\"></div>\n      \n        <!-- Options menu -->\n        <mat-icon fxFlex=\"0 0 auto\" class=\"menu\" [matMenuTriggerFor]=\"menu\" (click)=\"$event.stopPropagation()\">expand_more</mat-icon>\n        <mat-menu #menu=\"matMenu\">\n\n          <!-- Contact info -->\n          <button mat-menu-item routerLink=\"/@{{ (sender$ | async)?.userName }}\">{{ msgs.info?.label || 'Contact info' }}</button>\n\n          <!-- Delete chat -->\n          <button mat-menu-item (click)=\"confirmDelete.open()\">{{ msgs.delete?.label || 'Delete chat' }}</button>\n\n          <!-- Confirm deleting chat dialog -->\n          <wm-dialog #confirmDelete (closedChange)=\"$event && delete()\">\n\n            <h2 mat-dialog-title><b>{{ msgs.confirmDelete?.title || 'Deleting chat' }}</b></h2>\n          \n            <mat-dialog-content [wm-readme]=\"msgs.confirmDelete?.message\">\n              You're about to <b>delete</b> this conversation.<br>Are you sure?\n            </mat-dialog-content>\n          \n            <mat-dialog-actions align=\"end\">\n              <button mat-button color=\"primary\" [mat-dialog-close]=\"false\" cdkFocusInitial>{{ msgs.confirmDelete?.cancel || 'Abort' }}</button>\n              <button mat-button color=\"warn\" [mat-dialog-close]=\"true\">{{ msgs.confirmDelete?.ok || 'Proceed' }}</button>\n            </mat-dialog-actions>\n\n          </wm-dialog>\n\n        </mat-menu>\n      \n      </div>\n    \n    </div>\n\n  </div>\n\n</button>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatListModule } from '@angular/material/list';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ContentRouterModule, RoutesWithContent } from '@wizdm/content';\nimport { RedirectModule } from '@wizdm/redirect';\nimport { GtagModule } from '@wizdm/gtag';\nimport { IconModule } from '@wizdm/elements/icon';\nimport { ButtonChangerModule } from '@wizdm/elements/button';\nimport { PipesModule } from '@wizdm/connect/database/pipes';\nimport { ReadmeModule } from '@wizdm/readme';\nimport { AvatarModule } from '@wizdm/elements/avatar';\nimport { BalloonModule } from '@wizdm/elements/balloon';\nimport { DialogModule } from '@wizdm/elements/dialog';\nimport { TeleportModule } from '@wizdm/teleport';\nimport { ActionbarModule } from 'app/navigator/actionbar';\nimport { SidenavModule } from 'app/navigator/sidenav';\nimport { ToolbarModule } from 'app/navigator/toolbar';\nimport { StickyFooterModule } from 'app/navigator/footer';\nimport { FabModule } from 'app/navigator/fab';\nimport { MomentPipesModule } from '@wizdm/pipes/moment';\nimport { CanLeaveModule, CanLeaveGuard } from 'app/utils/can-leave';\nimport { AuthGuard, emailVerified } from 'app/utils/auth-guard';\nimport { ValidProfile } from 'app/utils/user';\nimport { ConversationModule } from './conversation';\nimport { MessageModule } from './message';\nimport { ComposerModule } from './composer';\nimport { ChatService } from './chat.service';\nimport { ChatComponent } from './chat.component';\n\nconst routes: RoutesWithContent = [\n  {\n    path: '',\n    content: ['chat', 'emoji-keys'],\n    component: ChatComponent,\n    canActivate: [ AuthGuard, ValidProfile, ChatService ], data: { authGuardPipe: emailVerified },\n    canDeactivate: [ CanLeaveGuard ]\n  }\n];\n\n@NgModule({\n  declarations: [ ChatComponent ],\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatButtonModule,\n    MatListModule,\n    MatBadgeModule,\n    MatDividerModule,\n    MatProgressSpinnerModule,\n    RedirectModule,\n    PipesModule,\n    GtagModule,\n    IconModule, \n    ButtonChangerModule,\n    ReadmeModule,\n    AvatarModule,\n    BalloonModule,\n    DialogModule,\n    TeleportModule,\n    ActionbarModule,\n    SidenavModule,\n    ToolbarModule,\n    StickyFooterModule,\n    FabModule,\n    MomentPipesModule,\n    CanLeaveModule,\n    ConversationModule,\n    MessageModule,\n    ComposerModule,\n    ContentRouterModule.forChild(routes)\n  ]\n})\nexport class ChatModule { }\n","import { DocumentSnapshot, DocumentData } from '../document/types';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { Timestamp } from '../database-application';\nimport { mapSnaphotData } from '../document/utils';\nimport { firestore } from 'firebase/app';\n\n@Pipe({ name: 'snapshotData' })\nexport class SnapshotDataPipe implements PipeTransform {\n\n  transform<T extends DocumentData>(value: DocumentSnapshot<T>): T {\n\n    return value instanceof firestore.DocumentSnapshot ? mapSnaphotData<T>(value) : value;\n  }\n}\n\n@Pipe({ name: 'timestamp' })\nexport class TimestampPipe implements PipeTransform {\n\n  transform(value: Timestamp): Date {\n\n    return value instanceof firestore.Timestamp ? value.toDate() : value;\n  }\n}\n\n@Pipe({ name: 'createdTime' })\nexport class CreatedTimePipe implements PipeTransform {\n\n  transform<T extends DocumentData>(value: T|DocumentSnapshot<T>): Date {\n\n    const data = value instanceof firestore.DocumentSnapshot ? mapSnaphotData<T>(value) : value;\n\n    return data?.created?.toDate();\n  }\n}\n\n@Pipe({ name: 'updatedTime' })\nexport class UpdatedTimePipe implements PipeTransform {\n\n  transform<T extends DocumentData>(value: T|DocumentSnapshot<T>): Date {\n\n    const data = value instanceof firestore.DocumentSnapshot ? mapSnaphotData<T>(value) : value;\n\n    return (data?.updated || data?.created)?.toDate();\n  }\n}\n","import { take, skip, startWith, map, tap, filter, expand, pluck, switchMap, distinctUntilChanged, shareReplay, takeUntil, delay, debounceTime } from 'rxjs/operators';\nimport { where, orderBy, startAfter, endBefore, snap, pageReverse, onSnapshot, docs } from '@wizdm/connect/database/collection/operators';\nimport { Component, AfterViewInit, OnDestroy, Inject, NgZone, ViewChildren, QueryList } from '@angular/core';\nimport { DatabaseCollection, QueryDocumentSnapshot } from '@wizdm/connect/database/collection';\nimport { ConversationData, ConversationFavorites, MessageData } from './chat-types';\nimport { Subscription, Observable, BehaviorSubject, of, combineLatest } from 'rxjs';\nimport { DatabaseDocument } from '@wizdm/connect/database/document';\nimport { UserProfile, UserData } from 'app/utils/user';\nimport { DatabaseService } from '@wizdm/connect/database';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ScrollObservable } from 'app/utils/scrolling';\nimport { runInZone, zoneStable } from '@wizdm/rxjs';\nimport { EmojiRegex } from '@wizdm/emoji/utils';\nimport { $animations } from './chat.animations';\nimport { Conversation } from './conversation/conversation.component';\nimport { Message } from './message/message.component';\n\n@Component({\n  selector: 'wm-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.scss'],\n  animations: $animations\n})\nexport class ChatComponent extends DatabaseCollection<ConversationData> implements AfterViewInit, OnDestroy {\n\n  // Conversation(s)\n  @ViewChildren(Conversation) conversationsList: QueryList<Conversation>;\n  private conversation: DatabaseDocument<ConversationData>;\n  /** Conversations observable (from DB) */\n  readonly conversations$: Observable<QueryDocumentSnapshot<ConversationData>[]>;\n  /** Active converastion Id  observable */  \n  readonly conversationId$: Observable<string>;\n  /** Active conversation observable */\n  readonly activeConversation$: Observable<QueryDocumentSnapshot<ConversationData>>;\n  \n  // Messages thread\n  @ViewChildren(Message) messagesList: QueryList<Message>;\n  private  thread: DatabaseCollection<MessageData>;\n  /** Active conversation's messages (from DB) */\n  readonly messages$: Observable<QueryDocumentSnapshot<MessageData>[]>;  \n  \n  private reload$ = new BehaviorSubject<void>(null);\n  public loading: boolean = true;\n  public browse: boolean = true;\n\n  public get deleting(): boolean { return this.deletingCount > 0; }\n  private deletingCount: number = 0;\n  \n  // Scrolling\n  readonly scrolled$: Observable<boolean>;\n  private  autoScroll: boolean = true;\n  \n  // Keys\n  private stats: ConversationFavorites = { \"😂\": 1, \"👋🏻\": 1, \"👍\": 1, \"💕\": 1, \"🙏\": 1 };\n  public  keys: string[];\n  public  text = \"\";\n\n  public get me(): string { return this.user.uid; }\n  private recipient: string = '';\n  \n  constructor(db: DatabaseService, private route: ActivatedRoute, private router: Router, private scroller: ScrollObservable, \n    private user: UserProfile<UserData>, @Inject(EmojiRegex) private regex: RegExp, private zone: NgZone) {\n\n    super(db, 'conversations');\n        \n    // Lists all my active conversations\n    this.conversations$ = this.reload$.pipe( switchMap( () => this.pipe( \n\n      // Selects all the conversations where recipients[] contains my user's id\n      where('recipients', 'array-contains', this.me), orderBy('created', 'desc'), \n\n      // Combines existing conversations with new comers\n      source => source.pipe( \n\n        // Gets the list of existing conversations and sort them by updated value. \n        // Note: we set the cursor apart to avoid messing up with the following queries \n        // since the conversation array will be shuffled\n        snap(), map( convs => ({ cursor: convs[0], convs: this.sortByUpdated(convs, 'desc') })),\n\n        // Appends new comers to the top of the list\n        expand( ({ cursor, convs }) => source.pipe(          \n          // Filters out the existing conversation to minimize reads\n          endBefore( cursor ),          \n          // Listens to new conversations\n          onSnapshot(zone),           \n          // Filters out unwanted emissions.\n          // Note: we exclude snapshots with pending writes to make sure timestamps are up to date\n          filter( snap => snap.size > 0 && !snap.metadata.hasPendingWrites ),          \n          // Gets the new documents when available\n          docs(), take(1),          \n          // Prepends the new comers to the existing ones\n          map( latest => ({ cursor: latest[0], convs: latest.concat(convs) }) )\n        )),\n        \n        // Gets rid of the cursor\n        pluck('convs')\n      ),\n      \n      // Replays to all subscribers\n      shareReplay(1)\n    )));\n\n    // Resolves the current conversation id from the query parameter\n    this.conversationId$ = route.queryParamMap.pipe(\n\n      // Extracts the @username from the route\n      map( params => params.get('with') || '' ), distinctUntilChanged(), delay(0),\n\n      // Resolves the user, if any\n      switchMap( userName => {\n\n        // Catches an unknown user first. This may be a result of:\n        // 1. a deleted conversation (where the user has been removed from the recipients)\n        // 2. a conversation with a user that no longer exists\n        if(userName.startsWith('unknown-')) { \n\n          // Resets the recipient\n          this.recipient = '';\n\n          // Returns the original conversation id\n          return of(userName.replace(/^unknown-/, '')); \n        }\n\n        // Go on with a known user\n        return user.fromUserName(userName).pipe( take(1), map( user => {\n\n          // Skips unexisting users\n          if(!user) { return this.recipient = ''; } \n\n          // Tracks the new recipient id\n          this.recipient = user.id;\n\n          // Computes the path for the requested conversation otherwise\n          return (this.me < user.id ? this.me.concat(user.id) : this.recipient.concat(this.me) );\n        }));\n      }),\n      // Filters unchanged values and replays to all subscribers\n      shareReplay(1)\n    );\n\n    // Resolves the active conversation\n    this.activeConversation$ = combineLatest(this.conversations$, this.conversationId$).pipe( \n      map( ([convs, id]) => convs?.find( conv => conv.id === id ) || {} as any) \n    );\n\n    // Paging observalbe to load the previous messages while scrolling up\n    const more$ = scroller.pipe( \n\n      // Triggers the previous page when approaching the top\n      map( scroll => scroll.top < 50 ),\n      \n      // Filters for truthfull changes\n      distinctUntilChanged(), filter( value => value ),\n      \n      // Asks for the next 20 messages\n      map( () => 20 ),\n      \n      // Shows the loading spinner every page\n      tap( () => this.loading = true )\n    );\n\n    // Streams up to page size messages from the selected conversation\n    this.messages$ = this.conversationId$.pipe( \n\n      // Stores the curernt conversation\n      map( id => this.conversation = id && this.document(id) ),\n      \n      // Gets the message thread\n      map( conv => this.thread = conv && conv.collection<MessageData>('messages') ),\n      \n      // Loads messages from the thread ordered by creation time\n      switchMap( thread => thread ? thread.pipe( orderBy('created'), \n        \n        // Combines existing messages with new ones\n        source => source.pipe( \n          \n          // Let's start by paging some existing messages\n          pageReverse(more$), \n          \n          // Perpare to append new coming messages\n          expand( paged => source.pipe(            \n            // Excludes existing messages\n            startAfter( paged[paged.length - 1] ), \n            // Listens for updates\n            onSnapshot(this.db.zone), \n            // Filters out unwanted emissions\n            filter( snap => snap.size > 0 && !snap.metadata.hasPendingWrites ),\n            // Gets the new messages and completes\n            docs(), take(1),\n            // Appends the new messages to the list\n            map( latest => paged.concat(latest) )\n          )),\n          // Always starts with an empty array to clear up messages when loading a new conversation\n          startWith([])\n        )\n        // Reverts to an empty array when no conversation is selected\n      ) : of([]) ),\n\n      // When done loading....\n      zoneStable( zone, () => {        \n        // Scrolls for the last message to be visible  \n        this.autoScroll && this.scrollToBottom();  \n        // Hides the loading spinner\n        this.loading = false; \n      }),\n      \n      // Replays to all subscribers\n      shareReplay(1)\n    );\n\n    /** Builds an observable telling if the view has been scrolled */\n    this.scrolled$ = scroller.pipe( \n\n      // Measure the scrolling distance from the bottom \n      map( scroll => scroll.bottom >= 50 ),\n      \n      // Distincts the value on changes only\n      distinctUntilChanged(),\n      \n      // Enables/disables the autoScroll accordingly\n      tap( scrolled => this.autoScroll = !scrolled ),\n      \n      // Run within angular zone\n      runInZone(this.zone)\n    );\n  }\n\n  ngAfterViewInit() {\n\n    // Syncronizes the status saved withing the selected conversation keeping track of the \n    // last read message timestamp for unread counting purposes\n    this.sub = this.conversationId$.pipe(\n\n      // Gets the latest status value from the actiev conversation\n      switchMap( id => this.fromId(id).pipe( take(1) ) ), map( data => data?.status?.[this.me] ),\n\n      // Loads the status from the active conversation\n      tap( status => {\n\n        // Debug\n        console.log('Loading', status);\n        // Gets the emoji usage stats from the conversation\n        this.stats = status?.favorites || this.stats;\n        // Updates the favorites emoji based on the new stat\n        this.keys = this.sortFavorites(this.stats);\n      }),\n\n      // Expands on the last message\n      expand( status => this.lastMessage().pipe(\n\n        // Stops saving new data when switching to another conversation\n        takeUntil(this.conversationId$.pipe(skip(1))),\n\n        // Extracts the last message timestamp\n        map( msg => msg?.created ),\n\n        // Ensures saving only updated data\n        filter( created => !!created && (!(status?.lastRead) || ( created > status.lastRead ))), \n\n        // Saves the new data\n        switchMap( lastRead => {\n          // Prepares a new status object saving the lastRead timestamp and the conversation favorites\n          const newStatus = { favorites: this.stats, lastRead };\n          // Debug\n          console.log('Saving data', newStatus);\n          // Saves the new data returning the new value for the next recursion\n          return this.conversation.merge({ status: { [this.me]: newStatus }} )\n            .then( () => newStatus );\n        }),\n\n        // Completes the emission\n        take(1)\n      ))\n\n    ).subscribe();\n  }\n\n  // Disposes of the subscriptions\n  ngOnDestroy() { this.sub.unsubscribe(); }\n  private sub: Subscription;\n\n  /** Returns the requested conversation observable provided the id falls among the active ones */\n  private fromId(id: string): Observable<ConversationData> {\n\n    // Waits until the view has been rendered\n    return this.zone.onStable.pipe( take(1),\n      // Catch the QueryList changes\n      switchMap( () => this.conversationsList.changes.pipe( startWith(null) ) ),\n      // Seeks for the requested conversation\n      map( () => this.conversationsList.find( conv => conv.id === id ) ), \n      // Filters out unwanted emissions\n      filter( conv => !!conv ), distinctUntilChanged( undefined, conv => conv.id ),\n      // Returns the child conversation's data observable\n      switchMap( conv => conv.data$ )\n    );\n  }\n\n  /** Returns the last message currently listed from the active conversation */\n  private lastMessage(): Observable<MessageData> {\n\n    // Waits until the view has been rendered\n    return this.zone.onStable.pipe( take(1), \n      // Catch the QueryList changes\n      switchMap( () => this.messagesList.changes.pipe( startWith(null) ) ),\n      // Seeks for the requested message data\n      map( () => this.messagesList.last?.data ), \n      // Filters out duplicates\n      distinctUntilChanged(),\n    );\n  }\n\n  /** Tracks the deletion of conversations */\n  public onDeleting(flag: boolean, id: string) {\n    \n    // Tracks how many conversations are in the proess of deleting\n    this.deletingCount = this.deletingCount + (flag ? 1 : -1);\n    // Once done...\n    if(this.deletingCount <= 0) {\n      // Resets the text\n      this.text = \"\";\n      // Reloads the page \n      this.reload();\n    }\n  }\n\n  /** Reloads the chat content */\n  public reload() {\n\n    // Starts by navigating to this very same route without any queryParameter. \n    // This will update reset the conversationId and the message thread\n    return this.router.navigate(['.'], { relativeTo: this.route, replaceUrl:  true })\n      // Reloads all the conversations from scratch next\n      .then( () => this.reload$.next() );\n  }\n\n  /** Scrolls te view to the bottom to make the latest message visible */\n  public scrollToBottom() {\n    this.scroller.scrollTo({ bottom: 0 });\n  }\n\n  /** Forces the view to scroll whenever the keyboard expanded */\n  public onKeyboardExpand() {\n    // Scrolls to bottom wheneve the autoScroll mode is enabled\n    this.autoScroll && this.scrollToBottom();\n  }\n\n  /** Send the current message */\n  public send(body: string) {    \n    // Updates the key usage statistics\n    this.updateFavorites(body);\n    // Sends the message adding it to the current conversation thread\n    this.thread.add({ body, sender: this.me, recipient: this.recipient }).then( () => {\n      // Enables automatic scrolling\n      this.autoScroll = true;\n      // Resets the last message text\n      this.text = \"\"; \n    });\n    // Prevents default\n    return false;\n  }\n\n  /** Sorts the favorite keys based on usage */\n  private sortFavorites(stats: ConversationFavorites): string[] {\n    return Object.keys(stats).sort( (a,b) => stats[b] - stats[a] );\n  }\n\n  /** Updates the favorite statistics upon the given message */\n  public updateFavorites(body: string) {\n\n    let match; let emojis = [];\n    while(match = this.regex.exec(body)) {\n\n      const key = match[0];\n\n      if(emojis.findIndex( emoji => emoji === key ) < 0) {\n\n        emojis.push(match[0]);\n\n        this.stats[key] = (this.stats[key] || 0) + 1;\n      }\n    }\n\n    if(emojis.length > 0) {\n      this.keys = this.sortFavorites(this.stats);\n    }\n  }\n\n\n  /** ngFor tracking function */\n  public trackById(data: QueryDocumentSnapshot<any>) { \n    return data.id; \n  }\n\n  /** Sort conversations based on their updated timestamp */\n  private sortByUpdated(data: QueryDocumentSnapshot<any>[], dir?: 'asc'|'desc'): QueryDocumentSnapshot<any>[] {\n\n    const _dir = dir === 'desc' ? -1 : 1;\n\n    return data.sort((a,b) => {\n\n      const aDate = a?.data().updated;\n      if(!aDate) { return _dir; }\n\n      const bDate = b?.data().updated;\n      if(!bDate) { return -_dir; }\n      \n      return bDate < aDate ? _dir : (bDate > aDate ? -_dir : 0);\n    });\n  }\n}\n","\n<!-- Loads the localized content -->\n<ng-container *wmContent=\"let msgs select 'chat'\" gtag=\"chat\">\n\n  <!-- Actionbar -->\n  <ng-template wmActionbar let-mobile=\"isMobile\">\n\n    <!-- New chat button -->\n    <button mat-stroked-button type.lt-sm=\"icon\" color=\"primary\" [routerLink]=\"msgs.conversation?.new?.link || '/explore/people'\">\n\n      <!-- Use an icon button on small screens -->\n      <wm-icon *ngIf=\"mobile; else newMessage\" [icon]=\"msgs.conversation?.new?.icon || 'add_comment'\"></wm-icon>\n\n      <!-- Use a stroked button on large screens -->\n      <ng-template #newMessage>{{ msgs.conversation?.new?.caption || 'New chat' }}</ng-template>\n\n    </button>\n\n    <!-- Notification's button -->\n    <!--button mat-icon-button *ngIf=\"unreadCount$ | async as unreadCount\" color=\"primary\">\n      <wm-icon icon=\"far:fa-bell\" [matBadge]=\"unreadCount\" matBadgeSize=\"small\"></wm-icon>\n    </button-->\n\n    <!-- Teleports to the side panel. Forced open on large screens -->\n    <ng-template wmSidenav [opened]=\"((conversations$ | async)?.length > 0) && (browse || !mobile)\" (openedChange)=\"browse = $event\" persist minWidth=\"280px\" maxWidth=\"350px\">\n\n      <!-- Resolves the active conversation -->\n      <ng-container *ngIf=\"activeConversation$ | async as activeConversation\">\n\n        <!-- Displays the active conversation on the toolbar on small screens -->\n        <ng-container *ngIf=\"mobile\">\n\n          <wm-conversation *wmToolbar [content]=\"activeConversation\" (deleting)=\"onDeleting($event, conv.id)\" (click)=\"browse = !browse\"></wm-conversation>\n\n        </ng-container>\n\n        <!-- List all the active conversations within the side panel -->\n        <wm-conversation *ngFor=\"let conv of conversations$ | async; trackBy: trackById\"\n                         color=\"primary\"\n                         [content]=\"conv\" \n                         [highlight]=\"conv.id === activeConversation.id\"\n                         [showUnread]=\"conv.id !== activeConversation.id\"\n                         (deleting)=\"onDeleting($event, conv.id)\"\n                         (click)=\"mobile && (browse = !browse)\">\n        </wm-conversation>\n\n      </ng-container>\n        \n    </ng-template><!-- Sidenav -->\n\n  </ng-template><!-- Actionbar -->\n\n  <!-- Message thread -->\n  <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutAlign=\"end stretch\"> \n\n    <!-- Loading spinner -->\n    <div fxLayout=\"row\" fxLayoutAlign=\"center\" *ngIf=\"loading\">\n      <mat-spinner mode=\"indeterminate\" diameter=\"40\"></mat-spinner>\n    </div>\n\n    <ng-container *ngIf=\"messages$ | async as messages\"> \n\n      <!-- List all messages -->\n      <ng-container *ngFor=\"let msg of messages; let i = index; trackBy: trackById\">\n\n        <!-- Group messages by date (different day) -->\n        <ng-container *ngIf=\"i === 0 || (messages[i-1] | createdTime | moment:'D') !== (msg | createdTime | moment:'D')\">\n\n          <!-- Displays a balloon with the date -->\n          <wm-balloon fxFlexAlign=\"center\" class=\"group-label mat-elevation-z2\">{{ \n              \n            msg | createdTime | calendar:msgs.thread?.timeFormat || {\n              sameDay: \"[Today]\",\n              lastDay: \"[Yesterday]\",\n              lastWeek: \"dddd\",\n              sameElse: \"L\"\n            }\n\n          }}</wm-balloon>\n\n        </ng-container>\n\n        <!-- Displays the next message -->\n        <wm-message [thread]=\"(messages[i-1] | snapshotData)?.sender\" [message]=\"msg\"></wm-message>\n\n      </ng-container>\n\n    </ng-container>\n\n  </div>\n\n  <!-- FAB button for scrolling back -->\n  <ng-template wmFab=\"right bottom\">\n\n    <!-- Back to bottom button appearing when scrolled back enough -->\n    <button mat-mini-fab color=\"primary\" (click)=\"scrollToBottom()\" *ngIf=\"scrolled$ | async\" @pop>\n      <mat-icon>expand_more</mat-icon>\n    </button>\n\n  </ng-template>\n\n  <!-- Message composer on the navigator's sticky footer -->\n  <wm-composer *wmFooter [(value)]=\"text\" \n                         [keys]=\"keys\" \n                         [disabled]=\"!recipient || loading || deleting\"\n                         (expanded)=\"onKeyboardExpand()\" \n                         (send)=\"send($event)\">\n  </wm-composer> \n\n  <!-- Can Leave dialog -->\n  <wm-dialog *ngIf=\"msgs.canLeave as leave\" [dontLeave]=\"!!text\">\n\n    <h2 mat-dialog-title><b>{{ leave.title || 'Unsent message' }}</b></h2>\n  \n    <mat-dialog-content [wm-readme]=\"leave.message\">\n      You're about to leave the page without sending the last message.\n    </mat-dialog-content>\n  \n    <mat-dialog-actions align=\"end\">\n      <button mat-button color=\"warn\" [mat-dialog-close]=\"false\" cdkFocusInitial>{{ leave.cancel || 'Wait' }}</button>\n      <button mat-button color=\"primary\" [mat-dialog-close]=\"true\">{{ leave.ok || 'Proceed' }}</button>\n    </mat-dialog-actions>\n\n  </wm-dialog>\n\n</ng-container>\n\n","export * from './balloon.component';\nexport * from './balloon.module';","import { NgModule } from '@angular/core';\nimport { BalloonComponent } from './balloon.component';\n\n@NgModule({\n  imports: [ ],\n  declarations: [ BalloonComponent ],\n  exports: [ BalloonComponent ]\n})\nexport class BalloonModule { }","import { Component, Input, Output, EventEmitter, Inject, ViewChild } from '@angular/core';\nimport { MatExpansionPanel } from '@angular/material/expansion';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { HasTouchScreen } from 'app/utils/platform';\nimport { TypeinAdapter } from 'app/utils/textarea';\nimport { EmojiUtils } from '@wizdm/emoji/utils';\n\n@Component({\n  selector: 'wm-composer',\n  templateUrl: './composer.component.html',\n  styleUrls: ['./composer.component.scss'],\n  host: { \"class\": \"wm-composer\" }\n})\nexport class MessageComposer {\n\n  @ViewChild(MatExpansionPanel) private emojiKeysPanel: MatExpansionPanel;\n  @ViewChild(TypeinAdapter) private typeinAdapter: TypeinAdapter;\n\n  private _value: string;\n  \n  /** Input value */\n  @Input() \n  set value(value: string) { this.valueChange.emit(this._value = value); }\n  get value(): string { return this._value; }\n\n  /** Favorites keys */\n  @Input() keys: string[];\n\n  /** Disables the composer */\n  @Input() set disabled(value: boolean) { \n    \n    if( this._disabled = coerceBooleanProperty(value) ) { \n      // Force the panel closing when disabled\n      this.emojiKeysPanel?.close();\n    }\n  }\n  get disabled(): boolean { return this._disabled; }\n  private _disabled: boolean = false;\n\n  /** Value changes event */\n  @Output() valueChange = new EventEmitter<string>();\n\n  /** Keyboard expanded event */\n  @Output() expanded = new EventEmitter<void>();\n\n  /** Send message event */\n  @Output() send = new EventEmitter<string>();\n\n  constructor(private utils: EmojiUtils, @Inject(HasTouchScreen) readonly touch: boolean) { }\n\n  /** Types in the input the specified key */\n  public typein(key: string) {\n    // Uses the TypeInAdapter to insert the key at the current cursr position preventing default to avoid losing focus\n    return this.typeinAdapter?.typein(key), false;\n  }\n\n  /** Toggles emoji keyboard on/off */\n  public toggleEmojiKeys() {\n    // Prevents default to avoid loosing focus (mousedown)\n    return this.emojiKeysPanel.toggle(), false;\n  }\n\n  /** Returns the globally used emoji mode */\n  public get mode(): 'native'|'web' {\n    // Use the very same emoji mode from EmojiSupportModule\n    return this.utils.emojiMode(); \n  }\n\n  /** Selectes how inputs respond to 'Enter' key. */\n  public get enterMode() {\n    // Always insert a newline when running on touch enabled devices.\n    // Require the 'Shift' key otherwise.\n    return this.touch ? 'always' : 'shift';\n  }\n\n  /** Sends the message on 'Enter' */\n  public sendOnEnter(ev: KeyboardEvent) {\n    // Sends on 'Enter' only on non-touch enabled devices\n    return (this.touch || ev.shiftKey || ev.key !== 'Enter') || this.sendNow();\n  }\n\n  public get valid(): boolean {\n    return (this.value || '').match(/^\\s*$/) === null;\n  }\n\n  /** Sends the message emitting the relevant event */\n  public sendNow() {\n\n    this.valid && this.send.emit( this.value );\n    return false;\n  }\n}\n","\n<!-- Loads the localized content -->\n<ng-container *wmContent=\"let msgs select 'chat.composer'\">\n\n  <div class=\"input\" fxLayout=\"row\" fxLayoutAlign=\"center end\" (keydown)=\"sendOnEnter($event)\">\n\n    <!-- Native Input for platforms supporting Emoji natively -->\n    <mat-form-field appearance=\"legacy\" fxFlex=\"1 1 auto\" *ngIf=\"mode === 'native'; else webMode\">\n      <mat-label>{{ msgs.placeholder || 'Type a message' }}</mat-label>\n      <textarea matInput typein [(value)]=\"value\" [newline]=\"enterMode\" [disabled]=\"disabled\" cdkTextareaAutosize cdkAutosizeMinRows=\"1\">\n      </textarea>\n      <wm-icon class=\"tools\" inline matSuffix \n               [class.color-disabled]=\"disabled\"\n               [icon]=\"msgs.emoji?.icon || 'insert_emoticon'\"                \n               [matTooltip]=\"msgs.emoji?.tooltip || 'Insert an emoji'\" \n               (mousedown)=\"!disabled && toggleEmojiKeys()\">\n        </wm-icon>\n    </mat-form-field>\n\n    <!-- Emoji Input for the Web -->\n    <ng-template #webMode>\n      <mat-form-field appearance=\"legacy\" fxFlex=\"1 1 auto\">\n        <mat-label>{{ msgs.placeholder || 'Type a message' }}</mat-label>\n        <wm-emoji-input matEmoji typein [(value)]=\"value\" [newline]=\"enterMode\" [disabled]=\"disabled\"></wm-emoji-input>\n        <wm-icon class=\"tools\" inline matSuffix \n                 [class.color-disabled]=\"disabled\"\n                 [icon]=\"msgs.emoji?.icon || 'insert_emoticon'\"                \n                 [matTooltip]=\"msgs.emoji?.tooltip || 'Insert an emoji'\" \n                 (mousedown)=\"!disabled && toggleEmojiKeys()\">\n        </wm-icon>\n      </mat-form-field>\n    </ng-template>\n\n    <!-- Send button -->\n    <button mat-icon-button [disabled]=\"disabled || !valid\" (mousedown)=\"sendNow()\">\n      <wm-icon [icon]=\"msgs.send?.icon || 'send'\" [matTooltip]=\"msgs.send?.tooltip || 'Send'\" ></wm-icon>\n    </button>\n\n  </div>\n\n  <!-- On Demand Emoji Keyboard -->\n  <mat-expansion-panel class=\"padding-0 mat-elevation-z0\" (afterExpand)=\"expanded.emit()\" hideToggle>\n  \n    <wm-emoji-keyboard [favorites]=\"keys\" [mode]=\"mode\" (keyPressed)=\"!disabled && typein($event)\"></wm-emoji-keyboard>\n\n  </mat-expansion-panel>\n\n</ng-container>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { EmojiTextModule } from '@wizdm/emoji/text';\nimport { IconModule } from '@wizdm/elements/icon';\nimport { BalloonModule } from '@wizdm/elements/balloon';\nimport { MomentPipesModule } from '@wizdm/pipes/moment';\nimport { PipesModule } from '@wizdm/connect/database/pipes';\nimport { ContentModule } from '@wizdm/content';\nimport { Message } from './message.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatMenuModule,\n    EmojiTextModule,\n    IconModule,\n    BalloonModule,\n    MomentPipesModule,\n    PipesModule,\n    ContentModule\n  ],\n  declarations: [ Message ],\n  exports: [ Message ]\n})\nexport class MessageModule { }\n","import { Directive, TemplateRef, Input, OnInit, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\nimport { TeleportService } from '@wizdm/teleport';\n\nexport interface ToolbarOptions {\n  align?: string;\n  gap?: string;\n}\n\n@Directive({\n  selector: 'ng-template[wmToolbar]'\n})\nexport class ToolbarDirective implements OnInit, OnChanges, OnDestroy {\n\n  constructor(private teleport: TeleportService, private template: TemplateRef<any>) { }\n\n  /** The flex alignement */\n  @Input() wmToolbarAlign: string;\n\n  /** The flex gap */\n  @Input() wmToolbarGap: string;\n\n  // Activates the toolbar portal\n  ngOnInit() { \n    \n    this.teleport.activate('toolbar', this.template, {\n      align: this.wmToolbarAlign,\n      gap: this.wmToolbarGap\n    } as ToolbarOptions);\n  }\n\n  // Refreshes on input change\n  ngOnChanges(changes: SimpleChanges) { this.ngOnInit(); }\n\n  // Releases the portal when done\n  ngOnDestroy() { this.teleport.clear('toolbar', this.template); }\n}\n","export * from './conversation.component';\nexport * from './conversation.module';","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { EmojiTextModule } from '@wizdm/emoji/text';\nimport { ReadmeModule } from '@wizdm/readme';\nimport { AvatarModule } from '@wizdm/elements/avatar';\nimport { DialogModule } from '@wizdm/elements/dialog';\nimport { ContentModule } from '@wizdm/content';\nimport { MomentPipesModule } from '@wizdm/pipes/moment';\nimport { PipesModule } from '@wizdm/connect/database/pipes';\nimport { Conversation } from './conversation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    FlexLayoutModule,\n    MatBadgeModule,\n    MatButtonModule,\n    MatIconModule,\n    MatMenuModule,\n    MatProgressBarModule,\n    EmojiTextModule,\n    ReadmeModule,\n    AvatarModule,\n    DialogModule,\n    ContentModule,\n    MomentPipesModule,\n    PipesModule\n  ],\n  declarations: [ Conversation ],\n  exports: [ Conversation ],\n})\nexport class ConversationModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ContentModule } from '@wizdm/content';\nimport { IconModule } from '@wizdm/elements/icon';\nimport { EmojiInputModule } from '@wizdm/emoji/input';\nimport { EmojiMaterialModule } from '@wizdm/emoji/material';\nimport { EmojiKeyboardModule } from '@wizdm/emoji-keyboard';\nimport { TextareaModule } from 'app/utils/textarea';\nimport { MessageComposer } from './composer.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule, \n    MatButtonModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatExpansionModule,\n    MatTooltipModule,\n    EmojiInputModule,\n    EmojiMaterialModule,\n    EmojiKeyboardModule,\n    ContentModule,\n    IconModule,\n    TextareaModule\n  ],\n  declarations: [ MessageComposer ],\n  exports: [ MessageComposer ]\n})\nexport class ComposerModule { }\n","export * from './message.component';\nexport * from './message.module';","import { Component, Input, HostBinding, ViewEncapsulation } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core'\n\n@Component({\n  selector: 'wm-balloon',\n  templateUrl: './balloon.component.html',\n  styleUrls: ['./balloon.component.scss'],\n  host: { 'class': 'wm-balloon' },\n  encapsulation: ViewEncapsulation.None\n})\nexport class BalloonComponent  {\n\n  @HostBinding('attr.side')\n  @Input() side: 'left'|'top'|'right'|'bottom';\n\n  @HostBinding('attr.anchor')\n  @Input() anchor: 'start'|'center'|'end';\n\n  @HostBinding('attr.color')\n  @Input() color: ThemePalette;\n}","\n<div class=\"balloon-content\">\n\n  <ng-content></ng-content>\n  \n</div>","import { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { query, get } from '@wizdm/connect/database/collection/operators';\nimport { DatabaseCollection } from '@wizdm/connect/database/collection';\nimport { DatabaseService } from '@wizdm/connect/database';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport { UserProfile } from 'app/utils/user';\nimport { ConversationData } from './chat-types';\nimport { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\n\n/** Redirects to the latest conversation, if any */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService extends DatabaseCollection<ConversationData> implements CanActivate {\n\n  private get me(): string { return this.user.uid; }\n\n  constructor(db: DatabaseService, private user: UserProfile, private router: Router) { \n    super(db, 'conversations');\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n\n    // Gets the requested recipient to chat to, if any\n    const userName = route.queryParamMap.get('with');\n\n    // Prevents starting up a conversation on wrong conditions\n    if(!this.user.auth.authenticated || userName == this.user.data?.userName) { \n      return false; \n    }\n\n    // Initiate a conversation with the requested user\n    if(userName) {\n\n      // Skip unknown users. This may be a result of:\n      // 1. a deleted conversation (where the user has been removed from the recipients)\n      // 2. a conversation with a user that no longer exists\n      if(userName.startsWith('unknown-')) { return of(true); }\n\n      // Resolves the user from the @username next\n      return this.user.fromUserName(userName).pipe( take(1), switchMap( user => {\n\n        // Prevents initiating a chat with non existing users or myself\n        if(!user || user.id === this.me) { return of(false); }\n\n        // Computes the path for the requested conversation\n        const ref = this.ref.doc( this.me < user.id ? this.me.concat(user.id) : user.id.concat(this.me) );\n        \n        // Uses an array union to fill in the recipients array atomically\n        const recipients: any = this.db.arrayUnion(this.user.uid, user.id);\n\n        // Runs a transaction to verify the converstion exists\n        return this.db.transaction(trx => {            \n\n          // Read the conversation first\n          return trx.snap(ref).then( ({ exists }) => {\n\n            // Ensures the recipients contains both sender and receiver.\n            // This is needed since the exisiting conversarion may contain only one party (or none if we are in the middle of a deletion).\n            // Using an array union with a merge ensure the array preserves the original values while the missing ones will be appended.\n            if(exists) { trx.merge(ref, { recipients }); }\n\n            // ... or creates the conversatin from scratch\n            else { trx.set(ref, { recipients }); }\n\n            // Returns true for the routing to proceed\n            return true;\n          });\n        });\n      }));\n    }\n\n    // Resolves the last user we talked to otherwise...\n    return this.pipe( \n\n      // Gets the last conversation we updated\n      query( qf => qf.where('recipients', 'array-contains', this.me).orderBy('updated', 'desc').limit(1) ), get(),\n      \n      // Switches to the sender\n      switchMap( snap => {\n\n        // Simply go throught when no conversation found\n        if(snap.empty) { return of(true); }\n        \n        // Gets the document data\n        const data = snap.docs[0].data();\n        \n        // Seeks for the sender id among recipients\n        const sender = data.recipients.find( recipient => recipient != this.me );\n        \n        // Resolves the user from the sender id. At this point the sender might be null as a result of a conversatrion\n        // partially deleted by the other party.\n        return this.user.fromUserId(sender).pipe( take(1), map( user => {\n\n          // Gets the @username falling back to the unknown user when missing\n          const userName = user?.userName || `unknown-${snap.docs[0].id}`;\n                    \n          // Redirects to the very same route including the user name this time\n          return this.router.createUrlTree(state.url.split('/'), {\n            queryParams: {\n              with: userName\n            }\n          });\n        }));\n      })      \n    );\n  }\n}\n","import { Component, Input, Output, EventEmitter, ViewChild, HostListener } from '@angular/core';\nimport { map, takeWhile, startWith, distinctUntilChanged } from 'rxjs/operators';\nimport { QueryDocumentSnapshot } from '@wizdm/connect/database/collection';\nimport { DatabaseDocument } from '@wizdm/connect/database/document';\nimport { UserProfile, UserData } from 'app/utils/user';\nimport { DatabaseService } from '@wizdm/connect/database';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { MessageData } from '../chat-types';\nimport { Observable } from 'rxjs';\n\n/** Chat message component */\n@Component({\n  selector: 'wm-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss'],\n  host: { \n    \"class\": \"wm-message\",\n    \"[class.in]\": \"data?.sender !== me\",\n    \"[class.out]\": \"data?.sender === me\"\n  }\n})\nexport class Message extends DatabaseDocument<MessageData> {\n\n  /** Sender observavble */\n  public sender$: Observable<UserData>; \n  /** Deleted observable. Emits true (and completes) whenever the message gets deleted */\n  public deleted$: Observable<boolean>;\n  /** Message data/body from the query snapshot */\n  public data: MessageData;\n  \n  /** The conversation id */\n  get id(): string { return this.data.id; }\n  /** The current user's id */\n  get me(): string { return this.user.uid; }\n\n  constructor(db: DatabaseService, private user: UserProfile) {\n    super(db);\n  }\n\n  /** The previous message sender */\n  @Input() thread: string;\n\n  /** Message snaphot */\n  @Input() set message(message: QueryDocumentSnapshot<MessageData>) {\n\n    // Unwraps the snapshot\n    this.data = this.unwrap(message);\n\n    // Resolve the sender data\n    this.sender$ = this.user.fromUserId(this.data.sender);\n\n    // Creates an observable to monitor this document deletion across devices.\n    this.deleted$ = this.asObservable().pipe( \n      // Monitors the exists flag      \n      map( snap => !snap.exists ), startWith( !message.exists ),      \n      // Filters for changes and completes when deleted\n      takeWhile(deleted => !deleted, true),  distinctUntilChanged()\n    );\n\n    // Emits the data payload\n    this.dataChange.emit(this.data);\n  }\n\n  // Gets the menu trigger\n  @ViewChild(MatMenuTrigger) private menuTrigger: MatMenuTrigger;\n  @HostListener('contextmenu') onContextMenu() {\n    // Opens the menu on contextmenu event  \n    this.menuTrigger?.openMenu();\n    // Prevents default\n    return false;\n  }\n\n  /** Emits the unwrapped message data */\n  @Output('data') dataChange = new EventEmitter<MessageData>();\n}","\n<!-- Loads the localized content -->\n<ng-container *wmContent=\"let msgs select 'chat.message'\">\n\n  <!-- Message balloon -->\n  <wm-balloon [color]=\"data?.sender === me ? 'accent' : 'primary'\" \n              [side]=\"data?.sender === me ? 'right' : 'left'\" \n              [anchor]=\"data?.sender !== thread ? 'start' : ''\" \n              class=\"mat-elevation-z2\">\n\n    <div fxLayout=\"column\" fxLayoutAlign=\"start stretch\" fxLayoutGap=\"2px\">\n\n      <!-- Sender full name -->\n      <div *ngIf=\"data?.sender !== thread\"><b>{{ (sender$ | async)?.fullName }}</b></div>\n\n      <!-- Message body -->\n      <div fxLayout=\"row\">\n\n        <!-- Deleted message -->\n        <span class=\"deleted\" *ngIf=\"deleted$ | async; else messageBody\">\n          <wm-icon [icon]=\"msgs.delete?.icon || 'error_outline'\"></wm-icon>\n          <span>{{ msgs.delete?.message || 'This message has been deleted' }}</span>\n        </span>\n\n        <!-- Message body template -->\n        <ng-template #messageBody><span [wm-emoji-text]=\"data?.body\"></span></ng-template>\n\n        <!-- Spaces the end of the text to clear the time -->\n        <span class=\"spacer\"></span>\n\n        <!-- Message time -->\n        <time class=\"time mat-small\">{{ data?.created | timestamp | moment:msgs.timeFormat || 'LT' }}</time>\n\n        <!-- Message action menu (visible to the sender only) -->\n        <ng-container *ngIf=\"data?.sender === me\">\n\n          <!-- Menu button-->\n          <mat-icon class=\"menu\" [matMenuTriggerFor]=\"menu\">expand_more</mat-icon>\n\n          <mat-menu #menu=\"matMenu\">\n\n            <!-- Delete message -->\n            <button mat-menu-item (click)=\"delete()\">{{ msgs.delete?.label || 'Delete message' }}</button>\n\n          </mat-menu>\n      \n        </ng-container>\n\n      </div><!-- Body -->\n    \n    </div>\n\n  </wm-balloon>\n\n</ng-container>\n","export * from './pipes.pipe';\nexport * from './pipes.module';","import { SnapshotDataPipe, TimestampPipe, CreatedTimePipe, UpdatedTimePipe } from './pipes.pipe';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [ SnapshotDataPipe, TimestampPipe, CreatedTimePipe, UpdatedTimePipe ],\n  exports: [ SnapshotDataPipe, TimestampPipe, CreatedTimePipe, UpdatedTimePipe ]\n})\nexport class PipesModule { }\n","import { NgModule } from '@angular/core';\nimport { TeleportModule } from '@wizdm/teleport';\nimport { StickyFooterDirective } from './sticky-footer.directive';\n\n@NgModule({\n  \n  imports: [ \n    //TeleportModule\n  ],\n  declarations: [\n    StickyFooterDirective\n  ],\n  exports: [\n    StickyFooterDirective\n  ]\n})\nexport class StickyFooterModule { }\n"]}