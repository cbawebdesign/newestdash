{"version":3,"sources":["webpack:///wizdm/src/app/pages/settings/account/account.component.ts","webpack:///wizdm/src/app/pages/settings/account/account.component.html","webpack:///wizdm/src/app/pages/settings/account/account.module.ts"],"names":["AccountComponent","auth","getProviderId","then","provider","providerId","user","providerData","map","data","routes","path","content","component","AccountModule","forChild"],"mappings":"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","file":"account-account-module-es5.js","sourcesContent":["import { Component } from '@angular/core';\nimport { AuthService, User } from '@wizdm/connect/auth';\n\n@Component({\n  selector: 'wm-account',\n  templateUrl: './account.component.html',\n  styleUrls: ['./account.component.scss']\n})\nexport class AccountComponent {\n\n  private providerId: string;\n\n  constructor(readonly auth: AuthService) { \n\n    // Gets the authentication provider\n    auth.getProviderId().then( provider => this.providerId = provider );\n  }\n\n  /** The user object */\n  get user(): User { return this.auth.user || {} as User; }\n\n  /** The array of providers */\n  get providers(): string[] { return (this.user.providerData || []).map( data => data.providerId ); }\n\n  /** True whenever the provider we logged-in with requires a password */\n  get usePassword(): boolean { return this.providerId === 'password'; }\n}\n","<!-- Localized content -->\n<ng-container *wmContent=\"let msgs select 'settings-account'\" gtag=\"account\">\n\n  <!-- User's Account -->\n  <h2>{{ msgs.title || 'Account' }}</h2>\n  \n  <mat-divider fxFill></mat-divider>\n  \n  <!-- account creation -->\n  <p [wm-readme]=\"msgs.description | interpolate: { 'created': user.metadata?.creationTime | moment:'ll' }\">\n    <span>Your account has been created on <b>{{ user.metadata?.creationTime | moment: 'll' }}</b>.</span>\n  </p>\n\n  <!-- Account's provider(s) -->\n  <p>{{ msgs.providers || 'Providers' }}: <span *ngFor=\"let provider of providers; let last = last\">\n    <i>\"{{ provider }}\"</i>\n    <ng-container *ngIf=\"!last\"> - </ng-container>\n  </span></p>\n\n  <!-- Email/Password provider related actions -->\n  <ng-container *ngIf=\"usePassword\">\n\n    <!-- Email Verify -->  \n    <h3>{{ msgs.verify?.title || 'Verify Email' }}</h3>\n    \n    <mat-divider fxFill></mat-divider>\n    \n    <p [wm-readme]=\"user.emailVerified ? msgs.verify?.verified : msgs.verify?.unverified\">\n      <span>Your email {{ user.emailVerified ? 'has been verified already' : 'has not been verified yet '}}.</span>\n    </p>\n    \n    <button mat-stroked-button color=\"primary\" fxFlexAlign.gt-xs=\"start\" [disabled]=\"user.emailVerified\" wmRedirect=\"login?mode=sendEmailVerification\">\n      {{ msgs.verify?.action }}\n    </button>\n    \n    <!-- Email / Password change -->\n    <h3>{{ msgs.credentials?.title || 'Change email / password' }}</h3>\n    \n    <mat-divider fxFill></mat-divider>\n    \n    <p [wm-readme]=\"msgs.credentials?.description\">\n      <span>Here you can change the credentials used for signin-in.</span>\n    </p>\n    \n    <div fxLayout=\"row\" fxLayout.lt-sm=\"column\" fxLayoutGap=\"16px\"> \n    \n      <button mat-stroked-button color=\"primary\" wmRedirect=\"login?mode=changeEmail\">\n        {{ msgs.credentials?.actions?.email || 'Change your email' }}\n      </button>\n\n      <button mat-stroked-button color=\"primary\" wmRedirect=\"login?mode=changePassword\">\n        {{ msgs.credentials?.actions?.password || 'Change your password' }}\n      </button>\n\n    </div>\n\n  </ng-container>\n\n  <!-- Delete Account -->\n  <h3>{{ msgs.delete?.title || 'Delete account' }}</h3>\n  \n  <mat-divider fxFill></mat-divider>\n  \n  <p [wm-readme]=\"msgs.delete?.description\">\n    <span>By proceeding you'll <b>permanently</b> delete all your data!</span>\n  </p>\n\n  <button mat-stroked-button color=\"warn\" fxFlexAlign.gt-xs=\"start\" wmRedirect=\"login?mode=delete\">\n    {{ msgs.delete?.action || 'Delete your account' }}\n  </button>\n\n</ng-container>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatButtonModule } from '@angular/material/button';\nimport { GtagModule } from '@wizdm/gtag';\nimport { ReadmeModule } from '@wizdm/readme';\nimport { RedirectModule } from '@wizdm/redirect';\nimport { ContentRouterModule, RoutesWithContent } from '@wizdm/content';\nimport { MomentPipesModule } from '@wizdm/pipes/moment';\n//import { CanLeaveModule, CanLeaveGuard } from 'app/navigator/guards/can-leave';\nimport { AccountComponent } from './account.component';\n\nconst routes: RoutesWithContent = [\n  {\n    path: '',\n    content: 'settings-account',\n    component: AccountComponent,\n    //canDeactivate: [ CanLeaveGuard ]\n  }\n];\n\n@NgModule({\n  declarations: [ AccountComponent ],\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatDividerModule,\n    MatButtonModule,\n    GtagModule,\n    ReadmeModule,\n    RedirectModule,\n    MomentPipesModule,\n    //CanLeaveModule,\n    ContentRouterModule.forChild(routes)\n  ]\n})\nexport class AccountModule { }\n"]}