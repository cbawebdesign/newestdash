{"version":3,"sources":["webpack:///elements/src/lib/dialog/dialog.component.ts","webpack:///elements/src/lib/dialog/dialog.module.ts","webpack:///elements/src/lib/dialog/index.ts","webpack:///wizdm/src/app/utils/can-leave/can-leave.service.ts","webpack:///wizdm/src/app/utils/can-leave/index.ts","webpack:///wizdm/src/app/navigator/actionbar/index.ts","webpack:///wizdm/src/app/utils/can-leave/can-leave.module.ts","webpack:///wizdm/src/app/utils/can-leave/can-leave.directive.ts"],"names":["FAKE_REF_FOR_CLOSE","provide","useExisting","DialogComponent","dialog","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","openedChange","closedChange","value","open","close","data","ref","template","afterOpened","subscribe","emit","beforeClosed","afterClosed","undefined","DialogModule","CanLeaveGuard","observer$","guard","next","component","route","state","url","replace","pipe","canLeave","CanLeaveModule","CanLeaveDirective","dontLeave","dontLeaveChange","allowDeactivation","canLeave$","granted","ev"],"mappings":"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","file":"default~pages-chat-chat-module~profile-fixer-profile-fixer-module~profile-profile-module-es5.js","sourcesContent":["import { MatDialog, MatDialogRef, MatDialogConfig, DialogRole, DialogPosition } from '@angular/material/dialog';\nimport { Component, Input, Output, EventEmitter, ViewChild, TemplateRef, forwardRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\nimport { Direction } from '@angular/cdk/bidi';\n\n/** Dialog ref */\nexport type DialogRef<D=any, R=any> = MatDialogRef<D, R>;\n\n/** Fake MatDialogRef provider to support MatDialogClose directive */\nexport const FAKE_REF_FOR_CLOSE: any = { \n  provide: MatDialogRef, \n  useExisting: forwardRef( () => DialogComponent ) \n};\n\n/** \n * Component implementing a declarative version of the Angular Material Dialog \n */\n@Component({\n  selector: 'wm-dialog',\n  template: '<ng-template><ng-content></ng-content></ng-template>',\n  providers: [ FAKE_REF_FOR_CLOSE ]\n})\nexport class DialogComponent<D=any, R=any> implements MatDialogConfig<D> {\n\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** The dialog reference, when openend */\n  public ref: DialogRef<D,R>;\n  /** Data available for injection into the child component. */\n  public data: D;\n\n  constructor(readonly dialog: MatDialog/*, readonly viewContainerRef: ViewContainerRef*/) {}\n\n  // -- Start of MatDialogConfig implementaiton -- \n  \n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  @Input() id: string;\n\n  /** The ARIA role of the dialog element. */\n  @Input() role: DialogRole = 'dialog';\n  \n  /** Custom class for the overlay pane. */\n  @Input() panelClass: string | string[] = ''\n  \n  /** Whether the dialog has a backdrop. */\n  @Input('hasBackdrop') set _hasBackdrop(value: boolean) { this.hasBackdrop = coerceBooleanProperty(value); }\n  hasBackdrop: boolean = true;\n  \n  /** Custom class for the backdrop. */\n  @Input() backdropClass: string = '';\n  \n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  @Input('disableClose') set _disableClose(value: boolean) { this.disableClose = coerceBooleanProperty(value); }\n  disableClose: boolean = false;\n  \n  /** Width of the dialog. */\n  @Input() width: string = '';\n  \n  /** Height of the dialog. */\n  @Input() height: string = '';\n  \n  /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n  @Input() minWidth: number | string;\n  \n  /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n  @Input() minHeight: number | string;\n  \n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n  @Input() maxWidth: number | string = '80vw';\n  \n  /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n  @Input() maxHeight: number | string;\n  \n  /** Position overrides. */\n  @Input() position: DialogPosition;\n  \n  /** Layout direction for the dialog's content. */\n  @Input() direction: Direction;\n  \n  /** ID of the element that describes the dialog. */\n  @Input() ariaDescribedBy: string | null = null;\n  \n  /** ID of the element that labels the dialog. */\n  @Input() ariaLabelledBy: string | null = null;\n  \n  /** Aria label to assign to the dialog element. */\n  @Input() ariaLabel: string | null = null;\n  \n  /** Whether the dialog should focus the first focusable element on open. */\n  @Input('autoFocus') set _autoFocus(value: boolean) { this.autoFocus = coerceBooleanProperty(value); }\n  autoFocus: boolean = true;\n  \n  /** Whether the dialog should restore focus to the previously-focused element, after it's closed. */\n  @Input('restoreFocus') set _restoreFocus(value: boolean) { this.restoreFocus = coerceBooleanProperty(value); }\n  restoreFocus: boolean = false;\n  \n  /** Scroll strategy to be used for the dialog. */\n  @Input() scrollStrategy: ScrollStrategy;\n  \n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  @Input('closeOnNavigation') set _closeOnNavigation(value: boolean) { this.closeOnNavigation = coerceBooleanProperty(value); }\n  closeOnNavigation: boolean = true;\n\n  // -- End of MatDialogConfig implementaiton -- \n\n  /** Opens the dialog when the passed condition is true */\n  @Input() set opened(open: D) { if(coerceBooleanProperty(open)) { this.open(open); } }  \n  /** Reports the open status */\n  @Output() openedChange = new EventEmitter<boolean>();\n  /** Forces the dialog closing with the given value */\n  @Input() set closed(value: R) { this.close(value); }  \n  /** Reports the value the dialog as been closed with */\n  @Output() closedChange = new EventEmitter<R>(); \n  \n  /** Opens the dialog returning the reference */\n  public open(data?: D): DialogRef<D,R> {\n    // Prevents multiple opening\n    if(!!this.ref) { return this.ref; }\n    // Grabs the optional data\n    this.data = data;\n    // Opens the dialog with the given configuration\n    this.ref = this.dialog.open<any,D,R>(this.template, this);\n    // Emits the dialog has been opened\n    this.ref.afterOpened().subscribe( () => this.openedChange.emit(true) );\n    // Emist the dialog is closing\n    this.ref.beforeClosed().subscribe( () => this.openedChange.emit(false) );\n    \n    this.ref.afterClosed().subscribe( value => {\n      // Emits the dialog closed with value\n      this.closedChange.emit(value);\n      // Makes sure the reference goes backundefined when closed \n      this.ref = undefined;\n    });\n    // Returns the reference for further use\n    return this.ref;\n  }\n\n  /** Closes the dialog passing along the output value */\n  public close(value: R): void {\n    this.ref && this.ref.close(value);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { DialogComponent } from './dialog.component';\n\n@NgModule({\n  imports: [ MatDialogModule ],\n  declarations: [ DialogComponent ],\n  exports: [ MatDialogModule, DialogComponent ]\n})\nexport class DialogModule { }","export * from './dialog.component';\nexport * from './dialog.module';\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { flatMap, take } from 'rxjs/operators';\n\nexport type CanLeaveType = boolean|Promise<boolean>|Observable<boolean>;\n\n@Injectable()\nexport class CanLeaveGuard implements CanDeactivate<any> {\n\n  private observer$ = new BehaviorSubject<CanLeaveType>(true);\n\n  /** Pushes a quanding value into the guard observer to resolve when leaving the page */\n  public allowDeactivation(guard: CanLeaveType) {\n    this.observer$.next(guard);\n  }\n\n  // Implements the CanDeactivate interface to conditionally prevent leaving the page\n  canDeactivate(component, route, state: RouterStateSnapshot, next: RouterStateSnapshot): CanLeaveType {\n\n    // Always allow deactivation whenever the current and next url(s) matches excepts for the language segment at the root\n    if(next && state.url.replace(/^\\/[^/]+/, '') === next.url.replace(/^\\/[^/]+/, '')) {\n      return true;\n    }\n\n    // Returns an observable resolving into a suitable guarding value\n    return this.observer$.pipe( \n      // Flatten the observer to a lower order when needed\n      flatMap( canLeave => typeof(canLeave) === 'boolean' ? of(canLeave) : canLeave ),\n      // Makes sure the observable always resolves\n      take(1)\n    );\n  }\n}","export * from './can-leave.service';\nexport * from './can-leave.directive';\nexport * from './can-leave.module';","export * from './action.component';\nexport * from './actionbar.directive';\nexport * from './actionbar.module';","import { NgModule } from '@angular/core';\nimport { CanLeaveGuard } from './can-leave.service';\nimport { CanLeaveDirective } from './can-leave.directive';\n\n@NgModule({\n  declarations: [ CanLeaveDirective ],\n  providers: [ CanLeaveGuard ],\n  exports: [ CanLeaveDirective ]\n})\nexport class CanLeaveModule { }","import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';\nimport { CanLeaveGuard } from './can-leave.service';\nimport { DialogComponent } from '@wizdm/elements/dialog';\nimport { Observable, of, defer } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Directive({\n  selector: 'wm-dialog[dontLeave]'\n})\nexport class CanLeaveDirective {\n\n  constructor(private canLeave: CanLeaveGuard, private dialog: DialogComponent<boolean>) {\n    // Hooks on the allowDeactivation observer\n    this.canLeave.allowDeactivation( this.canLeave$ );\n  }\n\n  /** When true, pops-up a dialog asking for user's consent to leave*/\n  @Input() dontLeave: boolean = false;\n\n  /** Reflects the dontLeave changes */\n  @Output() dontLeaveChange = new EventEmitter<boolean>();\n\n   // CanLeave Observavble\n  private get canLeave$(): Observable<boolean> {\n    // Builds an observable conditionally at subscription time\n    return defer( () => this.dontLeave ? this.dialog.open().afterClosed() : of(true) )\n      // Makes sure all the following requests will be true once the first has been granted\n      .pipe( tap( granted => (granted === this.dontLeave) && this.dontLeaveChange.emit(this.dontLeave = !granted) ));\n  }\n\n  // Prevents the tab/page to be closed \n  @HostListener('window:beforeunload', ['$event']) beforeUnload(ev: Event) {\n\n    if(this.dontLeave) {\n      return false;\n    }\n  }\n}"]}