{"version":3,"sources":["./wizdm/src/app/pages/explore/feed/post-card/post-card.animation.ts","./wizdm/src/app/pages/explore/feed/post/post.component.ts","./wizdm/src/app/pages/explore/feed/post/post.component.html","./wizdm/src/app/pages/explore/feed/post/post.module.ts","./wizdm/src/app/pages/explore/feed/feed.module.ts","./wizdm/src/app/pages/explore/feed/post-card/post-card.component.ts","./wizdm/src/app/pages/explore/feed/post-card/post-card.component.html","./wizdm/src/app/navigator/actionbar/index.ts","./wizdm/src/app/pages/explore/feed/post-card/post-card.module.ts","./wizdm/src/app/pages/explore/feed/feed.component.ts","./wizdm/src/app/pages/explore/feed/feed.component.html"],"names":[],"mappings":"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","file":"feed-feed-module-es2015.js","sourcesContent":["import { trigger, state, animate, style, transition, keyframes, query, stagger, animateChild } from '@angular/animations';\n\nconst $timing = '450ms cubic-bezier(.8, -0.6, 0.2, 1.5)';\n\nexport let $animations = [\n\n  trigger('beat', [\n    transition('* => *', \n      animate($timing, \n        keyframes([\n          style({ transform: 'scale(0.8)' }),\n          style({ transform: 'scale(1.5)' }),\n          style({ transform: 'scale(1)' })\n        ])\n      )\n    )\n  ])\n];","import { DatabaseCollection, QueryDocumentSnapshot } from '@wizdm/connect/database/collection';\nimport { DatabaseDocument, DocumentData } from '@wizdm/connect/database/document';\nimport { map, tap, switchMap, distinctUntilChanged } from 'rxjs/operators';\nimport { DistributedCounter } from '@wizdm/connect/database/counter';\nimport { Component, Input, HostBinding } from '@angular/core';\nimport { Observable, BehaviorSubject, merge } from 'rxjs';\nimport { DatabaseService } from '@wizdm/connect/database';\nimport { AuthService } from '@wizdm/connect/auth';\nimport { UserProfile, UserData } from 'app/utils/user';\n\nexport interface PostData extends DocumentData {\n  channel?: string;\n  title?  : string;\n  text?   : string; \n  photo?  : string;\n  author? : string; \n  tags?   : string[]; \n};\n\n@Component({\n  selector: 'wm-post',\n  templateUrl: './post.component.html',\n  styleUrls: ['./post.component.scss'],\n})\nexport class PostComponent extends DatabaseDocument<PostData> {\n\n  private _favorite$ = new BehaviorSubject<boolean>(false);  \n  private likers: DatabaseCollection<any>;\n  \n  public favorite$: Observable<boolean>;\n  public likes: DistributedCounter;\n  public data: PostData;\n  \n  /** Returns the current authenticated userId or 'unknown' */\n  get me(): string { return this.auth.userId || 'unknown'; }\n  /** Returns true thenever the place is favorite */\n  get favorite(): boolean {  return this._favorite$.value; }\n\n\n  /** Returns true whenever the current user is authenticated */\n  get authenticated(): boolean { return this.authenticated; }\n\n  constructor(db: DatabaseService, private auth: AuthService, private user: UserProfile<UserData>) { \n    super(db)\n  }\n\n  @Input() set post(snapshot: QueryDocumentSnapshot<PostData>) { \n\n    // Unwraps the document data and reference\n    this.data = this.unwrap(snapshot);\n    \n    // Gets the likes distributed counter\n    this.likes = this.counter('likes');\n    \n     // Gets the collection of likers\n    this.likers = this.collection('likers');\n    \n    // Builds the favorite flag\n    this.favorite$ = this.initFavorite();   \n }\n\n  /** Builds the favorite flag Observable */\n  private initFavorite(): Observable<boolean> {\n    \n    return merge(\n      // Here the local copy \n      this._favorite$,\n      // Resolves the user\n      this.auth.user$.pipe( \n        // Gets the current user id\n        map(user => !!user ? user.uid : 'unknown'),\n        // Seeks for the user id within the collection of likers\n        switchMap( me => this.isLikedBy(me) ),\n        // Syncs the local copy\n        tap( favorite => this._favorite$.next(favorite) ),\n      )\n      // Distinct changes to avoid unwanted flickering\n    ).pipe( distinctUntilChanged() );\n  }\n\n  /** Checks if the specified userId is among the likers */\n  private isLikedBy(userId: string): Observable<boolean> {\n\n    // Searches among the collection of likers\n    return this.likers\n      // Matches for the document named upon the userId\n      .stream( ref => ref.where(this.db.sentinelId, \"==\", userId ) )\n      // Returns true if such document exists\n      .pipe( map( docs => docs.length > 0 ),\n       );\n  }\n  \n  /** Toggles the favorite status */\n  public toggleFavorite(event) {\n\n    // Negates the curret favorite value\n    const favorite = !this.favorite;\n\n    // Updates the local favorite flag copy for improved reactivity\n    this._favorite$.next(favorite);\n\n    // Adds the user to the collection of likers....\n    if(favorite) { this.likers.document(this.me).set({}); }\n    // ...or removes it according to the request\n    else { this.likers.document(this.me).delete(); }\n\n    // Updates the likes counter accordingly\n    this.likes.update( favorite ? 1 : -1 );\n  }\n\n  public get userImage(): string {\n    return this.user.data.photo || '';\n  }\n\n  public get userFirstName(): string {\n    let displayName = this.user?.data?.userName?.split('-').slice().pop();\n    return displayName || '';\n  }\n}","<wm-post-card [userFirstName]=\"userFirstName\" [userImage]=\"userImage\" [data]=\"data\"\n  (toggleLikes)=\"toggleFavorite($event)\" [favorite]=\"favorite$\" [likes]=\"likes.counter$\"></wm-post-card>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout'\nimport { PostComponent } from './post.component';\nimport { PostCardModule } from '../post-card/post-card.module';\n\n@NgModule({\n  imports: [ \n    CommonModule,\n    FlexLayoutModule,\n    PostCardModule\n  ],\n  declarations: [ PostComponent ],\n  exports: [ PostComponent ]\n})\nexport class PostModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout'\nimport { MatButtonModule } from '@angular/material/button';\nimport { IconModule } from '@wizdm/elements/icon';\nimport { ButtonChangerModule } from '@wizdm/elements/button';\nimport { GtagModule } from '@wizdm/gtag';\nimport { ActionbarModule } from 'app/navigator/actionbar';\nimport { ContentRouterModule, RoutesWithContent, ContentModule } from '@wizdm/content';\nimport { PostModule } from './post/post.module';\nimport { FeedComponent } from './feed.component';\nimport { FabModule } from 'app/navigator/fab/fab.module';\nimport { DialogLoader } from 'app/dialogs';\n\n\nconst routes: RoutesWithContent = [\n  {\n    path: '',\n    component: FeedComponent,\n    content: 'explore-feed',\n    children: [\n      { path: 'postdlg', loadChildren: () => import('../../../dialogs/post/post-dlg.module').then(m => m.PostModule), canActivate: [DialogLoader] },\n\n    ]\n  }\n];\n\n@NgModule({\n  declarations: [ FeedComponent],\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatButtonModule,\n    IconModule,\n    ButtonChangerModule,\n    GtagModule,\n    ActionbarModule,\n    PostModule,\n    FabModule,\n\n    ContentRouterModule.forChild(routes)\n  ],\n  providers: []\n})\nexport class FeedModule { }\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { PostData } from '../post/post.component';\nimport { $animations } from './post-card.animation';\n\n@Component({\n  selector: 'wm-post-card',\n  templateUrl: './post-card.component.html',\n  styleUrls: ['./post-card.component.scss'],\n  animations: $animations\n})\nexport class PostCardComponent implements OnInit {\n\n  @Output() toggleLikes = new EventEmitter<boolean>(false);\n  @Input() likes: Observable<number>;\n  @Input() favorite: Observable<boolean>;\n\n  @Input() data: PostData = {};\n\n  @Input() userFirstName: string;\n  @Input() userImage: string;\n\n  constructor() { }\n\n\n  ngOnInit(): void {\n  }\n\n}\n","<!-- Cover -->\n<div class=\"cover\" fxFlex=\"0 0 auto\">\n \n  <img [src]=\"data?.photo\" style=\"object-fit: cover;\"/>\n\n</div>\n\n<!-- Body -->\n<div class=\"body\" fxFlex=\"1 1 auto\" fxLayout=\"column\">\n\n  <div class=\"tools\" fxLayout=\"row\" fxLayoutAlign=\"end center\" fxLayoutGap=\"4px\">\n\n    <button mat-icon-button color=\"primary\" class=\"mat-elevation-z4\">\n      <wm-icon icon=\"more_vert\"></wm-icon>\n    </button>\n\n    <button mat-icon-button color=\"primary\" class=\"mat-elevation-z4\">\n      <wm-icon icon=\"bookmark_border\"></wm-icon>\n    </button>\n\n    <!-- Likes -->\n    <button mat-icon-button color=\"primary\" class=\"mat-elevation-z4\" (authClick)=\"toggleLikes.emit()\"\n            [matBadge]=\"likes | async\" [matBadgeHidden]=\"(likes | async) === 0\">\n\n      <wm-icon [icon]=\"(favorite | async)  ? 'fas:fa-thumbs-up' : 'far:fa-thumbs-up'\" [@beat]=\"likes\"></wm-icon>\n    \n    </button>\n  </div>\n\n  <!-- Meta -->\n  <div class=\"meta\" fxFlex=\"0 0 auto\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"4px\">\n\n    <a mat-button color=\"primary\">{{ data?.channel || 'Wizdm' }}</a>\n\n    <time class=\"time\">{{ data?.updated | moment:'ll' }}</time>\n\n  </div>\n\n  <!-- Content -->\n  <article fxFlex=\"1 1 auto\" fxLayout=\"column\">\n\n    <h2>{{ data?.title }}</h2>\n\n    <p>{{ data?.text }}</p>\n\n  </article>\n\n</div>\n\n<!-- Author -->\n<div class=\"footer\" fxFlex=\"0 0 auto\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"4px\">\n\n  <wm-avatar [src]=\"userImage\"></wm-avatar>\n\n  <span> <a class=\"mat-small\" >{{userFirstName}} </a></span>\n\n</div>\n","export * from './action.component';\nexport * from './actionbar.directive';\nexport * from './actionbar.module';","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout'\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { ReadmeModule } from '@wizdm/readme';\nimport { IconModule } from '@wizdm/elements/icon';\nimport { AvatarModule } from '@wizdm/elements/avatar';\nimport { ButtonChangerModule } from '@wizdm/elements/button';\nimport { MomentPipesModule } from '@wizdm/pipes/moment';\nimport { AuthGuardModule } from 'app/utils/auth-guard';\nimport { PostCardComponent } from './post-card.component';\n\n@NgModule({\n  declarations: [PostCardComponent],\n  imports: [CommonModule,\n    FlexLayoutModule,\n    MatButtonModule,\n    MatBadgeModule,\n    MatMenuModule,\n    ReadmeModule,\n    IconModule,\n    AvatarModule,\n    ButtonChangerModule,\n    MomentPipesModule,\n    AuthGuardModule\n  ],\n  exports: [PostCardComponent],\n  providers: [],\n})\nexport class PostCardModule { }","import { Component, Inject, OnInit, ViewChild } from '@angular/core';\nimport { query, stream, onSnapshot, where, orderBy, limit, endBefore, docs, snap } from '@wizdm/connect/database/collection/operators';\nimport { DatabaseGroup, QueryDocumentSnapshot } from '@wizdm/connect/database/collection';\nimport { DatabaseService } from '@wizdm/connect/database';\nimport { PostData } from './post/post.component';\nimport { filter, take, map, expand, tap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { EmojiUtils } from '@wizdm/emoji/utils';\nimport { MediaObserver } from '@angular/flex-layout';\nimport { UserProfile, UserData } from 'app/utils/user';\n\n@Component({\n  selector: 'wm-feed',\n  templateUrl: './feed.component.html',\n  styleUrls: ['./feed.component.scss']\n})\nexport class FeedComponent extends DatabaseGroup<PostData> {\n\n  readonly feed$: Observable<QueryDocumentSnapshot<PostData>[]>;\n\n  // Media queries to switch between desktop/mobile views\n  public get mobile(): boolean { return this.media.isActive('xs'); }\n  public get desktop(): boolean { return !this.mobile; }\n\n\n  constructor (db: DatabaseService, private utils: EmojiUtils,\n    private media: MediaObserver, private user: UserProfile<UserData>,) {\n\n    super(db, 'feed');\n\n    /** \n     * We de-structure the stream() operator gainng finer access control to the data coming from the database\n     */\n    this.feed$ = this.pipe(\n\n      // Query for the public posts in descending order by creation date\n      where('tags', 'array-contains', 'public'), orderBy('created', 'desc'),\n\n      // Custom operator\n      source => source.pipe(\n\n        // Let's read up to 50 old posts\n        limit(50), snap(),\n\n        // Let's pre-pend the new posts\n        expand(oldOnes => source.pipe(\n\n          // Streams the latest document snapshot\n          endBefore(oldOnes[0]), onSnapshot(this.db.zone),\n\n          // Filters out not only the empty emissions but also the local ones (still having pending writes).\n          filter(newOnes => newOnes.size > 0 && !newOnes.metadata.hasPendingWrites),\n\n          // Extracts the document snapshots from the query snapshot and proceedes\n          docs(), take(1),\n\n          map(newOnes => newOnes.concat(oldOnes))\n        ))\n      )\n    );\n  }\n\n  public get userImage(): string {\n    return this.user.data.photo || '';\n  }\n\n  public get userFirstName(): string {\n    let displayName = this.user?.data?.userName?.split('-').slice().pop();\n    return displayName || '';\n  }\n\n\n}\n","\n\n<!-- List all posts in descending order -->\n<wm-post class=\"mat-elevation-z3\" fxLayout=\"column\" *ngFor=\"let post of feed$ | async\" [post]=\"post\"></wm-post>\n\n<!-- Add Post  -->\n  <ng-template wmFab=\"right bottom\" [direction]=\"'column'\">\n\n    <button mat-mini-fab color=\"primary\"  class=\"mat-elevation-z11 post__entry\" [routerLink]=\"'postdlg'\">\n      <wm-icon   icon=\"fas:fa-plus\" ></wm-icon>\n\n    </button>\n\n  </ng-template>\n"],"sourceRoot":"webpack:///"}