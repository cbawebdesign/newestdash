{"version":3,"sources":["./wizdm/src/app/pages/landing/landing.service.ts","./wizdm/src/app/pages/landing/landing.module.ts","./wizdm/src/app/pages/landing/landing.component.html","./wizdm/src/app/pages/landing/landing.component.ts","./wizdm/src/app/pages/landing/widgets/load-widget.directive.ts"],"names":[],"mappings":"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","file":"pages-landing-landing-module-es2015.js","sourcesContent":["import { ContentResolver, SelectorResolver, ContentLoader, ContentConfigurator } from '@wizdm/content';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\nimport { WidgetConfig } from './widgets/base-widget.directive'\nimport { Widgets } from './widgets/load-widget.directive'\nimport { take, switchMap } from 'rxjs/operators';\nimport { Injectable, Inject } from '@angular/core';\nimport { Observable, of, forkJoin } from 'rxjs';\n\n/** LandingResolver. Resolves the content the same way of the standard ContentResolver after which \n * pre-loads the requested widgets to ensure a smooth rendering of the page. */\n@Injectable()\nexport class LandingResolver extends ContentResolver implements Resolve<any> {\n\n  constructor(@Inject('widgets') private widgets: Widgets, loader: ContentLoader, selector: SelectorResolver, config: ContentConfigurator) { \n    // Builds the stabdard resolver first\n    super(loader, selector, config.source, 'landing');\n  }\n\n  public resolve(route: ActivatedRouteSnapshot): Observable<any> {\n\n    /** Resolves the content loading the requested source file */\n    return super.resolve(route).pipe( switchMap( config => {\n\n      // Extracts the widget configurations\n      const widgets: WidgetConfig[] = config.widgets || [];\n\n      // If none, skips\n      if(widgets.length <= 0) { return of(config); }\n\n      // Pre-loads the widget components prior to return the content\n      return Promise.all( widgets.map( w => this.widgets.find( ww => ww.type === w.type )?.loadComponent() ) )\n        .then( () => config );\n    }));\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { GtagModule } from '@wizdm/gtag';\nimport { ContentRouterModule, RoutesWithContent } from '@wizdm/content';\nimport { ScrollingModule } from 'app/utils/scrolling';\nimport { BackgroundModule } from 'app/utils/background';\nimport { LandingComponent } from './landing.component';\nimport { LoadWidgetDirective, Widgets } from './widgets/load-widget.directive';\nimport { LandingResolver } from './landing.service';\n\nconst routes: RoutesWithContent = [\n  {\n    path: '',\n    //content: 'landing',\n    resolve: { landing: LandingResolver },\n    component: LandingComponent\n  }\n];\n\n/** List of widgets */\nconst widgets: Widgets = [\n\n  // Banner Widget\n  { type: 'banner', loadComponent: () => import('./widgets/banner/banner.component').then( ({ BannerComponent }) => BannerComponent ) },\n\n  // Feature matrix widget\n  { type: 'feature-matrix', loadComponent: () => import('./widgets/features/features.component').then( ({ FeaturesComponent }) => FeaturesComponent ) }\n\n];\n\n@NgModule({\n  // Provides the widgets registry for the loader to load from\n  providers: [ { provide: 'widgets', useValue: widgets }, LandingResolver ],\n  declarations: [ LandingComponent, LoadWidgetDirective ],\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    GtagModule,\n    ScrollingModule,\n    BackgroundModule,\n    ContentRouterModule.forChild(routes)\n  ]\n})\nexport class LandingModule { }\n","\n<!-- Localized content, restore scroll position, report gtag -->\n<ng-container *wmContent=\"let msgs select 'landing'\" scrollPositionRestoration=\"top\" gtag=\"landing\">\n  \n  <!-- Applies a background as per the configuration -->\n  <wm-background *ngIf=\"msgs.background as background\"\n    [linearGradients]=\"background.linearGradients || undefined\"\n    [attachment]=\"background.attachment || 'local'\"\n    [position]=\"background.position || undefined\" \n    [repeat]=\"background.repeat || 'no-repeat'\"    \n    [color]=\"background.color || undefined\"\n    [image]=\"background.image || undefined\"\n    [clip]=\"background.clip || undefined\" \n    [size]=\"background.size || 'cover'\"\n    [url]=\"background.url\">\n  </wm-background>\n\n  <!-- Dynamically loads the requested widgets -->\n  <ng-container *ngFor=\"let widget of msgs.widgets\">\n\n    <!-- For a list of widgets check the landing.module -->\n    <ng-container [wm-load-widget]=\"widget\"></ng-container>\n\n  </ng-container>\n\n</ng-container>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'wm-landing',\n  templateUrl: './landing.component.html',\n  styleUrls: ['./landing.component.scss']\n})\nexport class LandingComponent { }\n","import { Directive, Input, ComponentFactoryResolver, ViewContainerRef, ComponentRef, Injector, Type, Inject } from '@angular/core';\nimport { WidgetConfig, WidgetDirective } from './base-widget.directive';\n\nexport interface Widget {\n  type: string;\n  loadComponent: () => Promise<Type<WidgetDirective<WidgetConfig>>>;\n}\n\nexport type Widgets = Widget[];\n\n@Directive({\n  selector: '[wm-load-widget]'\n})\nexport class LoadWidgetDirective {\n\n  private ref: ComponentRef<WidgetDirective<WidgetConfig>>;\n\n  @Input('wm-load-widget') set widget(widget: WidgetConfig) {\n\n    if(!widget || this.ref) { return; }\n\n    this.loadWidget(widget);\n  }\n\n  private loadWidget(widget: WidgetConfig) {\n\n    const loader = this.widgets.find( w => w.type === widget.type );\n\n    if(!loader) { return; }\n\n    loader.loadComponent().then( cmp => {\n\n      const factory = this.resolver.resolveComponentFactory(cmp);\n\n      this.ref = this.view.createComponent(factory, null, this.injector) as any;\n\n      this.ref.instance.config = widget;\n    });\n  }\n\n  constructor(@Inject('widgets') private widgets: Widgets, private view: ViewContainerRef, private resolver: ComponentFactoryResolver, private injector: Injector) {}\n}\n"],"sourceRoot":"webpack:///"}