{"version":3,"sources":["./elements/src/lib/dialog/dialog.component.ts","./elements/src/lib/dialog/dialog.module.ts","./elements/src/lib/dialog/index.ts","./wizdm/src/app/utils/can-leave/can-leave.service.ts","./wizdm/src/app/utils/can-leave/index.ts","./wizdm/src/app/navigator/actionbar/index.ts","./wizdm/src/app/utils/can-leave/can-leave.module.ts","./wizdm/src/app/utils/can-leave/can-leave.directive.ts"],"names":[],"mappings":"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","file":"default~pages-chat-chat-module~profile-fixer-profile-fixer-module~profile-profile-module-es2015.js","sourcesContent":["import { MatDialog, MatDialogRef, MatDialogConfig, DialogRole, DialogPosition } from '@angular/material/dialog';\nimport { Component, Input, Output, EventEmitter, ViewChild, TemplateRef, forwardRef } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ScrollStrategy } from '@angular/cdk/overlay';\nimport { Direction } from '@angular/cdk/bidi';\n\n/** Dialog ref */\nexport type DialogRef<D=any, R=any> = MatDialogRef<D, R>;\n\n/** Fake MatDialogRef provider to support MatDialogClose directive */\nexport const FAKE_REF_FOR_CLOSE: any = { \n  provide: MatDialogRef, \n  useExisting: forwardRef( () => DialogComponent ) \n};\n\n/** \n * Component implementing a declarative version of the Angular Material Dialog \n */\n@Component({\n  selector: 'wm-dialog',\n  template: '<ng-template><ng-content></ng-content></ng-template>',\n  providers: [ FAKE_REF_FOR_CLOSE ]\n})\nexport class DialogComponent<D=any, R=any> implements MatDialogConfig<D> {\n\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** The dialog reference, when openend */\n  public ref: DialogRef<D,R>;\n  /** Data available for injection into the child component. */\n  public data: D;\n\n  constructor(readonly dialog: MatDialog/*, readonly viewContainerRef: ViewContainerRef*/) {}\n\n  // -- Start of MatDialogConfig implementaiton -- \n  \n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  @Input() id: string;\n\n  /** The ARIA role of the dialog element. */\n  @Input() role: DialogRole = 'dialog';\n  \n  /** Custom class for the overlay pane. */\n  @Input() panelClass: string | string[] = ''\n  \n  /** Whether the dialog has a backdrop. */\n  @Input('hasBackdrop') set _hasBackdrop(value: boolean) { this.hasBackdrop = coerceBooleanProperty(value); }\n  hasBackdrop: boolean = true;\n  \n  /** Custom class for the backdrop. */\n  @Input() backdropClass: string = '';\n  \n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  @Input('disableClose') set _disableClose(value: boolean) { this.disableClose = coerceBooleanProperty(value); }\n  disableClose: boolean = false;\n  \n  /** Width of the dialog. */\n  @Input() width: string = '';\n  \n  /** Height of the dialog. */\n  @Input() height: string = '';\n  \n  /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n  @Input() minWidth: number | string;\n  \n  /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n  @Input() minHeight: number | string;\n  \n  /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n  @Input() maxWidth: number | string = '80vw';\n  \n  /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n  @Input() maxHeight: number | string;\n  \n  /** Position overrides. */\n  @Input() position: DialogPosition;\n  \n  /** Layout direction for the dialog's content. */\n  @Input() direction: Direction;\n  \n  /** ID of the element that describes the dialog. */\n  @Input() ariaDescribedBy: string | null = null;\n  \n  /** ID of the element that labels the dialog. */\n  @Input() ariaLabelledBy: string | null = null;\n  \n  /** Aria label to assign to the dialog element. */\n  @Input() ariaLabel: string | null = null;\n  \n  /** Whether the dialog should focus the first focusable element on open. */\n  @Input('autoFocus') set _autoFocus(value: boolean) { this.autoFocus = coerceBooleanProperty(value); }\n  autoFocus: boolean = true;\n  \n  /** Whether the dialog should restore focus to the previously-focused element, after it's closed. */\n  @Input('restoreFocus') set _restoreFocus(value: boolean) { this.restoreFocus = coerceBooleanProperty(value); }\n  restoreFocus: boolean = false;\n  \n  /** Scroll strategy to be used for the dialog. */\n  @Input() scrollStrategy: ScrollStrategy;\n  \n  /** Whether the dialog should close when the user goes backwards/forwards in history. */\n  @Input('closeOnNavigation') set _closeOnNavigation(value: boolean) { this.closeOnNavigation = coerceBooleanProperty(value); }\n  closeOnNavigation: boolean = true;\n\n  // -- End of MatDialogConfig implementaiton -- \n\n  /** Opens the dialog when the passed condition is true */\n  @Input() set opened(open: D) { if(coerceBooleanProperty(open)) { this.open(open); } }  \n  /** Reports the open status */\n  @Output() openedChange = new EventEmitter<boolean>();\n  /** Forces the dialog closing with the given value */\n  @Input() set closed(value: R) { this.close(value); }  \n  /** Reports the value the dialog as been closed with */\n  @Output() closedChange = new EventEmitter<R>(); \n  \n  /** Opens the dialog returning the reference */\n  public open(data?: D): DialogRef<D,R> {\n    // Prevents multiple opening\n    if(!!this.ref) { return this.ref; }\n    // Grabs the optional data\n    this.data = data;\n    // Opens the dialog with the given configuration\n    this.ref = this.dialog.open<any,D,R>(this.template, this);\n    // Emits the dialog has been opened\n    this.ref.afterOpened().subscribe( () => this.openedChange.emit(true) );\n    // Emist the dialog is closing\n    this.ref.beforeClosed().subscribe( () => this.openedChange.emit(false) );\n    \n    this.ref.afterClosed().subscribe( value => {\n      // Emits the dialog closed with value\n      this.closedChange.emit(value);\n      // Makes sure the reference goes backundefined when closed \n      this.ref = undefined;\n    });\n    // Returns the reference for further use\n    return this.ref;\n  }\n\n  /** Closes the dialog passing along the output value */\n  public close(value: R): void {\n    this.ref && this.ref.close(value);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { DialogComponent } from './dialog.component';\n\n@NgModule({\n  imports: [ MatDialogModule ],\n  declarations: [ DialogComponent ],\n  exports: [ MatDialogModule, DialogComponent ]\n})\nexport class DialogModule { }","export * from './dialog.component';\nexport * from './dialog.module';\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { flatMap, take } from 'rxjs/operators';\n\nexport type CanLeaveType = boolean|Promise<boolean>|Observable<boolean>;\n\n@Injectable()\nexport class CanLeaveGuard implements CanDeactivate<any> {\n\n  private observer$ = new BehaviorSubject<CanLeaveType>(true);\n\n  /** Pushes a quanding value into the guard observer to resolve when leaving the page */\n  public allowDeactivation(guard: CanLeaveType) {\n    this.observer$.next(guard);\n  }\n\n  // Implements the CanDeactivate interface to conditionally prevent leaving the page\n  canDeactivate(component, route, state: RouterStateSnapshot, next: RouterStateSnapshot): CanLeaveType {\n\n    // Always allow deactivation whenever the current and next url(s) matches excepts for the language segment at the root\n    if(next && state.url.replace(/^\\/[^/]+/, '') === next.url.replace(/^\\/[^/]+/, '')) {\n      return true;\n    }\n\n    // Returns an observable resolving into a suitable guarding value\n    return this.observer$.pipe( \n      // Flatten the observer to a lower order when needed\n      flatMap( canLeave => typeof(canLeave) === 'boolean' ? of(canLeave) : canLeave ),\n      // Makes sure the observable always resolves\n      take(1)\n    );\n  }\n}","export * from './can-leave.service';\nexport * from './can-leave.directive';\nexport * from './can-leave.module';","export * from './action.component';\nexport * from './actionbar.directive';\nexport * from './actionbar.module';","import { NgModule } from '@angular/core';\nimport { CanLeaveGuard } from './can-leave.service';\nimport { CanLeaveDirective } from './can-leave.directive';\n\n@NgModule({\n  declarations: [ CanLeaveDirective ],\n  providers: [ CanLeaveGuard ],\n  exports: [ CanLeaveDirective ]\n})\nexport class CanLeaveModule { }","import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';\nimport { CanLeaveGuard } from './can-leave.service';\nimport { DialogComponent } from '@wizdm/elements/dialog';\nimport { Observable, of, defer } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Directive({\n  selector: 'wm-dialog[dontLeave]'\n})\nexport class CanLeaveDirective {\n\n  constructor(private canLeave: CanLeaveGuard, private dialog: DialogComponent<boolean>) {\n    // Hooks on the allowDeactivation observer\n    this.canLeave.allowDeactivation( this.canLeave$ );\n  }\n\n  /** When true, pops-up a dialog asking for user's consent to leave*/\n  @Input() dontLeave: boolean = false;\n\n  /** Reflects the dontLeave changes */\n  @Output() dontLeaveChange = new EventEmitter<boolean>();\n\n   // CanLeave Observavble\n  private get canLeave$(): Observable<boolean> {\n    // Builds an observable conditionally at subscription time\n    return defer( () => this.dontLeave ? this.dialog.open().afterClosed() : of(true) )\n      // Makes sure all the following requests will be true once the first has been granted\n      .pipe( tap( granted => (granted === this.dontLeave) && this.dontLeaveChange.emit(this.dontLeave = !granted) ));\n  }\n\n  // Prevents the tab/page to be closed \n  @HostListener('window:beforeunload', ['$event']) beforeUnload(ev: Event) {\n\n    if(this.dontLeave) {\n      return false;\n    }\n  }\n}"],"sourceRoot":"webpack:///"}