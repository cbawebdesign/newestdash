{"version":3,"sources":["webpack:///wizdm/src/app/pages/landing/landing.service.ts","webpack:///wizdm/src/app/pages/landing/landing.module.ts","webpack:///wizdm/src/app/pages/landing/landing.component.html","webpack:///wizdm/src/app/pages/landing/landing.component.ts","webpack:///wizdm/src/app/pages/landing/widgets/load-widget.directive.ts"],"names":["LandingResolver","widgets","loader","selector","config","source","route","pipe","length","Promise","all","map","w","find","ww","type","loadComponent","then","routes","path","resolve","landing","component","BannerComponent","FeaturesComponent","LandingModule","provide","useValue","forChild","LandingComponent","LoadWidgetDirective","view","resolver","injector","widget","ref","loadWidget","cmp","factory","resolveComponentFactory","createComponent","instance"],"mappings":"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","file":"pages-landing-landing-module-es5.js","sourcesContent":["import { ContentResolver, SelectorResolver, ContentLoader, ContentConfigurator } from '@wizdm/content';\nimport { Resolve, ActivatedRouteSnapshot } from '@angular/router';\nimport { WidgetConfig } from './widgets/base-widget.directive'\nimport { Widgets } from './widgets/load-widget.directive'\nimport { take, switchMap } from 'rxjs/operators';\nimport { Injectable, Inject } from '@angular/core';\nimport { Observable, of, forkJoin } from 'rxjs';\n\n/** LandingResolver. Resolves the content the same way of the standard ContentResolver after which \n * pre-loads the requested widgets to ensure a smooth rendering of the page. */\n@Injectable()\nexport class LandingResolver extends ContentResolver implements Resolve<any> {\n\n  constructor(@Inject('widgets') private widgets: Widgets, loader: ContentLoader, selector: SelectorResolver, config: ContentConfigurator) { \n    // Builds the stabdard resolver first\n    super(loader, selector, config.source, 'landing');\n  }\n\n  public resolve(route: ActivatedRouteSnapshot): Observable<any> {\n\n    /** Resolves the content loading the requested source file */\n    return super.resolve(route).pipe( switchMap( config => {\n\n      // Extracts the widget configurations\n      const widgets: WidgetConfig[] = config.widgets || [];\n\n      // If none, skips\n      if(widgets.length <= 0) { return of(config); }\n\n      // Pre-loads the widget components prior to return the content\n      return Promise.all( widgets.map( w => this.widgets.find( ww => ww.type === w.type )?.loadComponent() ) )\n        .then( () => config );\n    }));\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { GtagModule } from '@wizdm/gtag';\nimport { ContentRouterModule, RoutesWithContent } from '@wizdm/content';\nimport { ScrollingModule } from 'app/utils/scrolling';\nimport { BackgroundModule } from 'app/utils/background';\nimport { LandingComponent } from './landing.component';\nimport { LoadWidgetDirective, Widgets } from './widgets/load-widget.directive';\nimport { LandingResolver } from './landing.service';\n\nconst routes: RoutesWithContent = [\n  {\n    path: '',\n    //content: 'landing',\n    resolve: { landing: LandingResolver },\n    component: LandingComponent\n  }\n];\n\n/** List of widgets */\nconst widgets: Widgets = [\n\n  // Banner Widget\n  { type: 'banner', loadComponent: () => import('./widgets/banner/banner.component').then( ({ BannerComponent }) => BannerComponent ) },\n\n  // Feature matrix widget\n  { type: 'feature-matrix', loadComponent: () => import('./widgets/features/features.component').then( ({ FeaturesComponent }) => FeaturesComponent ) }\n\n];\n\n@NgModule({\n  // Provides the widgets registry for the loader to load from\n  providers: [ { provide: 'widgets', useValue: widgets }, LandingResolver ],\n  declarations: [ LandingComponent, LoadWidgetDirective ],\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    GtagModule,\n    ScrollingModule,\n    BackgroundModule,\n    ContentRouterModule.forChild(routes)\n  ]\n})\nexport class LandingModule { }\n","\n<!-- Localized content, restore scroll position, report gtag -->\n<ng-container *wmContent=\"let msgs select 'landing'\" scrollPositionRestoration=\"top\" gtag=\"landing\">\n  \n  <!-- Applies a background as per the configuration -->\n  <wm-background *ngIf=\"msgs.background as background\"\n    [linearGradients]=\"background.linearGradients || undefined\"\n    [attachment]=\"background.attachment || 'local'\"\n    [position]=\"background.position || undefined\" \n    [repeat]=\"background.repeat || 'no-repeat'\"    \n    [color]=\"background.color || undefined\"\n    [image]=\"background.image || undefined\"\n    [clip]=\"background.clip || undefined\" \n    [size]=\"background.size || 'cover'\"\n    [url]=\"background.url\">\n  </wm-background>\n\n  <!-- Dynamically loads the requested widgets -->\n  <ng-container *ngFor=\"let widget of msgs.widgets\">\n\n    <!-- For a list of widgets check the landing.module -->\n    <ng-container [wm-load-widget]=\"widget\"></ng-container>\n\n  </ng-container>\n\n</ng-container>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'wm-landing',\n  templateUrl: './landing.component.html',\n  styleUrls: ['./landing.component.scss']\n})\nexport class LandingComponent { }\n","import { Directive, Input, ComponentFactoryResolver, ViewContainerRef, ComponentRef, Injector, Type, Inject } from '@angular/core';\nimport { WidgetConfig, WidgetDirective } from './base-widget.directive';\n\nexport interface Widget {\n  type: string;\n  loadComponent: () => Promise<Type<WidgetDirective<WidgetConfig>>>;\n}\n\nexport type Widgets = Widget[];\n\n@Directive({\n  selector: '[wm-load-widget]'\n})\nexport class LoadWidgetDirective {\n\n  private ref: ComponentRef<WidgetDirective<WidgetConfig>>;\n\n  @Input('wm-load-widget') set widget(widget: WidgetConfig) {\n\n    if(!widget || this.ref) { return; }\n\n    this.loadWidget(widget);\n  }\n\n  private loadWidget(widget: WidgetConfig) {\n\n    const loader = this.widgets.find( w => w.type === widget.type );\n\n    if(!loader) { return; }\n\n    loader.loadComponent().then( cmp => {\n\n      const factory = this.resolver.resolveComponentFactory(cmp);\n\n      this.ref = this.view.createComponent(factory, null, this.injector) as any;\n\n      this.ref.instance.config = widget;\n    });\n  }\n\n  constructor(@Inject('widgets') private widgets: Widgets, private view: ViewContainerRef, private resolver: ComponentFactoryResolver, private injector: Injector) {}\n}\n"]}