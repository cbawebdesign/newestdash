{"version":3,"sources":["webpack:///elements/src/lib/illustration/illustration.component.ts","webpack:///elements/src/lib/illustration/illustration.component.html","webpack:///elements/src/lib/illustration/index.ts","webpack:///elements/src/lib/illustration/illustration.animations.ts","webpack:///elements/src/lib/illustration/illustration.module.ts","webpack:///wizdm/src/app/pages/landing/widgets/banner/banner.component.ts","webpack:///wizdm/src/app/pages/landing/widgets/banner/banner.component.html"],"names":["IllustrationComponent","http","sanitizer","location","source$","baseHref$","disableAnimations","load","error","svg$","pipe","src","get","responseType","e","emit","svg","base","parseUrls","bypassSecurityTrustHtml","replace","match","hash","normalize","next","$timing","$animations","opacity","IllustrationModule","BannerComponent","BannerModule"],"mappings":"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","file":"widgets-banner-banner-component-es5.js","sourcesContent":["import { Component, Input, Output, EventEmitter, HostBinding, ViewEncapsulation } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { HttpClient } from '@angular/common/http';\nimport { Location } from '@angular/common';\nimport { ThemePalette } from '@angular/material/core'\nimport { $animations } from './illustration.animations';\nimport { map, tap, catchError, switchMap } from 'rxjs/operators';\nimport { Observable, BehaviorSubject, of, combineLatest } from 'rxjs';\n\n@Component({\n  selector: 'wm-illustration',\n  templateUrl: './illustration.component.html',\n  styleUrls: ['./illustration.component.scss'],\n  host: { 'class': 'wm-illustration' },\n  encapsulation: ViewEncapsulation.None,\n  animations: $animations\n  \n})\nexport class IllustrationComponent {\n\n  public svg$: Observable<SafeHtml>;\n\n  constructor(private http: HttpClient, private sanitizer: DomSanitizer, private location: Location) { \n\n     // Builds the svg observable\n    this.svg$ = combineLatest(\n      // Resolves the svg content from the pushed source\n      this.source$.pipe( \n        // Gets the svg file\n        switchMap( src => this.http.get(src, { responseType: 'text'} ) ),\n        // Emits the error event on loading error\n        catchError( e => ( this.error.emit(e), of('') ) )\n      ),\n      // Combines with the pushed baseHref\n      this.baseHref$\n\n    ).pipe(\n      // Applies the baseHref to url() properties on request \n      map(([svg, base]) => this.parseUrls(svg, base) ),\n       // Sanitizes the result to bybass Angular security filters\n      map( svg => this.sanitizer.bypassSecurityTrustHtml(svg) ),\n      // Emits the load event when done\n      tap( () => this.load.emit() )\n    );\n  }\n\n  // Parses the url('#someLink') properties to prepend the baseHref when specified.\n  // This is likely needed when using svg gradients/filters, and so on, since angular \n  // app most likely defines <base href=\"...\"> tag in index.html breaking relative url()\n  // resolution for SVGs in Firefox and Safari (works fine in Chrome, btw) \n  private parseUrls(svg: string, base: string): string {\n\n    return !!base ? svg.replace(/url\\([ '\"]*(#.+)[ '\"]*\\)/g, (match, hash) => \n      match.replace(hash, this.location.normalize(base) + hash)\n    ) : svg;\n  }\n\n  /** Source path of of the SVG to load */\n  @Input() set src(src: string) { this.source$.next(src); }\n  private source$ = new BehaviorSubject<string>('');\n\n  /** Optional baseHref to prepend url('#someLink') tags with*/\n  @Input() set baseHref(base: string) { this.baseHref$.next(base); }\n  private baseHref$ = new BehaviorSubject<string>('');\n\n  @HostBinding('attr.color')\n  @Input() color: ThemePalette;\n\n  @HostBinding('@.disabled')\n  @Input() disableAnimations = false;\n\n  @Output() load = new EventEmitter<void>();\n  @Output() error = new EventEmitter<Error>();\n}","\n<div class=\"wrapper\" *ngIf=\"svg$ | async as svg; else loading\" [innerHTML]=\"svg\" @fadeIn></div>\n<ng-template #loading>\n  <ng-content></ng-content>\n</ng-template> \n  ","export * from './illustration.component';\nexport * from './illustration.module';","import { trigger, state, animate, style, transition, query, stagger, group, animateChild } from '@angular/animations';\n\nconst $timing = '200ms ease-out';\n\nexport const $animations = [\n\n  trigger('fadeIn', [\n    //state('off', style('*') ),\n    transition(':enter', [\n      style({ opacity: 0 }),\n      animate($timing, style('*'))\n    ])\n  ])\n];","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\nimport { IllustrationComponent } from './illustration.component';\n\n@NgModule({\n  declarations: [ IllustrationComponent ],\n  imports: [ CommonModule, HttpClientModule ],\n  exports: [ IllustrationComponent ]\n})\nexport class IllustrationModule { }\n","import { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule } from '@angular/material/button';\nimport { RedirectModule } from '@wizdm/redirect';\nimport { AnimateModule } from '@wizdm/animate';\n//import { IconModule } from '@wizdm/elements/icon';\nimport { ReadmeModule } from '@wizdm/readme';\nimport { ButtonChangerModule } from '@wizdm/elements/button';\nimport { IllustrationModule } from '@wizdm/elements/illustration';\nimport { WidgetDirective } from '../base-widget.directive';\nimport { Component, NgModule } from '@angular/core';\nimport { BannerConfig } from './banner.config';\n\n@Component({\n  selector: 'wm-banner',\n  templateUrl: './banner.component.html',\n  styleUrls: ['./banner.component.scss'],\n  host: { '[style.min-height.px]': \"config.minHeight || undefined\" }\n})\nexport class BannerComponent extends WidgetDirective<BannerConfig> {}\n\n@NgModule({\n  declarations: [ BannerComponent ],\n  imports: [\n    CommonModule,\n    RouterModule,\n    FlexLayoutModule,\n    MatButtonModule,\n    RedirectModule,\n    AnimateModule,\n    ReadmeModule,\n    ButtonChangerModule,\n    IllustrationModule\n  ]\n})\nexport class BannerModule { }\n","\n<!-- Animated Info panel on one side -->\n<div *ngIf=\"config.textbox as textbox\" \n  fxLayout=\"column\" fxLayoutAlign=\"center center\" \n  [fxFlex.gt-sm]=\"config.illustration ? 50 : 100\" \n  [fxFlexOrder]=\"textbox.order || 1\" \n  [wmAnimate]=\"textbox.animation?.name || 'none'\" \n  [aos]=\"textbox.animation?.aos || 0.5\"\n  [once]=\"textbox.animation?.once || false\">\n\n  <h1 class=\"mat-display-1\"><b>{{ textbox.title || 'Title goes here' }}</b></h1>\n  \n  <p [wm-readme]=\"textbox.pitch\">\n    The elevator pitch goes here. If you're reading this something went wrong while loading the widget.\n  </p>\n\n  <ng-container *ngIf=\"textbox.action as action\">\n  \n    <button mat-button [type]=\"action.type || 'raised'\" \n                       [color]=\"action.color || 'accent'\" \n                       [routerLink]=\"action.link\">{{ action.caption || 'Get started' }}\n    </button>\n    \n    <p [wm-readme]=\"action.hint\" class=\"mat-small\"></p>\n\n</ng-container>\n\n</div>\n\n<!-- Displays the resting Buddha on the right on big screens -->\n<wm-illustration *ngIf=\"config.illustration as illustration\"\n  fxHide.lt-sm fxFlex=\"50\" \n  [fxFlexOrder]=\"illustration.order || 2\"\n  [src]=\"illustration.source\" \n  [color]=\"illustration.color || 'primary'\">\n</wm-illustration>\n\n"]}