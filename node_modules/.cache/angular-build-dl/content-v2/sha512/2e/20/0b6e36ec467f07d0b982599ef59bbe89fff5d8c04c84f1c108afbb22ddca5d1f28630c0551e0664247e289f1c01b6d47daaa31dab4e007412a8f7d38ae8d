{"version":3,"sources":["webpack:///doorbell/src/lib/doorbell.module.ts","webpack:///doorbell/src/index.ts","webpack:///doorbell/src/lib/doorbell.definitions.ts","webpack:///wizdm/src/app/dialogs/feedback/feedback.module.ts","webpack:///wizdm/src/app/dialogs/feedback/feedback.component.ts","webpack:///wizdm/src/app/dialogs/feedback/feedback.component.html","webpack:///doorbell/src/lib/doorbell.service.ts"],"names":["DoorbellModule","config","ngModule","providers","provide","useValue","DoorbellConfigToken","doorbell","routes","path","content","component","data","dialogConfig","maxWidth","FeedbackModule","init","forChild","FeedbackComponent","ref","user","success","sending","sent","name","me","fullName","email","message","files","afterOpened","subscribe","ring","auth","authenticated","length","i","size","maxFileSize","language","submit","properties","userId","id","undefined","then","DoorbellService","http","url","appKey","Error","post","headers","params","observe","responseType","toPromise","res","console","log","status","body","uploader","pipe","attachments","formData","FormData","append"],"mappings":"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","file":"dialogs-feedback-feedback-module-es5.js","sourcesContent":["import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DoorbellConfig, DoorbellConfigToken } from './doorbell.definitions';\nimport { DoorbellService } from './doorbell.service';\n\n@NgModule({\n  providers: [ DoorbellService ]\n})\nexport class DoorbellModule {\n\n  static init(config: DoorbellConfig): ModuleWithProviders<DoorbellModule> {\n    return {\n      ngModule: DoorbellModule,\n      providers: [\n        { provide: DoorbellConfigToken, useValue: config }\n      ]\n    }\n  }\n}\n","export * from './lib/doorbell.module';\nexport * from './lib/doorbell.service';\nexport * from './lib/doorbell.definitions';\n","import { InjectionToken } from '@angular/core';\n\nexport interface DoorbellConfig {\n  url    : string,//'https://doorbell.io/api/applications'\n  id     : string,//'your id here',\n  appKey : string,//'your key here'\n};\n\nexport interface DoorbellSubmit {\n  email        : string,\n  message      : string,\n  name?        : string\n  ip?          : string,\n  sentiment?   : 'positive'|'neutral'|'negative',\n  tags?        : string|string[],\n  properties?  : { [key: string]: string },\n  //attachments? : number[], Automatically filled up by the uploader()\n  nps?         : number,\n  language?    : string\n};\n\nexport const DoorbellConfigToken = new InjectionToken<DoorbellConfig>('wizdm.doorbel.config');","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { ContentRouterModule, RoutesWithContent } from '@wizdm/content';\nimport { RedirectModule } from '@wizdm/redirect';\nimport { IconModule } from '@wizdm/elements/icon';\nimport { DoorbellModule } from '@wizdm/doorbell';\nimport { FeedbackComponent } from './feedback.component';\n\n// Environment\nimport { environment } from 'env/environment';\nconst  { doorbell } = environment;\n\n/** Dialog route. This route will be used by the DialogLoader, emulating the router, to lazily load the dialog */\nconst routes: RoutesWithContent = [{\n  path: '',\n  content: 'feedback',\n  component: FeedbackComponent,\n  data: { dialogConfig: { maxWidth: '100%' }}\n}];\n\n@NgModule({\n\n  declarations: [ FeedbackComponent ],\n\n  imports: [\n    CommonModule,\n    RouterModule,\n    FormsModule,\n    FlexLayoutModule,\n    MatDialogModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatProgressBarModule,\n    RedirectModule,\n    IconModule,\n    // Initialize the doorbell service\n    DoorbellModule.init(doorbell),\n    ContentRouterModule.forChild(routes)\n  ]\n})\nexport class FeedbackModule { }\n","import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Component, Inject } from '@angular/core';\nimport { DoorbellService } from '@wizdm/doorbell';\nimport { UserProfile } from 'app/utils/user';\n\n@Component({\n  selector: 'wm-feedback-dlg',\n  templateUrl: './feedback.component.html',\n  styleUrls: ['./feedback.component.scss']\n})\nexport class FeedbackComponent {\n\n  public name: string;\n  public email: string;\n  public message: string;\n  public files: FileList;\n  public success = false;\n  public sending = false;\n  public sent = false;\n\n  get me() { return this.user.data || {}; }\n  \n  get authenticated() { return this.user.auth.authenticated; }\n\n  constructor(@Inject(MAT_DIALOG_DATA) data: any, private ref: MatDialogRef<any>, private user: UserProfile, private doorbell: DoorbellService) { \n\n    // Initializes the form with the authenticated user name/email when available\n    this.name = this.me.fullName || this.me.name || '';\n    this.email = this.me.email || '';\n    this.message = '';\n    this.files = null;\n\n    // Prevents user to close the dialog\n    //this.ref.disableClose = true;\n\n    // Rings the doorbell when opening the feedback form\n    this.ref.afterOpened().subscribe( () => this.doorbell.ring() );\n  }\n\n  get fileSizeExceeded(): boolean {\n\n    if(!this.files || this.files.length === 0) { return false; }\n\n    for(let i = 0; i < this.files.length; i++) {\n\n      if(this.files[i].size > this.doorbell.maxFileSize) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public send(language?: string) {\n\n    // Turns the sending flag on\n    this.sending = true;\n\n    // Submit the feedback report to Doorbell.io\n    this.doorbell.submit({ \n\n      // Main form data\n      name: this.name,\n      email: this.email,\n      message: this.message,\n      \n      // Adds the current language\n      language,\n\n      // Includes the user id when available\n      properties: this.authenticated ? { userId: this.me.id } : undefined\n    \n    }, this.files).then( success => {\n\n      // Tracks the result\n      this.success = success;\n\n      // Turns the sending flag off\n      this.sending = false;\n\n      // Flags as sent showing the resulting message\n      this.sent = true;\n    }); \n  }\n}\n","\n<!-- Gets the localized content -->\n<ng-container *wmContent=\"let msgs select 'feedback'; let lang = language\">\n\n  <!-- Common header with close button -->\n  <header mat-dialog-title fxLayout=\"row\" fxLayoutAlign=\"space-between end\">\n    \n    <span>{{ msgs.title || 'Feedback'}}</span>\n    \n    <!-- Closes the dialog returning the feedback sending result -->\n    <button mat-icon-button [mat-dialog-close]=\"success\">\n      <wm-icon inline=\"true\" icon=\"close\"></wm-icon>\n    </button>\n\n  </header>\n\n  <!-- Thank you message on feedback sent -->\n  <ng-template #thankYou>\n\n    <mat-dialog-content [ngSwitch]=\"success\">\n\n      <p class=\"message color-default primary\" *ngSwitchCase=\"true\">{{ msgs.notifications?.success || 'Succeeded' }}</p>\n\n      <p class=\"message color-default warn\" *ngSwitchCase=\"false\">{{ msgs.notifications?.error || 'Error' }}</p>\n    \n    </mat-dialog-content>\n\n  </ng-template>\n\n  <!-- Feedback form to fill-in -->\n  <form (ngSubmit)=\"send(lang)\" *ngIf=\"!sent; else thankYou\" [disabled]=\"sending\" #form=\"ngForm\">\n\n    <mat-dialog-content fxLayout=\"column\" fxLayoutAlign=\"space-around stretch\" fxLayoutGap=\"10px\">\n\n      <!-- Name -->\n      <mat-form-field appearance=\"outline\">\n        <mat-label>{{ msgs.name?.label || 'Name' }}</mat-label>\n        <input matInput [(ngModel)]=\"name\" name=\"name\" [disabled]=\"authenticated\">\n        <mat-hint>{{ msgs.name?.hint }}</mat-hint>\n      </mat-form-field>\n  \n      <!-- Email -->\n      <mat-form-field appearance=\"outline\">\n        <mat-label>{{ msgs.email?.label || 'Email' }}</mat-label>\n        <input matInput [(ngModel)]=\"email\" name=\"email\" [disabled]=\"authenticated && !!me.email\" required email #emailInput=\"ngModel\">\n        <mat-hint>{{ msgs.email?.hint }}</mat-hint>\n        <mat-error *ngIf=\"emailInput.errors?.required\">{{ msgs.email?.errors?.required || 'Email required' }}</mat-error>\n        <mat-error *ngIf=\"emailInput.errors?.email\">{{ msgs.email?.errors?.invalid || 'Invalid email' }}</mat-error>\n      </mat-form-field>\n\n      <!-- Message -->\n      <mat-form-field appearance=\"outline\">\n        <mat-label>{{ msgs.message?.label || 'Message' }}</mat-label>\n        <textarea matInput [(ngModel)]=\"message\" name=\"message\" rows=\"5\" required cdkFocusInitial #messageInput=\"ngModel\"></textarea>\n        <mat-hint>{{ msgs.message?.hint }}</mat-hint>\n        <mat-error *ngIf=\"messageInput.errors?.required\">{{ msgs.message?.errors?.required || 'Message required' }}</mat-error>\n      </mat-form-field>\n\n      <!-- Attachments -->\n      <ng-container *ngIf=\"msgs.attachments && msgs.attachments.enable\">\n\n        <input style=\"display:none\" type=\"file\" multiple (change)=\"files = $event.target.files\" #openfile />\n        \n        <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxLayoutGap=\"4px\" class=\"upload\" \n          [style.pointer-events]=\"sending ? 'none' : undefined\"\n          [class.color-disabled]=\"sending\"\n          (click)=\"openfile.value=''; openfile.click()\">\n\n          <wm-icon [icon]=\"msgs.attachments.icon || 'attach_file'\"></wm-icon>\n\n          <span class=\"mat-error\" *ngIf=\"fileSizeExceeded; else filesOk\">\n            {{ msgs.attachments.errors?.sizeExceeded || 'File size exeeded' }}\n          </span>\n          <ng-template #filesOk>\n\n            <span>{{ msgs.attachments.label || 'Attachments' }}</span>\n            \n            <span *ngIf=\"files?.length > 0\">&nbsp;({{ files.length }})</span>\n\n          </ng-template>\n        \n        </div>\n      </ng-container>\n\n    </mat-dialog-content>\n\n    <!-- Submit button -->\n    <mat-dialog-actions align=\"end\">\n\n      <mat-progress-bar *ngIf=\"sending\" mode=\"indeterminate\" color=\"primary\"></mat-progress-bar>\n\n      <button mat-flat-button color=\"primary\" type=\"submit\" [disabled]=\"!form.valid || sending\">{{ msgs.send || 'Send' }}</button>\n\n    </mat-dialog-actions>\n\n  </form>\n\n  <!-- Credits -->\n  <a *ngIf=\"msgs.credits as credits\" class=\"mat-small\" [wmRedirect]=\"credits.url\">{{ credits.caption }}</a>\n\n</ng-container>\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, catchError } from 'rxjs/operators';\nimport { DoorbellConfig, DoorbellSubmit, DoorbellConfigToken } from './doorbell.definitions';\n\n@Injectable()\nexport class DoorbellService {\n\n  // Attachements allowed up to 5MB\n  readonly maxFileSize = 5 * 1024 * 1024;\n\n  constructor(@Inject(DoorbellConfigToken) private config: DoorbellConfig, private http: HttpClient) { \n\n    if(!config.url || !config.id || !config.appKey) {\n      throw( new Error('DoorbellSerive requires a valid configuration!!!') );\n    }\n  }\n\n  /** Used to signal the feedback form has been opened */\n  public ring(): Promise<boolean> {\n\n    return this.http.post(`${this.config.url}/${this.config.id}/open`, '', { \n      headers: { 'Content-Type': 'text/html' },\n      params: { 'key': this.config.appKey },\n      observe: 'response',\n      responseType: 'text' \n     }).toPromise().then( res => {console.log(res); return res.status === 201;} );\n  }\n\n  /** Submits a feedback form with optional attachments\n   * @param body is the form data content\n   * @param files is the optional list of files to attach\n   */\n  public submit(body: DoorbellSubmit, files?: FileList): Promise<boolean> {\n\n    // Uploads the attachement first\n    return this.uploader(files).pipe( switchMap( attachments => {\n\n      // Submits the form content including the atachment IDs \n      return this.http.post(`${this.config.url}/${this.config.id}/submit`, \n        { ...body, attachments }, { \n          headers: { 'Content-Type': 'application/json' },\n          params: { 'key': this.config.appKey },\n          observe: 'response',\n          responseType: 'text' \n        }\n      );\n    })).toPromise().then( res => res.status === 201 );\n  }\n\n  // Helper function to build a multipart/form-data object from the list of file to attach  \n  private formData(files: FileList): FormData {\n\n    const formData = new FormData();\n\n    // Fills up the form data\n    for(let i = 0; i < files.length; i++) {\n\n      // Skips the file exceedign the maximum size\n      if(files[i].size <= this.maxFileSize) {\n        formData.append(files[i].name, files[i]);\n      }\n    }\n\n    return formData;\n  }\n\n  // Helper function to upload the attachments prior to submit the form\n  private uploader(files?: FileList): Observable<[number]|undefined> {\n\n    // Do nothing when no files are there\n    if(!files || files.length === 0) { return of(undefined); }\n\n    // Post the attachments\n    return this.http.post(`${this.config.url}/${this.config.id}/upload`, \n      this.formData(files), { \n        headers: { 'Accept': 'application/json' }, //'Content-Type': 'multipart/form-data' },\n        params: { 'key': this.config.appKey },\n        observe: 'response',\n        responseType: 'json' \n      }\n    ).pipe(\n      catchError( () => of(undefined) ),\n      map( res => !!res && res.status === 201 ? res.body as [number] : undefined )\n    );\n  }\n}\n"]}