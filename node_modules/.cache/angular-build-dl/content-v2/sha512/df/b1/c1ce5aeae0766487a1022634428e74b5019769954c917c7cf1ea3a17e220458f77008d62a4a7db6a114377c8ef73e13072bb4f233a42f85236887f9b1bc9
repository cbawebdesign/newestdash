{"version":3,"sources":["webpack:///stripe/src/lib/elements/card/index.ts","webpack:///stripe/src/lib/material/material.directive.ts","webpack:///stripe/src/lib/elements/card/card.module.ts","webpack:///wizdm/src/app/pages/donate/donate.module.ts","webpack:///stripe/src/lib/elements/card/card-cvc.component.ts","webpack:///stripe/src/lib/elements/card/card-expiry.component.ts","webpack:///stripe/src/lib/material/index.ts","webpack:///stripe/src/lib/elements/index.ts","webpack:///stripe/src/lib/material/material.module.ts","webpack:///wizdm/src/app/pages/donate/donate.animations.ts","webpack:///stripe/src/lib/elements/element.directive.ts","webpack:///stripe/src/lib/elements/elements.directive.ts","webpack:///node_modules/@angular/material/fesm2015/button-toggle.js","webpack:///wizdm/src/app/pages/donate/donate.component.ts","webpack:///wizdm/src/app/pages/donate/donate.component.html","webpack:///stripe/src/lib/elements/card/card-number.component.ts","webpack:///stripe/src/lib/elements/elements.module.ts","webpack:///stripe/src/lib/elements/control.directive.ts","webpack:///stripe/src/lib/elements/card/card.component.ts"],"names":["StripeMaterialDirective","element","stateChanges","readyChange","focusChange","blurChange","valueChange","value","focused","empty","disabled","error","ids","event","focus","provide","useExisting","StripeCardModule","stripeElements","routes","path","content","component","DonateModule","init","forChild","StripeCardCvcControl","multi","StripeCardCvc","elements","ref","forward","elm","on","emit","_value","escapeChange","options","update","style","base","nativeElement","complete","invalid","placeholder","StripeCardExpiryControl","StripeCardExpiry","StripeMaterialModule","$timing","$animations","opacity","height","transform","StripeElementDirective","elementType","init$","_options","Error","element$","pipe","create","_instance","destroy","_ready","_focused","mount","sub","subscribe","classes","next","fn","instance","_","blur","clear","unsubscribe","computeBaseStyle","el","computed","window","getComputedStyle","color","fontFamily","fontSize","fontStyle","fontVariant","fontWeight","letterSpacing","textDecoration","textShadow","textTransform","STRIPE_ELEMENTS_OPTIONS","StripeElementsDirective","stripe","locale$","undefined","elements$","stripe$","locale","_c0","_c1","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","_uniqueIdCounter","MatButtonToggleChange","source","_changeDetector","defaultOptions","_vertical","_multiple","_disabled","_controlValueAccessorChangeFn","_onTouched","_name","change","appearance","_buttonToggles","forEach","toggle","name","_markForCheck","selected","_selectionModel","multiple","map","newValue","_setSelectionByValue","select","filter","checked","markForCheck","isDisabled","Array","isArray","length","isUserInput","deferEvents","deselect","Promise","resolve","then","_updateModelValue","isSelected","_rawValue","some","ngDevMode","_clearSelection","currentValue","_selectValue","correspondingOption","find","_emitChangeEvent","ɵfac","MatButtonToggleGroup_Factory","t","ɵdir","type","selectors","contentQueries","MatButtonToggleGroup_ContentQueries","rf","ctx","dirIndex","MatButtonToggle","_t","hostAttrs","hostVars","hostBindings","MatButtonToggleGroup_HostBindings","vertical","inputs","outputs","exportAs","features","ctorParameters","decorators","args","propDecorators","descendants","selector","providers","host","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_changeDetectorRef","_elementRef","_focusMonitor","defaultTabIndex","_isSingleSelector","_checked","ariaLabelledby","parsedTabIndex","Number","tabIndex","buttonToggleGroup","id","_appearance","_isSelected","_syncButtonToggle","group","_isPrechecked","monitor","stopMonitoring","_buttonElement","newChecked","MatButtonToggle_Factory","ɵcmp","viewQuery","MatButtonToggle_Query","first","MatButtonToggle_HostBindings","MatButtonToggle_focus_HostBindingHandler","disableRipple","ariaLabel","ngContentSelectors","decls","vars","consts","template","MatButtonToggle_Template","MatButtonToggle_Template_button_click_0_listener","_onButtonClick","_r0","buttonId","directives","styles","encapsulation","changeDetection","String","None","OnPush","MatButtonToggleModule","ɵmod","ɵinj","factory","MatButtonToggleModule_Factory","imports","ngJitMode","declarations","exports","DonateComponent","functions","dark","email","currency","ready","progress","completed","defaultAmoutOptions","label","createPaymentIntent","callable","autoMode$","console","log","amount","testMode","production","intent","confirmCardPayment","client_secret","payment_method","card","billing_details","result","paymentIntent","status","message","e","code","StripeCardNumberControl","StripeCardNumber","StripeElementsModule","platformId","ngModule","useValue","StripeControlDirective","disable","add","control","errorType","required","StripeCardControl","StripeCard","hideIcon","hidePostalCode","iconStyle"],"mappings":"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","file":"pages-donate-donate-module-es5.js","sourcesContent":["export * from './card.component';\nexport * from './card-expiry.component';\nexport * from './card-cvc.component';\nexport * from './card.component';\nexport * from './card.module';","import { MatFormFieldControl } from '@angular/material/form-field';\nimport { StripeElementDirective } from '@wizdm/stripe/elements';\nimport { Directive, forwardRef } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { Observable, merge } from 'rxjs';\n\n/**\n * MatFormFieldControl implementation for StripeElement\n */\n@Directive({\n  selector: '[matStripe]',\n  host: { 'class': 'wm-stripe-material' },\n  providers: [\n    { provide: MatFormFieldControl, useExisting: forwardRef(() => StripeMaterialDirective) }\n  ]\n})\nexport class StripeMaterialDirective implements MatFormFieldControl<any> {\n\n  constructor(readonly element: StripeElementDirective<any>) { \n\n    this.stateChanges = merge<void>(\n      element.readyChange,\n      element.focusChange,\n      element.blurChange,\n      element.valueChange,\n    );\n  }\n\n  /** The value of the control. */\n  get value(): any | null { return this.element.value || null; };\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  get focused(): boolean { return this.element.focused; }\n\n  /** Whether the control is empty. */\n  get empty(): boolean { return !this.element.empty; }\n\n  /** Whether the control is disabled. */\n  get disabled(): boolean { return this.element.disabled; }\n\n  /** Whether the `MatFormField` label should try to float. */\n  get shouldLabelFloat(): boolean { return true; };\n\n   /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is in an error state. */\n  get errorState(): boolean {\n    const value = this.element.value;   \n    return !!value && !!value.error;  \n  };\n\n  /** Sets the list of element IDs that currently describe this control. */\n  setDescribedByIds(ids: string[]): void { }\n\n  /** Handles a click on the control's container. */\n  onContainerClick(event: MouseEvent): void {\n    this.element.focus();\n  };\n}","import { StripeCardNumber, StripeCardNumberControl } from './card-number.component';\nimport { StripeCardExpiry, StripeCardExpiryControl } from './card-expiry.component';\nimport { StripeCardCvc, StripeCardCvcControl } from './card-cvc.component';\nimport { StripeCard, StripeCardControl } from './card.component';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  imports: [ ],\n  declarations: [ \n    StripeCard, StripeCardControl, \n    StripeCardNumber, StripeCardNumberControl, \n    StripeCardExpiry, StripeCardExpiryControl, \n    StripeCardCvc, StripeCardCvcControl\n  ],\n  exports: [ \n    StripeCard, StripeCardControl, \n    StripeCardNumber, StripeCardNumberControl, \n    StripeCardExpiry, StripeCardExpiryControl,\n    StripeCardCvc, StripeCardCvcControl \n  ]\n})\nexport class StripeCardModule { }","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ContentRouterModule, RoutesWithContent } from '@wizdm/content';\nimport { GtagModule } from '@wizdm/gtag';\nimport { ReadmeModule } from '@wizdm/readme';\nimport { RedirectModule } from '@wizdm/redirect';\nimport { StripeElementsModule } from '@wizdm/stripe/elements';\nimport { StripeCardModule } from '@wizdm/stripe/elements/card';\nimport { StripeMaterialModule } from '@wizdm/stripe/material';\nimport { DonateComponent } from './donate.component';\n\n// Environment\nimport { environment } from 'env/environment';\nconst  { stripeElements } = environment;\n\nconst routes: RoutesWithContent = [\n  {\n    path: '',\n    content: 'donate',\n    component: DonateComponent\n  }\n];\n\n@NgModule({\n  declarations: [ DonateComponent ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    FlexLayoutModule,\n    MatFormFieldModule,\n    MatButtonToggleModule,\n    MatButtonModule,\n    MatInputModule,\n    MatIconModule,\n    MatTooltipModule,\n    MatProgressSpinnerModule,\n    GtagModule,\n    ReadmeModule,\n    RedirectModule,\n    StripeElementsModule,\n    StripeCardModule,\n    StripeMaterialModule,\n    StripeElementsModule.init(stripeElements),\n    ContentRouterModule.forChild(routes)\n  ]\n})\nexport class DonateModule { }\n","import { StripeElementsDirective, StripeElementDirective, StripeControlDirective, computeBaseStyle } from '@wizdm/stripe/elements';\nimport { Directive, Component, OnInit, OnChanges, Optional, forwardRef, Input, ElementRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nimport type { StripeElementStyleVariant } from '@stripe/stripe-js';\n\n/** Bridge with the Angular's form API */\n@Directive({\n  selector: 'wm-stripe-card-cvc[ngModel], wm-stripe-card-cvc[formControl], wm-stripe-card-cvc[formControlName]',\n  providers: [\n    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => StripeCardCvcControl), multi: true },\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => StripeCardCvcControl), multi: true  }\n  ]\n})\nexport class StripeCardCvcControl extends StripeControlDirective<'cardCvc'> {}\n\n/** Stripe Card CVC Element for Angular */\n@Component({\n  selector: 'wm-stripe-card-cvc',\n  template: '',\n  providers: [\n    { provide: StripeElementDirective, useExisting: forwardRef(() => StripeCardCvc) }\n  ]\n})\nexport class StripeCardCvc extends StripeElementDirective<'cardCvc'> implements OnInit, OnChanges {\n\n  constructor(@Optional() elements: StripeElementsDirective, private ref: ElementRef<HTMLElement>) {\n    super('cardCvc', elements, ref);\n\n    // Hooks on CardElement specific events\n    this.forward( elm => {\n      \n      elm.on('change', value => this.valueChange.emit(this._value = value) );    \n      elm.on('escape', () => this.escapeChange.emit() );      \n    });\n  }\n\n  // Overrides the disabled getter to effectively return the status\n  get disabled(): boolean { return !!this.options.disabled; }\n \n  // Ovverrides the disable function forwarding the call to the StripeElement \n  public disable(disabled: boolean) {\n\n    this.disabled = disabled;\n    this.forward( elm => elm.update(this.options) );\n  }\n\n  // Initializes the element\n  ngOnInit() { this.init(this.options); }\n\n  // Updates the element on input changes\n  ngOnChanges() { this.forward( elm => elm.update(this.options) ); }\n\n  /** Element's custom base style.\n   * @see https://stripe.com/docs/js/appendix/style\n   * Setting this input value to 'auto' enables the automatic detection of the element's style */\n  @Input() set styleBase(value: StripeElementStyleVariant | 'auto') {\n    this.style.base = (value === 'auto') ? computeBaseStyle(this.ref.nativeElement) : value;\n  }\n\n  /** Element's custom complete style.\n   * @see https://stripe.com/docs/js/appendix/style */\n  @Input() set styleComplete(value: StripeElementStyleVariant) {\n    this.style.complete = value;\n  }\n  \n  /** Element's custom empty style.\n   * @see https://stripe.com/docs/js/appendix/style */\n  @Input() styleEmpty(value: StripeElementStyleVariant) {\n    this.style.empty = value;\n  }\n  \n  /** Element's custom invalid style.\n   * @see https://stripe.com/docs/js/appendix/style */\n  @Input() styleInvalid(value: StripeElementStyleVariant) {\n    this.style.invalid = value;\n  }\n\n  /** A placeholder text */\n  @Input() set placeholder(value: string) {\n    this.options.placeholder = value;\n  }\n\n  /** Disables the element */\n  @Input() set disabled(value: boolean) { \n    this.options.disabled = coerceBooleanProperty(value); \n  }\n}","import { StripeElementsDirective, StripeElementDirective, StripeControlDirective, computeBaseStyle } from '@wizdm/stripe/elements';\nimport { Directive, Component, OnInit, OnChanges, Optional, forwardRef, Input, ElementRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nimport type { StripeElementStyleVariant } from '@stripe/stripe-js';\n\n/** Bridge with the Angular's form API */\n@Directive({\n  selector: 'wm-stripe-card-expiry[ngModel], wm-stripe-card-expiry[formControl], wm-stripe-card-expiry[formControlName]',\n  providers: [\n    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => StripeCardExpiryControl), multi: true },\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => StripeCardExpiryControl), multi: true  }\n  ]\n})\nexport class StripeCardExpiryControl extends StripeControlDirective<'cardExpiry'> {}\n\n/** Stripe Card Exipation Date Element for Angular */\n@Component({\n  selector: 'wm-stripe-card-expiry',\n  template: '',\n  providers: [\n    { provide: StripeElementDirective, useExisting: forwardRef(() => StripeCardExpiry) }\n  ]\n})\nexport class StripeCardExpiry extends StripeElementDirective<'cardExpiry'> implements OnInit, OnChanges {\n\n  constructor(@Optional() elements: StripeElementsDirective, private ref: ElementRef<HTMLElement>) {\n    super('cardExpiry', elements, ref);\n\n    // Hooks on CardElement specific events\n    this.forward( elm => {\n      \n      elm.on('change', value => this.valueChange.emit(this._value = value) );    \n      elm.on('escape', () => this.escapeChange.emit() );      \n    });\n  }\n\n  // Overrides the disabled getter to effectively return the status\n  get disabled(): boolean { return !!this.options.disabled; }\n \n  // Ovverrides the disable function forwarding the call to the StripeElement \n  public disable(disabled: boolean) {\n\n    this.disabled = disabled;\n    this.forward( elm => elm.update(this.options) );\n  }\n\n  // Initializes the element\n  ngOnInit() { this.init(this.options); }\n\n  // Updates the element on input changes\n  ngOnChanges() { this.forward( elm => elm.update(this.options) ); }\n\n  /** Element's custom base style.\n   * @see https://stripe.com/docs/js/appendix/style\n   * Setting this input value to 'auto' enables the automatic detection of the element's style */\n  @Input() set styleBase(value: StripeElementStyleVariant | 'auto') {\n    this.style.base = (value === 'auto') ? computeBaseStyle(this.ref.nativeElement) : value;\n  }\n\n  /** Element's custom complete style.\n   * @see https://stripe.com/docs/js/appendix/style */\n  @Input() set styleComplete(value: StripeElementStyleVariant) {\n    this.style.complete = value;\n  }\n  \n  /** Element's custom empty style.\n   * @see https://stripe.com/docs/js/appendix/style */\n  @Input() styleEmpty(value: StripeElementStyleVariant) {\n    this.style.empty = value;\n  }\n  \n  /** Element's custom invalid style.\n   * @see https://stripe.com/docs/js/appendix/style */\n  @Input() styleInvalid(value: StripeElementStyleVariant) {\n    this.style.invalid = value;\n  }\n\n  /** A placeholder text */\n  @Input() set placeholder(value: string) {\n    this.options.placeholder = value;\n  }\n\n  /** Disables the element */\n  @Input() set disabled(value: boolean) { \n    this.options.disabled = coerceBooleanProperty(value); \n  }\n}","export * from './material.directive';\nexport * from './material.module';","export * from './element.directive';\nexport * from './control.directive';\nexport * from './elements.directive';\nexport * from './elements.module';","import { NgModule } from '@angular/core';\nimport { StripeMaterialDirective } from './material.directive';\n\n@NgModule({\n  imports: [ ],\n  declarations: [ StripeMaterialDirective ],\n  exports: [ StripeMaterialDirective ]\n})\nexport class StripeMaterialModule { }","import { trigger, animate, style, transition } from '@angular/animations';\n\nconst $timing = '500ms ease';\n\nexport let $animations = [\n\n  trigger('error', [\n    transition(':enter', [\n      style({ \n        opacity: '0', \n        height: '0',\n        transform: 'scaleY(0) rotateX(90deg)'\n      }),\n      animate($timing, style('*'))\n    ]),\n    transition(':leave', [\n      animate($timing, style({ \n        opacity: '0', \n        height: '0',\n        transform: 'scaleY(0) rotateX(90deg)'\n      }))\n    ])\n  ])\n];","import { Directive, OnDestroy, ElementRef, Input, Output, EventEmitter } from '@angular/core';\nimport { StripeElementsDirective } from './elements.directive';\nimport { tap, take, switchMap, shareReplay } from 'rxjs/operators';\nimport { Observable, Subject, Subscription } from 'rxjs';\n\nimport type { StripeError, StripeElementType, StripeElementCSSProperties } from '@stripe/stripe-js';\nimport type { StripeElement, StripeElementOptions, StripeElementChangeEvent } from './generic-types';\n\n/** @dynamic\n * Base element class turning a StripeElement into an Angular component with common features\n * To be used as the base class for all the Stripe related specific components: StripeCard...\n */\n@Directive()\nexport class StripeElementDirective<T extends StripeElementType> implements OnDestroy {\n\n  private element$: Observable<StripeElement<T>>;\n  private init$ = new Subject<StripeElementOptions<T>>();\n  private _options: StripeElementOptions<T> = {} as any;\n  private sub: Subscription;\n\n  /** The StripeElement instance */\n  get instance(): StripeElement<T> { return this._instance; }\n  private _instance: StripeElement<T>;\n  \n  /** The latest change value */\n  get value(): StripeElementChangeEvent<T> { return this._value; }\n  protected _value: StripeElementChangeEvent<T>;\n\n  /** True whenever the element is empty */\n  get empty(): boolean { return !this._value || this._value.empty; }\n\n  /** True whenever the element is complete and valid */\n  get complete(): boolean { return !!this._value && this._value.complete; }\n\n  /** The StripeError or null */\n  get error(): StripeError | null { return !!this._value && this._value.error || null; }\n\n  /** True whenever the element is fully loaded */\n  get ready(): boolean { return !!this._ready; }\n  private _ready: boolean;\n  \n  /** True whenever the element is focused */\n  get focused(): boolean { return !!this._focused; }\n  private _focused: boolean;\n\n  /** True whenever the element is disabled */\n  get disabled(): boolean { return false; }\n\n  constructor(elementType: T, elements: StripeElementsDirective, ref: ElementRef<HTMLElement>) {\n\n    // Ensures the element is used within the StripeElement container\n    if(!elements) { throw new Error(`\n      You're attempting to use a Stripe Element out of a proper StripeElements container.\n      Make sure to wrap all the controls within a wm-stripe-elements directive.\n    `);}\n\n    // Creates the StripeElement observable\n    this.element$ = this.init$.pipe( take(1), switchMap( options => elements.create(elementType, options).pipe(\n\n      tap( elm => {\n\n        // Disposes of the previous element instance, if any\n        this._instance && this._instance.destroy();\n\n        // Hooks on the common element's events\n        elm.on('ready', () => { this.readyChange.emit(this._ready = true); });\n        elm.on('focus', () => { this._focused = true; this.focusChange.emit(); });\n        elm.on('blur',  () => { this._focused = false; this.blurChange.emit(); });\n        \n        // Mounts the element on the DOM\n        elm.mount(ref.nativeElement); \n\n        // Keeps track of the current StripeElement instance\n        return this._instance = elm;\n      })\n    )), shareReplay(1) );\n\n    // Subscribes to the element's observable waiting for the init$ to emit\n    this.sub = this.element$.subscribe();\n  }\n\n  /** Returns the current options object */\n  protected get options(): StripeElementOptions<T> { return this._options || (this._options = {} as any);}\n\n  /** Returns the current option classes object, if any */\n  protected get classes(): StripeElementOptions<T>['classes'] { return this._options.classes || (this._options.classes = {}); }\n  \n  /** Returns the current option style object, if any */\n  protected get style(): StripeElementOptions<T>['style'] { return this._options.style || (this._options.style = {}); }\n\n  /** Initialize the StripeElement with the given options */\n  protected init(options: StripeElementOptions<T>) {\n    // Pushes the initial element options object triggering the element$ Observable to emit\n    this.init$.next(options);\n  }\n\n  /** Forwards the given call to the StripeElement */\n  protected forward(fn: (elm: StripeElement<T>) => void) {\n\n    // Short circuits with the current instance, if any\n    if(this.instance) { return fn(this.instance); }\n   \n    // Resolves the observable to get the latest instance otherwise\n    this.element$.pipe(take(1)).subscribe( instance => fn(instance) );\n  }\n\n  /** Disables the element whenever possible. Ovverrides this default implementation to forward the status down the Element */\n  public disable(_: boolean) {}\n\n  /** Focuses the element */\n  public focus() { this.forward( instance => instance.focus() ); }\n\n  /** Blurs the element */\n  public blur() { this.forward( instance => instance.blur() ); }\n\n  /** Clears the element */\n  public clear() { this.forward( instance => instance.clear() ); }\n\n  /** Class applied to the StripeElement's container. Defaults to StripeElement */\n  @Input() set classBase(value: string) { this.classes.base = value;}\n\n  /** The class name to apply when the Element is complete. Defaults to StripeElement--complete */\n  @Input() set classComplete(value: string) { this.classes.complete = value; }\n\n  /** The class name to apply when the Element is empty. Defaults to StripeElement--empty */\n  @Input() set classEmpty(value: string) { this.classes.empty = value; }\n\n  /** The class name to apply when the Element has focus. Defaults to StripeElement--focus */\n  @Input() set classFocus(value: string) { this.classes.focus = value; }\n\n  /** The class name to apply when the Element is invalid. Defaults to StripeElement--invalid */\n  @Input() set classInvalid(value: string) { this.classes.invalid = value; }\n\n  /** Emits on value changes */\n  @Output('change') valueChange = new EventEmitter<StripeElementChangeEvent<T>>();\n  \n  /** Emits when fully loaded */\n  @Output('ready') readyChange = new EventEmitter<boolean>(true);\n  \n  /** Emits when focused */\n  @Output('focus') focusChange = new EventEmitter<void>();\n  \n  /** Emits when blurred */\n  @Output('blur') blurChange = new EventEmitter<void>();\n\n  /** Emits when escape is pressed */\n  @Output('escape') escapeChange = new EventEmitter<void>();\n\n  // Disposes of the element\n  ngOnDestroy() {\n    this.forward( instance => instance.destroy() );\n    this.sub.unsubscribe();\n  }\n}\n\nexport function computeBaseStyle(el: HTMLElement): StripeElementCSSProperties {\n\n // Computes the element's base style to match the given HTML element\n  const computed = window?.getComputedStyle(el);\n  return  {\n    color: computed.color,\n    fontFamily: computed.fontFamily,\n    fontSize: computed.fontSize,\n    fontStyle: computed.fontStyle,\n    fontVariant: computed.fontVariant,\n    fontWeight: computed.fontWeight,\n    letterSpacing: computed.letterSpacing,\n    textDecoration: computed.textDecoration,\n    textShadow: computed.textShadow,\n    textTransform: computed.textTransform\n  };\n}","import { Directive, Input, Inject, Optional, InjectionToken } from '@angular/core';\nimport { map, switchMap, shareReplay } from 'rxjs/operators';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { StripeService } from '@wizdm/stripe';\n\nimport type { StripeElements, StripeElementsOptions, StripeElementLocale, StripeElementType } from '@stripe/stripe-js';\nimport type { StripeElement, StripeElementOptions } from './generic-types';\n\n/** StripeElementsModule configuration token */\nexport const STRIPE_ELEMENTS_OPTIONS = new InjectionToken<StripeElementsOptions>('wizdm.stripe.elements.options');\n\n/** Relays the Elements funcitons enabling dynamic locale */\n@Directive({\n  selector: '[StripeElements]',\n  exportAs: 'StripeElements'\n})\nexport class StripeElementsDirective {\n\n  private locale$ = new BehaviorSubject<StripeElementLocale>(undefined);\n  private elements$: Observable<StripeElements>;\n\n  constructor(stripe: StripeService, @Optional() @Inject(STRIPE_ELEMENTS_OPTIONS) options: StripeElementsOptions) { \n\n    this.elements$ = stripe.stripe$.pipe( \n\n      switchMap( stripe => this.locale$.pipe( \n        \n        map( locale => stripe.elements({ \n        \n          ...options, \n          \n          locale          \n        }))\n      )),\n\n      shareReplay(1)\n    )\n  }\n\n  /** The Elements locale to use. The locale is automatically detected when undefined */\n  @Input() set StripeElements(locale: StripeElementLocale) {\n    this.locale$.next(locale);\n  }\n\n  /** Creates a Stripe Element of the given type using the given locale and options */\n  public create<T extends StripeElementType>(elementType: T, options?: StripeElementOptions<T>): Observable<StripeElement<T>> {    \n    return this.elements$.pipe( map( elements => elements.create(elementType as any, options as any) )) as any;\n  }\n}","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { mixinDisableRipple, MatCommonModule, MatRippleModule } from '@angular/material/core';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\n\nconst _c0 = [\"button\"];\nconst _c1 = [\"*\"];\nconst MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n/**\n * Injection token that can be used to reference instances of `MatButtonToggleGroup`.\n * It serves as alternative token to the actual `MatButtonToggleGroup` class which\n * could cause unnecessary retention of the class and its component metadata.\n */\nconst MAT_BUTTON_TOGGLE_GROUP = new InjectionToken('MatButtonToggleGroup');\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatButtonToggleGroup),\n    multi: true\n};\nlet _uniqueIdCounter = 0;\n/** Change event object emitted by MatButtonToggle. */\nclass MatButtonToggleChange {\n    constructor(\n    /** The MatButtonToggle that emits the event. */\n    source, \n    /** The value assigned to the MatButtonToggle. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\nclass MatButtonToggleGroup {\n    constructor(_changeDetector, defaultOptions) {\n        this._changeDetector = _changeDetector;\n        this._vertical = false;\n        this._multiple = false;\n        this._disabled = false;\n        /**\n         * The method to be called in order to update ngModel.\n         * Now `ngModel` binding is not supported in multiple selection mode.\n         */\n        this._controlValueAccessorChangeFn = () => { };\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this._onTouched = () => { };\n        this._name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n        /**\n         * Event that emits whenever the value of the group changes.\n         * Used to facilitate two-way data binding.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** Event emitted when the group's value changes. */\n        this.change = new EventEmitter();\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** `name` attribute for the underlying `input` element. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => {\n                toggle.name = this._name;\n                toggle._markForCheck();\n            });\n        }\n    }\n    /** Whether the toggle group is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** Value of the toggle group. */\n    get value() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        if (this.multiple) {\n            return selected.map(toggle => toggle.value);\n        }\n        return selected[0] ? selected[0].value : undefined;\n    }\n    set value(newValue) {\n        this._setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n    /** Selected button toggles in the group. */\n    get selected() {\n        const selected = this._selectionModel ? this._selectionModel.selected : [];\n        return this.multiple ? selected : (selected[0] || null);\n    }\n    /** Whether multiple button toggles can be selected. */\n    get multiple() { return this._multiple; }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether multiple button toggle group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        if (this._buttonToggles) {\n            this._buttonToggles.forEach(toggle => toggle._markForCheck());\n        }\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    }\n    ngAfterContentInit() {\n        this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new MatButtonToggleChange(source, this.value);\n        this._controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     * @param deferEvents Whether to defer emitting the change events.\n     */\n    _syncButtonToggle(toggle, select, isUserInput = false, deferEvents = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            this.selected.checked = false;\n        }\n        if (this._selectionModel) {\n            if (select) {\n                this._selectionModel.select(toggle);\n            }\n            else {\n                this._selectionModel.deselect(toggle);\n            }\n        }\n        else {\n            deferEvents = true;\n        }\n        // We need to defer in some cases in order to avoid \"changed after checked errors\", however\n        // the side-effect is that we may end up updating the model value out of sequence in others\n        // The `deferEvents` flag allows us to decide whether to do it on a case-by-case basis.\n        if (deferEvents) {\n            Promise.resolve().then(() => this._updateModelValue(isUserInput));\n        }\n        else {\n            this._updateModelValue(isUserInput);\n        }\n    }\n    /** Checks whether a button toggle is selected. */\n    _isSelected(toggle) {\n        return this._selectionModel && this._selectionModel.isSelected(toggle);\n    }\n    /** Determines whether a button toggle should be checked on init. */\n    _isPrechecked(toggle) {\n        if (typeof this._rawValue === 'undefined') {\n            return false;\n        }\n        if (this.multiple && Array.isArray(this._rawValue)) {\n            return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n        }\n        return toggle.value === this._rawValue;\n    }\n    /** Updates the selection state of the toggles in the group based on a value. */\n    _setSelectionByValue(value) {\n        this._rawValue = value;\n        if (!this._buttonToggles) {\n            return;\n        }\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n            this._clearSelection();\n            value.forEach((currentValue) => this._selectValue(currentValue));\n        }\n        else {\n            this._clearSelection();\n            this._selectValue(value);\n        }\n    }\n    /** Clears the selected toggles. */\n    _clearSelection() {\n        this._selectionModel.clear();\n        this._buttonToggles.forEach(toggle => toggle.checked = false);\n    }\n    /** Selects a value if there's a toggle that corresponds to it. */\n    _selectValue(value) {\n        const correspondingOption = this._buttonToggles.find(toggle => {\n            return toggle.value != null && toggle.value === value;\n        });\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this._selectionModel.select(correspondingOption);\n        }\n    }\n    /** Syncs up the group's value with the model and emits the change event. */\n    _updateModelValue(isUserInput) {\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this._emitChangeEvent();\n        }\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n}\nMatButtonToggleGroup.ɵfac = function MatButtonToggleGroup_Factory(t) { return new (t || MatButtonToggleGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggleGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatButtonToggleGroup, selectors: [[\"mat-button-toggle-group\"]], contentQueries: function MatButtonToggleGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatButtonToggle, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonToggles = _t);\n    } }, hostAttrs: [\"role\", \"group\", 1, \"mat-button-toggle-group\"], hostVars: 5, hostBindings: function MatButtonToggleGroup_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-vertical\", ctx.vertical)(\"mat-button-toggle-group-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { appearance: \"appearance\", name: \"name\", vertical: \"vertical\", value: \"value\", multiple: \"multiple\", disabled: \"disabled\" }, outputs: { valueChange: \"valueChange\", change: \"change\" }, exportAs: [\"matButtonToggleGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n            { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n        ])] });\nMatButtonToggleGroup.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggleGroup.propDecorators = {\n    _buttonToggles: [{ type: ContentChildren, args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                },] }],\n    appearance: [{ type: Input }],\n    name: [{ type: Input }],\n    vertical: [{ type: Input }],\n    value: [{ type: Input }],\n    valueChange: [{ type: Output }],\n    multiple: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-button-toggle-group',\n                providers: [\n                    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n                    { provide: MAT_BUTTON_TOGGLE_GROUP, useExisting: MatButtonToggleGroup },\n                ],\n                host: {\n                    'role': 'group',\n                    'class': 'mat-button-toggle-group',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[class.mat-button-toggle-vertical]': 'vertical',\n                    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"'\n                },\n                exportAs: 'matButtonToggleGroup'\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { valueChange: [{\n            type: Output\n        }], change: [{\n            type: Output\n        }], appearance: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], multiple: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], _buttonToggles: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatButtonToggle), {\n                    // Note that this would technically pick up toggles\n                    // from nested groups, but that's not a case that we support.\n                    descendants: true\n                }]\n        }] }); })();\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nclass MatButtonToggleBase {\n}\nconst _MatButtonToggleMixinBase = mixinDisableRipple(MatButtonToggleBase);\n/** Single button inside of a toggle group. */\nclass MatButtonToggle extends _MatButtonToggleMixinBase {\n    constructor(toggleGroup, _changeDetectorRef, _elementRef, _focusMonitor, defaultTabIndex, defaultOptions) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._isSingleSelector = false;\n        this._checked = false;\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._disabled = false;\n        /** Event emitted when the group value changes. */\n        this.change = new EventEmitter();\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n        this.buttonToggleGroup = toggleGroup;\n        this.appearance =\n            defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n    /** Unique ID for the underlying `button` element. */\n    get buttonId() { return `${this.id}-button`; }\n    /** The appearance style of the button. */\n    get appearance() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n    }\n    set appearance(value) {\n        this._appearance = value;\n    }\n    /** Whether the button is checked. */\n    get checked() {\n        return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n    }\n    set checked(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the button is disabled. */\n    get disabled() {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value) { this._disabled = coerceBooleanProperty(value); }\n    ngOnInit() {\n        const group = this.buttonToggleGroup;\n        this._isSingleSelector = group && !group.multiple;\n        this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n        if (this._isSingleSelector) {\n            this.name = group.name;\n        }\n        if (group) {\n            if (group._isPrechecked(this)) {\n                this.checked = true;\n            }\n            else if (group._isSelected(this) !== this._checked) {\n                // As as side effect of the circular dependency between the toggle group and the button,\n                // we may end up in a state where the button is supposed to be checked on init, but it\n                // isn't, because the checked value was assigned too early. This can happen when Ivy\n                // assigns the static input value before the `ngOnInit` has run.\n                group._syncButtonToggle(this, this._checked);\n            }\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true);\n    }\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group._isSelected(this)) {\n            group._syncButtonToggle(this, false, false, true);\n        }\n    }\n    /** Focuses the button. */\n    focus(options) {\n        this._buttonElement.nativeElement.focus(options);\n    }\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    _onButtonClick() {\n        const newChecked = this._isSingleSelector ? true : !this._checked;\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup._onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new MatButtonToggleChange(this, this.value));\n    }\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this._changeDetectorRef.markForCheck();\n    }\n}\nMatButtonToggle.ɵfac = function MatButtonToggle_Factory(t) { return new (t || MatButtonToggle)(ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, 8)); };\nMatButtonToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatButtonToggle, selectors: [[\"mat-button-toggle\"]], viewQuery: function MatButtonToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttonElement = _t.first);\n    } }, hostAttrs: [\"role\", \"presentation\", 1, \"mat-button-toggle\"], hostVars: 12, hostBindings: function MatButtonToggle_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatButtonToggle_focus_HostBindingHandler() { return ctx.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"id\", ctx.id)(\"name\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-button-toggle-standalone\", !ctx.buttonToggleGroup)(\"mat-button-toggle-checked\", ctx.checked)(\"mat-button-toggle-disabled\", ctx.disabled)(\"mat-button-toggle-appearance-standard\", ctx.appearance === \"standard\");\n    } }, inputs: { disableRipple: \"disableRipple\", ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], tabIndex: \"tabIndex\", appearance: \"appearance\", checked: \"checked\", disabled: \"disabled\", id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], value: \"value\" }, outputs: { change: \"change\" }, exportAs: [\"matButtonToggle\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 6, vars: 9, consts: [[\"type\", \"button\", 1, \"mat-button-toggle-button\", \"mat-focus-indicator\", 3, \"id\", \"disabled\", \"click\"], [\"button\", \"\"], [1, \"mat-button-toggle-label-content\"], [1, \"mat-button-toggle-focus-overlay\"], [\"matRipple\", \"\", 1, \"mat-button-toggle-ripple\", 3, \"matRippleTrigger\", \"matRippleDisabled\"]], template: function MatButtonToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"click\", function MatButtonToggle_Template_button_click_0_listener() { return ctx._onButtonClick(); });\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"span\", 3);\n        ɵngcc0.ɵɵelement(5, \"span\", 4);\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.buttonId)(\"disabled\", ctx.disabled || null);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? -1 : ctx.tabIndex)(\"aria-pressed\", ctx.checked)(\"name\", ctx.name || null)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled);\n    } }, directives: [ɵngcc2.MatRipple], styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatButtonToggle.ctorParameters = () => [\n    { type: MatButtonToggleGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_GROUP,] }] },\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS,] }] }\n];\nMatButtonToggle.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    _buttonElement: [{ type: ViewChild, args: ['button',] }],\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    value: [{ type: Input }],\n    tabIndex: [{ type: Input }],\n    appearance: [{ type: Input }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    change: [{ type: Output }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-button-toggle',\n                template: \"<button #button class=\\\"mat-button-toggle-button mat-focus-indicator\\\"\\n        type=\\\"button\\\"\\n        [id]=\\\"buttonId\\\"\\n        [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\\n        [attr.aria-pressed]=\\\"checked\\\"\\n        [disabled]=\\\"disabled || null\\\"\\n        [attr.name]=\\\"name || null\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        (click)=\\\"_onButtonClick()\\\">\\n  <span class=\\\"mat-button-toggle-label-content\\\">\\n    <ng-content></ng-content>\\n  </span>\\n</button>\\n\\n<span class=\\\"mat-button-toggle-focus-overlay\\\"></span>\\n<span class=\\\"mat-button-toggle-ripple\\\" matRipple\\n     [matRippleTrigger]=\\\"button\\\"\\n     [matRippleDisabled]=\\\"this.disableRipple || this.disabled\\\">\\n</span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matButtonToggle',\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disableRipple'],\n                host: {\n                    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n                    '[class.mat-button-toggle-checked]': 'checked',\n                    '[class.mat-button-toggle-disabled]': 'disabled',\n                    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n                    'class': 'mat-button-toggle',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.id]': 'id',\n                    '[attr.name]': 'null',\n                    '(focus)': 'focus()',\n                    'role': 'presentation'\n                },\n                styles: [\".mat-button-toggle-standalone,.mat-button-toggle-group{position:relative;display:inline-flex;flex-direction:row;white-space:nowrap;overflow:hidden;border-radius:2px;-webkit-tap-highlight-color:transparent}.cdk-high-contrast-active .mat-button-toggle-standalone,.cdk-high-contrast-active .mat-button-toggle-group{outline:solid 1px}.mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.mat-button-toggle-group-appearance-standard{border-radius:4px}.cdk-high-contrast-active .mat-button-toggle-standalone.mat-button-toggle-appearance-standard,.cdk-high-contrast-active .mat-button-toggle-group-appearance-standard{outline:0}.mat-button-toggle-vertical{flex-direction:column}.mat-button-toggle-vertical .mat-button-toggle-label-content{display:block}.mat-button-toggle{white-space:nowrap;position:relative}.mat-button-toggle .mat-icon svg{vertical-align:top}.mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:1}.cdk-high-contrast-active .mat-button-toggle.cdk-keyboard-focused .mat-button-toggle-focus-overlay{opacity:.5}.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{opacity:.04}.mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.12}.cdk-high-contrast-active .mat-button-toggle-appearance-standard.cdk-keyboard-focused:not(.mat-button-toggle-disabled) .mat-button-toggle-focus-overlay{opacity:.5}@media(hover: none){.mat-button-toggle-appearance-standard:not(.mat-button-toggle-disabled):hover .mat-button-toggle-focus-overlay{display:none}}.mat-button-toggle-label-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:inline-block;line-height:36px;padding:0 16px;position:relative}.mat-button-toggle-appearance-standard .mat-button-toggle-label-content{padding:0 12px}.mat-button-toggle-label-content>*{vertical-align:middle}.mat-button-toggle-focus-overlay{border-radius:inherit;pointer-events:none;opacity:0;top:0;left:0;right:0;bottom:0;position:absolute}.mat-button-toggle-checked .mat-button-toggle-focus-overlay{border-bottom:solid 36px}.cdk-high-contrast-active .mat-button-toggle-checked .mat-button-toggle-focus-overlay{opacity:.5;height:0}.cdk-high-contrast-active .mat-button-toggle-checked.mat-button-toggle-appearance-standard .mat-button-toggle-focus-overlay{border-bottom:solid 500px}.mat-button-toggle .mat-button-toggle-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-toggle-button{border:0;background:none;color:inherit;padding:0;margin:0;font:inherit;outline:none;width:100%;cursor:pointer}.mat-button-toggle-disabled .mat-button-toggle-button{cursor:default}.mat-button-toggle-button::-moz-focus-inner{border:0}\\n\"]\n            }]\n    }], function () { return [{ type: MatButtonToggleGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_GROUP]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], tabIndex: [{\n            type: Input\n        }], appearance: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _buttonElement: [{\n            type: ViewChild,\n            args: ['button']\n        }], value: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatButtonToggleModule {\n}\nMatButtonToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatButtonToggleModule });\nMatButtonToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatButtonToggleModule_Factory(t) { return new (t || MatButtonToggleModule)(); }, imports: [[MatCommonModule, MatRippleModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatButtonToggleModule, { declarations: function () { return [MatButtonToggleGroup, MatButtonToggle]; }, imports: function () { return [MatCommonModule, MatRippleModule]; }, exports: function () { return [MatCommonModule, MatButtonToggleGroup, MatButtonToggle]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatButtonToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, MatRippleModule],\n                exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n                declarations: [MatButtonToggleGroup, MatButtonToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS, MAT_BUTTON_TOGGLE_GROUP, MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR, MatButtonToggle, MatButtonToggleChange, MatButtonToggleGroup, MatButtonToggleModule };\n\n//# sourceMappingURL=button-toggle.js.map","import type { StripeCardElement, PaymentIntent, StripeError } from '@stripe/stripe-js';\nimport { delay, startWith, switchMap } from 'rxjs/operators';\nimport { FunctionsService } from '@wizdm/connect/functions';\nimport { DarkModeObserver } from 'app/utils/platform';\nimport { Component } from '@angular/core';\nimport { $animations } from './donate.animations';\nimport { StripeService } from '@wizdm/stripe';\nimport { Observable, of } from 'rxjs';\nimport { environment } from 'env/environment';\n\n@Component({\n  selector: 'wm-donate',\n  templateUrl: './donate.component.html',\n  styleUrls: ['./donate.component.scss'],\n  animations: $animations\n})\nexport class DonateComponent {\n\n  readonly autoMode$: Observable<any>;\n\n  public card: StripeCardElement;\n  public email: string = '';\n  public name: string = '';\n  public amount: number;\n  public currency: 'eur'|'usd' = 'eur';\n\n  public error: string;\n  public ready: boolean = false;\n  public progress: boolean = false;\n  public completed: boolean = false;\n  \n  readonly defaultAmoutOptions = [\n    { label: \"5\",   value: 5 },\n    { label: \"25\",  value: 25 },\n    { label: \"100\", value: 100 }\n  ];\n\n  /** Toggles the curency between EUR and USD */\n  public toggleCurrency() {\n    this.currency = this.currency === 'eur' ? 'usd' : 'eur';\n  }\n\n  constructor(private stripe: StripeService, private functions: FunctionsService, dark: DarkModeObserver) { \n\n    // Uses an observable to refresh the Card Element automatic style detection on theme changes\n    this.autoMode$ = dark.pipe( switchMap( () => of('auto').pipe( delay(0), startWith({}) )));\n  }\n\n  // createPaymentIntent runs server side on cloudFunctions\n  private createPaymentIntent = this.functions.callable<any, PaymentIntent>('createPaymentIntent');\n\n  // Process the payment\n  public pay() {\n\n    this.completed = false;\n    this.progress = true;\n    this.error = '';\n\n    console.log(\"Creating payment intent for\", this.amount, this.currency);\n\n    // Starts by creating the payment intent server side\n    this.createPaymentIntent({\n      // Amount goes in cents\n      amount: this.amount * 100,\n      currency: this.currency,\n      // Enables testMode when in developent so the private test key will be used instead of the live one.\n      testMode: !environment.production\n\n    }).then( intent => {\n\n      console.log(\"Confirming payment intent\", intent.id);\n      \n      // Once creates, use the client_secret to confirm the intent with the credit card details\n      // from the card element\n      return this.stripe.confirmCardPayment( intent.client_secret, {\n      \n        payment_method: {\n          card: this.card,\n          billing_details: {\n            name: this.name,\n            email: this.email\n          }\n        }\n      });\n\n    }).then( result => {\n\n      console.log(\"Transaction completed\", result.paymentIntent?.status);\n      // Tracks the errors, if any\n      this.error = result.error?.message;\n      // Stops the progress\n      this.progress = false; \n      // Displays the completion \n      this.completed = !this.error;\n      // Clears the card\n      this.card.clear();\n\n    }).catch( (e: StripeError) => {\n      \n      console.log(\"Transaction terminated\", e);\n      // Tracks the errors, if any\n      this.error = e.message || e.code;\n      // Stops the progress\n      this.completed = this.progress = false; \n      // Clears the card\n      this.card.clear();\n    });\n  }\n}\n","\n\n<!-- Localized content, restore scroll position, report gtag -->\n<ng-container *wmContent=\"let msgs select 'donate';let lang = language\" scrollPositionRestoration=\"top\" gtag=\"donate\">\n\n  <h1>{{ completed ? (msgs.thanks || 'Thank You 🙏🏻') : (msgs.title || 'Contribute to Wizdm') }}</h1>\n\n  <p [wm-readme]=\"msgs.intro\">\n    Thanks to your generosity we are able to cover for the costs exceeding the free quotas of the various online services the project is based upon.\n  </p>\n\n  <!-- Use the form as a StripeElements container using the current locale -->\n  <form [StripeElements]=\"lang\" fxLayout=\"column\" fxLayoutAlign=\"center stretch\" fxLayoutGap=\"16px\" (ngSubmit)=\"pay(stripe)\" #form=\"ngForm\">\n\n    <!-- Name -->\n    <mat-form-field>\n      <mat-label>{{ msgs.form?.name?.label || 'Name' }}</mat-label>\n      <input matInput [(ngModel)]=\"name\" name=\"name\" required [disabled]=\"!ready || progress\" #formName=\"ngModel\">\n      <mat-error *ngIf=\"!formName.valid\">{{ msgs.form?.name?.error || 'Please provide your name' }}</mat-error>\n      <mat-hint>{{ msgs.form?.name?.hint || 'Your name here' }}</mat-hint>\n    </mat-form-field>\n\n    <!-- Email -->\n    <mat-form-field>\n      <mat-label>{{ msgs.form?.email?.label || 'Email' }}</mat-label>\n      <input matInput [(ngModel)]=\"email\" name=\"email\" email required [disabled]=\"!ready || progress\" #formEmail=\"ngModel\">\n      <mat-error *ngIf=\"!formEmail.valid\">{{ msgs.form?.email?.error || 'Please provide a valid email' }}</mat-error>\n      <mat-hint>{{ msgs.form?.email?.hint || 'We\\'ll send you the rececipt here' }}</mat-hint>\n    </mat-form-field>\n\n    <!-- Amount -->\n    <mat-form-field floatLabel='always'>\n      <mat-label>{{ msgs.form?.amount?.label || 'Amount' }}</mat-label>\n\n      <!-- Fixed amount options -->\n      <mat-button-toggle-group [(ngModel)]=\"amount\" name=\"amount\">\n\n        <!-- Pre-defined options -->\n        <mat-button-toggle *ngFor=\"let option of msgs.form?.amount?.options || defaultAmoutOptions\" (mousedown)=\"false\" [value]=\"option.value\">{{ option.label }}</mat-button-toggle>\n        \n        <!-- Variable amount option -->\n        <mat-button-toggle (mousedown)=\"false\" value=\"\">{{ msgs?.form?.amount?.custom || 'Other:' }}&nbsp;</mat-button-toggle>\n\n        <input matInput [(ngModel)]=\"amount\" name=\"amount\" required autocomplete=\"off\" pattern=\"\\d*\" style=\"text-align: center;\"\n                        [placeholder]=\"msgs.form?.amount?.placeholder || 'Enter the amount'\" \n                        [disabled]=\"!ready || progress\" #formAmount=\"ngModel\" />\n\n      </mat-button-toggle-group>\n\n      <mat-hint>{{ msgs.form?.amout?.hint || 'Choose the amount' }}</mat-hint>\n      <mat-error *ngIf=\"!formAmount.valid\">{{ msgs.form?.amount?.error || 'Please choose a proper amount' }}</mat-error>\n\n      <!-- Currency switch button -->\n      <button mat-icon-button matSuffix matTooltip=\"Switch currency\" (mousedown)=\"false\" (click)=\"toggleCurrency()\" [disabled]=\"formAmount.disabled\" type=\"button\">\n        <mat-icon inline fontSet=\"fas\" [fontIcon]=\"currency === 'eur' ? 'fa-euro-sign' : 'fa-dollar-sign'\"></mat-icon>\n      </button> \n      \n    </mat-form-field>\n\n    <!-- Credit card info -->\n    <mat-form-field>\n      <mat-label>{{ msgs.form?.card.label || 'Credit card' }}</mat-label>\n      <wm-stripe-card matStripe hidePostalCode name=\"card\" required \n                      [(ngModel)]=\"card\" \n                      [disabled]=\"!ready || progress\" \n                      [styleBase]=\"(autoMode$ | async) || 'auto'\"\n                      (ready)=\"ready = $event\" #formCard>\n      </wm-stripe-card>\n      <mat-error *ngIf=\"formCard.error\">{{ formCard.error.message }}</mat-error>\n      <mat-hint>{{ msgs.form?.card?.hint || 'Powered by Stripe' }}</mat-hint>\n    </mat-form-field>\n\n    <!-- Payment error message -->\n    <p class=\"mat-error\" *ngIf=\"error\" @error>{{ error }}</p>\n\n    <!-- Submit button -->\n    <button mat-flat-button type=\"submit\" color=\"primary\" [disabled]=\"!form.valid || !ready || progress\">\n      <mat-progress-spinner mode=\"indeterminate\" diameter=\"30\" *ngIf=\"progress\"></mat-progress-spinner>\n      <span>{{ msgs.form?.action || 'Donate Now' }}</span>\n    </button>\n\n  </form>\n\n</ng-container>\n","import { StripeElementsDirective, StripeElementDirective, StripeControlDirective, computeBaseStyle } from '@wizdm/stripe/elements';\nimport { Directive, Component, OnInit, OnChanges, Optional, forwardRef, Input, ElementRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nimport type { StripeElementStyleVariant } from '@stripe/stripe-js';\n\n/** Bridge with the Angular's form API */\n@Directive({\n  selector: 'wm-stripe-card-number[ngModel], wm-stripe-card-number[formControl], wm-stripe-card-number[formControlName]',\n  providers: [\n    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => StripeCardNumberControl), multi: true },\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => StripeCardNumberControl), multi: true  }\n  ]\n})\nexport class StripeCardNumberControl extends StripeControlDirective<'cardNumber'> {}\n\n/** Stripe CardNumber Element for Angular */\n@Component({\n  selector: 'wm-stripe-card-number',\n  template: '',\n  providers: [\n    { provide: StripeElementDirective, useExisting: forwardRef(() => StripeCardNumber) }\n  ]\n})\nexport class StripeCardNumber extends StripeElementDirective<'cardNumber'> implements OnInit, OnChanges {\n\n  constructor(@Optional() elements: StripeElementsDirective, private ref: ElementRef<HTMLElement>) {\n    super('cardNumber', elements, ref);\n\n    // Hooks on CardElement specific events\n    this.forward( elm => {\n      \n      elm.on('change', value => this.valueChange.emit(this._value = value) );    \n      elm.on('escape', () => this.escapeChange.emit() );      \n    });\n  }\n\n  // Overrides the disabled getter to effectively return the status\n  get disabled(): boolean { return !!this.options.disabled; }\n \n  // Ovverrides the disable function forwarding the call to the StripeElement \n  public disable(disabled: boolean) {\n\n    this.disabled = disabled;\n    this.forward( elm => elm.update(this.options) );\n  }\n\n  // Initializes the element\n  ngOnInit() { this.init(this.options); }\n\n  // Updates the element on input changes\n  ngOnChanges() { this.forward( elm => elm.update(this.options) ); }\n\n  /** Element's custom base style.\n   * @see https://stripe.com/docs/js/appendix/style\n   * Setting this input value to 'auto' enables the automatic detection of the element's style */\n  @Input() set styleBase(value: StripeElementStyleVariant | 'auto') {\n    this.style.base = (value === 'auto') ? computeBaseStyle(this.ref.nativeElement) : value;\n  }\n\n  /** Element's custom complete style.\n   * @see https://stripe.com/docs/js/appendix/style */\n  @Input() set styleComplete(value: StripeElementStyleVariant) {\n    this.style.complete = value;\n  }\n  \n  /** Element's custom empty style.\n   * @see https://stripe.com/docs/js/appendix/style */\n  @Input() styleEmpty(value: StripeElementStyleVariant) {\n    this.style.empty = value;\n  }\n  \n  /** Element's custom invalid style.\n   * @see https://stripe.com/docs/js/appendix/style */\n  @Input() styleInvalid(value: StripeElementStyleVariant) {\n    this.style.invalid = value;\n  }\n\n  /** A placeholder text */\n  @Input() set placeholder(value: string) {\n    this.options.placeholder = value;\n  }\n\n  /** Disables the element */\n  @Input() set disabled(value: boolean) { \n    this.options.disabled = coerceBooleanProperty(value); \n  }\n}","import { StripeElementsDirective, STRIPE_ELEMENTS_OPTIONS } from './elements.directive';\nimport { PLATFORM_ID, NgModule, ModuleWithProviders, Inject } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport type { StripeElementsOptions } from '@stripe/stripe-js';\n\n@NgModule({\n  declarations: [ StripeElementsDirective ],\n  exports: [ StripeElementsDirective ]\n})\nexport class StripeElementsModule {\n\n  constructor(@Inject(PLATFORM_ID) platformId: Object) {\n\n    if( !isPlatformBrowser(platformId) ) {\n      throw new Error('StripeModule package supports Browsers only');\n    }\n  }\n\n  static init(options: StripeElementsOptions): ModuleWithProviders<StripeElementsModule> {\n    return {\n      ngModule: StripeElementsModule,\n      /** Provides the global StripeElementsOptions object */\n      providers: [ { provide: STRIPE_ELEMENTS_OPTIONS, useValue: options } ]\n    };\n  } \n}\n","import { AbstractControl, ControlValueAccessor, Validator, ValidationErrors } from '@angular/forms';\nimport { StripeElementDirective } from './element.directive';\nimport { Directive, OnDestroy } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport type { StripeElementType } from '@stripe/stripe-js';\n\n/** @dynamic\n * Base class bridging the StripeElement with the Angular's form API implementing both a ControlValueAccessor\n * and a sync Validator enabling the use with FormControl\n */\n@Directive()\nexport class StripeControlDirective<T extends Exclude<StripeElementType, 'paymentRequestButton'>> \n  implements ControlValueAccessor, Validator, OnDestroy {\n\n  private sub = new Subscription(); \n\n  constructor(readonly element: StripeElementDirective<T>) {}\n\n  ngOnDestroy() { this.sub.unsubscribe(); }\n\n  /** \n   * Called by the forms API to write to the view when programmatic changes from model to view are requested. \n   * NOTE: Only clearing the control is allowed\n   */\n  writeValue(value: any): void {\n\n    if(!value) { this.element.clear(); }\n  }  \n\n  /** \n   * Function that is called by the forms API when the control status changes to or from 'DISABLED'. \n   * Depending on the status, it enables or disables the appropriate DOM element. \n   */\n  setDisabledState(disabled: boolean): void {\n\n    this.element.disable(disabled);\n  }\n\n  /** \n   * Registers a callback function that is called when the control's value changes in the UI. \n   * The value passed along the FormControl is the stripe Element instance to be used in the\n   * payment_method object to setup or confirm the payment.\n   */\n  registerOnChange(fn: (_:any) => void): void {\n\n    this.sub.add( this.element.valueChange.subscribe( value => fn(value.complete ? this.element.instance : null) ) );\n  }\n\n  /** Registers a callback function is called by the forms API on initialization to update the form model on blur. */\n  registerOnTouched(fn: () => void): void {\n\n    this.sub.add( this.element.blurChange.subscribe( () => fn() ) );\n  }\n\n  /** Performs synchronous validation against the provided control. */\n  validate(control: AbstractControl): ValidationErrors | null {\n\n    // Whenever the element is complete...\n    if(this.element.complete) {\n      // Checks for errors\n      const errorType = this.element.error && this.element.error.type;\n      // Translates the StripeError into a ValidationError passing along the message\n      return errorType ? { [errorType]: this.element.error.message } : null;\n    }\n\n    return { required: true };\n  }\n}","import { StripeElementsDirective, StripeElementDirective, StripeControlDirective, computeBaseStyle } from '@wizdm/stripe/elements';\nimport { Directive, Component, OnInit, OnChanges, Optional, forwardRef, Input, ElementRef } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\nimport type { StripeCardElementOptions, StripeElementStyleVariant } from '@stripe/stripe-js';\n\n/** Bridge with the Angular's form API */\n@Directive({\n  selector: 'wm-stripe-card[ngModel], wm-stripe-card[formControl], wm-stripe-card[formControlName]',\n  providers: [\n    { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => StripeCardControl), multi: true },\n    { provide: NG_VALIDATORS, useExisting: forwardRef(() => StripeCardControl), multi: true  }\n  ]\n})\nexport class StripeCardControl extends StripeControlDirective<'card'> {}\n\n/** Stripe Card Element for Angular */\n@Component({\n  selector: 'wm-stripe-card',\n  template: '',\n  providers: [\n    { provide: StripeElementDirective, useExisting: forwardRef(() => StripeCard) }\n  ]\n})\nexport class StripeCard extends StripeElementDirective<'card'> implements OnInit, OnChanges {\n\n  constructor(@Optional() elements: StripeElementsDirective, private ref: ElementRef<HTMLElement>) {\n    super('card', elements, ref);\n\n    // Hooks on CardElement specific events\n    this.forward( elm => {\n      \n      elm.on('change', value => this.valueChange.emit(this._value = value) );    \n      elm.on('escape', () => this.escapeChange.emit() );      \n    });\n  }\n\n  // Overrides the disabled getter to effectively return the status\n  get disabled(): boolean { return !!this.options.disabled; }\n \n  // Ovverrides the disable function forwarding the call to the StripeElement \n  public disable(disabled: boolean) {\n\n    this.disabled = disabled;\n    this.forward( elm => elm.update(this.options) );\n  }\n\n  // Initializes the element\n  ngOnInit() { this.init(this.options); }\n\n  // Updates the element on input changes\n  ngOnChanges() { this.forward( elm => elm.update(this.options) ); }\n\n  /** Element's custom base style.\n   * @see https://stripe.com/docs/js/appendix/style\n   * Setting this input value to 'auto' enables the automatic detection of the element's style */\n  @Input() set styleBase(value: StripeElementStyleVariant | 'auto') {\n    this.style.base = (value === 'auto') ? computeBaseStyle(this.ref.nativeElement) : value;\n  }\n\n  /** Element's custom complete style.\n   * @see https://stripe.com/docs/js/appendix/style */\n  @Input() set styleComplete(value: StripeElementStyleVariant) {\n    this.style.complete = value;\n  }\n  \n  /** Element's custom empty style.\n   * @see https://stripe.com/docs/js/appendix/style */\n  @Input() styleEmpty(value: StripeElementStyleVariant) {\n    this.style.empty = value;\n  }\n  \n  /** Element's custom invalid style.\n   * @see https://stripe.com/docs/js/appendix/style */\n  @Input() styleInvalid(value: StripeElementStyleVariant) {\n    this.style.invalid = value;\n  }\n\n  /** Hides the card icon */\n  @Input() set hideIcon(value: boolean) { \n    this.options.hideIcon = coerceBooleanProperty(value); \n  }\n\n  /** Hides the postal code */\n  @Input() set hidePostalCode(value: boolean) { \n    this.options.hidePostalCode = coerceBooleanProperty(value); \n  }\n\n  /** Selects the icon style */\n  @Input() set iconStyle(value: StripeCardElementOptions['iconStyle']) {\n    this.options.iconStyle = value;\n  }\n\n  /** Disables the element */\n  @Input() set disabled(value: boolean) { \n    this.options.disabled = coerceBooleanProperty(value); \n  }\n}"]}