{"version":3,"sources":["webpack:///wizdm/src/app/pages/profile/profile.module.ts","webpack:///wizdm/src/app/pages/profile/profile.service.ts","webpack:///wizdm/src/app/navigator/actionbar/index.ts","webpack:///wizdm/src/app/pages/profile/profile.component.ts","webpack:///wizdm/src/app/pages/profile/profile.component.html"],"names":["routes","path","content","component","canActivate","ProfileModule","forChild","ProfileService","profile","router","route","state","data$","pipe","data","redirect","url","replace","_","trail","userName","parseUrl","ProfileComponent","user","user$","paramMap","params","fromUserName","get","fromUserId","uid"],"mappings":"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","file":"pages-profile-profile-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ContentRouterModule, RoutesWithContent } from '@wizdm/content';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { AvatarModule } from '@wizdm/elements/avatar';\nimport { IconModule } from '@wizdm/elements/icon';\nimport { ButtonChangerModule } from '@wizdm/elements/button';\nimport { ActionbarModule } from 'app/navigator/actionbar';\nimport { ScrollingModule } from 'app/utils/scrolling';\nimport { ProfileService } from './profile.service';\nimport { ProfileComponent } from './profile.component';\n\nconst routes: RoutesWithContent = [\n  {\n    path: '',\n    content: 'profile',\n    component: ProfileComponent,\n    canActivate: [ ProfileService ]\n  }\n];\n\n@NgModule({\n  declarations: [ ProfileComponent ],\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatButtonModule,\n    AvatarModule,\n    IconModule,\n    ButtonChangerModule,\n    ScrollingModule,\n    ActionbarModule,\n    ContentRouterModule.forChild(routes)\n  ],\n  providers: [ ProfileService ]\n})\nexport class ProfileModule { }\n","import { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { UserProfile } from 'app/utils/user';\nimport { take, map } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class ProfileService implements CanActivate {\n\n  constructor(private profile: UserProfile, private router: Router) { }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n\n    return this.profile.data$.pipe( take(1), map(\n      data => {\n\n        if(!data) { return true; }\n\n        const redirect = state.url.replace(/@me(\\/|$)/, (_, trail) => {\n          return '@' + data.userName + trail;\n        });\n\n        return redirect !== state.url ? this.router.parseUrl(redirect) : true;\n      }\n    ));\n  }\n}","export * from './action.component';\nexport * from './actionbar.directive';\nexport * from './actionbar.module';","import { UserData, UserProfile } from 'app/utils/user';\nimport { ActivatedRoute } from '@angular/router';\nimport { Component } from '@angular/core';\nimport { switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'wm-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent  {\n\n  readonly user$: Observable<UserData>;\n\n  public get me(): string { return this.user.uid; }\n\n  constructor(readonly user: UserProfile, route: ActivatedRoute) { \n\n    this.user$ = route.paramMap.pipe( switchMap( params => \n      user.fromUserName(params.get('userName')) || \n      user.fromUserId(params.get('userId'))\n    ));\n  }\n}\n","\n<!-- Localized content -->\n<ng-container *wmContent=\"let msgs select 'profile'\" scrollPositionRestoration=\"top\" gtag=\"profile\">\n\n  <!-- Resolves user's data -->\n  <div class=\"banner\" *ngIf=\"user$ | async as data\"\n       fxLayout=\"row\" fxLayoutAlign=\"start start\" \n       fxLayout.lt-sm=\"column\" fxLayoutAlign.lt-sm=\"start center\">\n\n    <!-- Action Bar (projected in the top toolbar) -->\n    <ng-template wmActionbar let-mobile=\"isMobile\">\n\n      <!-- Edit profile button (my profile) -->\n      <button mat-stroked-button *ngIf=\"data.id === me\"\n              type.lt-sm=\"icon\"\n              color=\"primary\" \n              class=\"edit\" \n              [routerLink]=\"msgs.actions?.edit?.link || '/settings'\">\n        \n        <!-- Use an icon button on small screens -->\n        <wm-icon *ngIf=\"mobile; else editProfile\" [icon]=\"msgs.actions?.edit?.icon || 'edit'\"></wm-icon>\n\n        <!-- Use a stroked button on large screens -->\n        <ng-template #editProfile>{{ msgs.actions?.edit?.caption || 'Edit profile' }}</ng-template>\n    \n      </button>\n\n    </ng-template>\n\n    <!-- User's picture -->\n    <wm-avatar class=\"photo\" [src]=\"data.photo\" color=\"primary\" shape=\"squared\"></wm-avatar>\n\n    <!-- User's name and bio -->\n    <div class=\"text\" fxLayout=\"column\">\n\n      <div class=\"title\" fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\n\n        <!-- Full User's name -->\n        <h1 ngClass.gt-xs=\"mat-display-1\">{{ data.fullName || data.name }}</h1>\n\n        <!-- Message button (not my profile) -->\n        <button mat-flat-button type.lt-sm=\"mini-fab\" color=\"primary\" class=\"edit\" \n                routerLink=\"/chat\" [queryParams]=\"{ with: data.userName }\"\n                *ngIf=\"data.id !== me\">\n\n          <!-- Always display an icon small/large screens -->\n          <wm-icon [icon]=\"msgs.actions?.message?.icon || 'chat_bubble_outline'\"></wm-icon>\n\n          <!-- No text for small screens -->\n          <span fxHide.lt-sm>{{ msgs.actions?.message?.caption || 'Message' }}</span>\n              \n        </button>\n      \n      </div>\n\n      <!-- User's location -->\n      <span class=\"location\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        \n        <wm-icon [icon]=\"msgs.location?.icon || 'location_on'\" inline></wm-icon>\n\n        {{ data.location || msgs.location?.placeholder || 'Planet Earth' }}\n\n      </span>\n\n      <!-- User's bio -->\n      <div class=\"wrapper\"><p>{{ data.bio || msgs.bio?.placeholder || 'Searching for wizdm' }}</p></div>\n\n    </div>\n\n  </div>\n\n</ng-container>\n"]}