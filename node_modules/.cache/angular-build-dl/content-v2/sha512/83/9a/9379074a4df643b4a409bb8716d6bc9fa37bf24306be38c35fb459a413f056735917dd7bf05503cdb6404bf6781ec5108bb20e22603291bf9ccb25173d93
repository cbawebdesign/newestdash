{"version":3,"sources":["./wizdm/src/app/navigator/toolbar/index.ts","./wizdm/src/app/navigator/toolbar/toolbar.module.ts","./wizdm/src/app/navigator/footer/sticky-footer.directive.ts","./wizdm/src/app/pages/chat/chat.animations.ts","./wizdm/src/app/pages/chat/composer/index.ts","./wizdm/src/app/navigator/footer/index.ts","./wizdm/src/app/pages/chat/conversation/conversation.component.ts","./wizdm/src/app/pages/chat/conversation/conversation.component.html","./wizdm/src/app/pages/chat/chat.module.ts","./connect/src/lib/database/pipes/pipes.pipe.ts","./wizdm/src/app/pages/chat/chat.component.ts","./wizdm/src/app/pages/chat/chat.component.html","./elements/src/lib/balloon/index.ts","./elements/src/lib/balloon/balloon.module.ts","./wizdm/src/app/pages/chat/composer/composer.component.ts","./wizdm/src/app/pages/chat/composer/composer.component.html","./wizdm/src/app/pages/chat/message/message.module.ts","./wizdm/src/app/navigator/toolbar/toolbar.directive.ts","./wizdm/src/app/pages/chat/conversation/index.ts","./wizdm/src/app/pages/chat/conversation/conversation.module.ts","./wizdm/src/app/pages/chat/composer/composer.module.ts","./wizdm/src/app/pages/chat/message/index.ts","./elements/src/lib/balloon/balloon.component.ts","./elements/src/lib/balloon/balloon.component.html","./wizdm/src/app/pages/chat/chat.service.ts","./wizdm/src/app/pages/chat/message/message.component.ts","./wizdm/src/app/pages/chat/message/message.component.html","./connect/src/lib/database/pipes/index.ts","./connect/src/lib/database/pipes/pipes.module.ts","./wizdm/src/app/navigator/footer/sticky-footer.module.ts"],"names":[],"mappings":"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","file":"pages-chat-chat-module-es2015.js","sourcesContent":["export * from './toolbar.directive';\nexport * from './toolbar.module';","import { NgModule } from '@angular/core';\nimport { ToolbarDirective } from './toolbar.directive';\n\n@NgModule({\n  declarations: [ ToolbarDirective ],\n  exports: [ ToolbarDirective ]\n})\nexport class ToolbarModule { }\n","import { Directive, TemplateRef, OnInit, OnDestroy } from '@angular/core';\nimport { TeleportService } from '@wizdm/teleport';\n\n@Directive({\n  selector: 'ng-template[wmFooter]'\n})\nexport class StickyFooterDirective implements OnInit, OnDestroy {\n\n  constructor(private teleport: TeleportService, private template: TemplateRef<any>) { }\n\n  // Teleports the template to the 'footer' portal\n  ngOnInit() { this.teleport.activate('footer', this.template); }\n\n  // Clears the 'footer' portal\n  ngOnDestroy() { this.teleport.clear('footer', this.template); }\n}\n","import { trigger, state, animate, style, transition, keyframes, query, stagger } from '@angular/animations';\n\nconst $timing = '450ms cubic-bezier(0.8, -0.5, 0.2, 1.5)';\n\nexport let $animations = [\n\n  trigger('pop', [\n    transition(':enter', [\n      style({ transform: 'scale(0.5)', opacity: 0 }),\n      animate($timing, style('*'))\n    ]),\n    transition(':leave', \n      animate($timing , \n        style({ transform: 'scale(0.5)', opacity: 0 })\n      )\n    )\n  ])\n];","export * from './composer.component';\nexport * from './composer.module';","export * from './footer.component';\nexport * from './footer.module';\n\nexport * from './sticky-footer.directive';\nexport * from './sticky-footer.module';","import { Component, Input, Output, EventEmitter, ViewChild, HostListener } from '@angular/core';\nimport { where, orderBy, startAfter, stream, limit } from '@wizdm/connect/database/collection/operators';\nimport { map, startWith, switchMap, shareReplay, distinctUntilChanged } from 'rxjs/operators';\nimport { QueryDocumentSnapshot, DatabaseCollection } from '@wizdm/connect/database/collection';\nimport { DatabaseService, Timestamp } from '@wizdm/connect/database';\nimport { DatabaseDocument } from '@wizdm/connect/database/document';\nimport { UserProfile, UserData } from 'app/utils/user';\nimport { ConversationData, MessageData } from '../chat-types';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { ThemePalette } from '@angular/material/core'\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'wm-conversation',\n  templateUrl: './conversation.component.html',\n  styleUrls: ['./conversation.component.scss'],\n  host: {\n    '[attr.selected]' : 'highlight',\n    '[attr.color]' : 'color'\n  }\n})\nexport class Conversation extends DatabaseDocument<ConversationData> {\n\n  private thread$: DatabaseCollection<MessageData>;\n  private data: ConversationData;\n\n  /** The conversation data */\n  public data$: Observable<ConversationData>;\n  /** The sender profile */\n  public sender$: Observable<UserData>;\n  /** The last message */\n  public last$: Observable<MessageData>;\n  /** The unread messages count */\n  public unread$: Observable<number>;\n\n  /** The conversation id */\n  get id(): string { return this.data.id; }\n  /** The current user's id */\n  get me(): string { return this.user.uid; }\n\n  get deleting(): boolean { return this._deleting; }\n  private _deleting: boolean = false;\n\n  /** Computes the unknown user id appending the conversation id */\n  get unknownUser(): string { return `unknown-${this.data.id || '0'}`; }\n\n  /** Returns the unread count label */\n  public unreadCount(value: number): string {\n    return value > 10 ? '10+' : value?.toString();\n  }\n\n  constructor(db: DatabaseService, private user: UserProfile) {\n    super(db);\n  }\n\n  /** Highlight the conversation */\n  @Input() highlight: boolean;\n\n  /** Highlighting color */\n  @Input() color: ThemePalette;\n\n  /** Shows the unread message counter */\n  @Input() showUnread: boolean;\n\n  @Input() set content(conv: QueryDocumentSnapshot<ConversationData>) {\n\n    // Skips useless changes\n    if(conv && conv.id === this.ref?.id) { return; }\n    \n    // Unwraps the document data from the snapshot\n    this.data = this.unwrap(conv);\n\n    // Streams new data as an observable\n    this.data$ = this.stream().pipe( startWith(this.data), shareReplay(1) );\n    \n    // The conversation's messages thread\n    this.thread$ = this.collection<MessageData>('messages');\n\n    // Assumes the sender being the first recipient differing from the current user\n    const senderId = this.data.recipients.find(id => id !== this.me) || 'unknown';\n\n    // Resolves the sender user profile falling back to an unknown userName including the conversation id\n    this.sender$ = this.user.fromUserId( senderId ).pipe( map( data => data || { userName: this.unknownUser } ) );\n\n    // Resolves the last message in the thread\n    this.last$ = this.thread$.stream( qf => qf.orderBy('created').limitToLast(1) ).pipe( \n      // Gets the last message\n      map( msgs => msgs[0] ),\n      // Shares the same result to multiple subscribers\n      shareReplay(1)\n    );\n\n    // Resolves the unread messages count up to 10+ unread messages\n    this.unread$ = this.data$.pipe( \n      // Streams the conversation data getting the user's specific lastRead timestamp that will be used as a cursor\n      map<ConversationData, Timestamp>( data => data?.status?.[this.me]?.lastRead ), \n      // Filters unchanged values\n      distinctUntilChanged( (x, y) => !!x && !!y && x.isEqual(y) ), \n      // Streams the messages...\n      switchMap( lastRead => this.thread$.pipe( \n        // Selects sender messages after the lastRead timestamp up to 11 messages\n        where('sender', '==', senderId), orderBy('created'), startAfter(lastRead), limit(11), stream(this.db.zone), \n        // Turns the results lenght into the unread counter\n        map( msgs => msgs.length ),\n        // Shares the same result to all subscribers\n        shareReplay(1) \n      ))\n    );\n  }\n\n  public delete() {\n\n    // Notifies the beginning of the process.\n    this.deletingChange.emit(this._deleting = true);\n\n    // Starts by wiping messages in batches of 100\n    return this.thread$.wipe( qf => qf.where('sender', '==', this.me).limit(100) ).then( count => {\n\n      console.log('Messages deleted', count);\n      // Atomically remove my id from the recipients array\n      return this.update( { recipients: this.db.arrayRemove(this.me) as any }).then( () => {\n        // Attempts to delete the conversation within a transaction\n        return this.db.transaction( trx => {\n          // Gets the conversartion data first\n          return trx.get(this.ref).then( data => {\n            // Deletes the conversation whenever the recipients array is empty\n            if(data?.recipients?.length <= 0) { trx.delete(this.ref); }\n          });\n        });\n      });\n      // At last, reports the deletion completed\n    }).then( () => this.deletingChange.emit(this._deleting = false) );\n  }\n\n  // Gets the menu trigger\n  @ViewChild(MatMenuTrigger) private menuTrigger: MatMenuTrigger;\n  @HostListener('contextmenu') onContextMenu() {\n    // Opens the menu on contextmenu event  \n    this.menuTrigger?.openMenu();\n    // Prevents default\n    return false;\n  }\n\n  @Output('deleting') deletingChange = new EventEmitter<boolean>();\n}\n","\n<!-- Use a button for hover/focus/ripple effects -->\n<button mat-button routerLink=\".\" [queryParams]=\"{ with: (sender$ | async)?.userName }\">\n\n  <!-- Gets the localized content -->\n  <div *wmContent=\"let msgs select 'chat.conversation'\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n\n    <!-- Displays the avatar of the sender on the left -->\n    <div fxFlex=\"0 0 auto\" [matBadge]=\"unreadCount(unread$ | async)\" [matBadgeHidden]=\"!showUnread || (unread$ | async) <= 0\" matBadgeSize=\"small\">\n\n      <wm-avatar [src]=\"(sender$ | async)?.photo\" [class.skeleton-loading]=\"!(sender$ | async)\" color=\"primary\"></wm-avatar>\n      \n    </div>\n\n    <!-- Displays the conversation body on the right -->\n    <div fxFlex=\"1 1 auto\" fxLayout=\"column\" fxLayoutAlign=\"start stretch\" class=\"content\">\n\n      <!-- First body line -->\n      <div fxLayout=\"row\" fxLayoutGap=\"8px\">\n\n        <!-- Sender full name -->\n        <div fxFlex=\"1 1 auto\" class=\"name mat-title text\" [class.skeleton-loading]=\"!(sender$ | async)\">{{\n\n          (sender$ | async) ? ((sender$ | async).fullName || msgs.unknownUser || 'Unknown user') : ''\n          \n        }}</div>\n\n        <!-- Last message time (moment calendar) -->\n        <time fxFlex=\"0 0 auto\" class=\"time mat-small\">{{ \n\n          ((last$ | async) || data) | updatedTime | calendar:msgs.timeFormat || {\n            sameDay: \"LT\",\n            lastDay: \"[Yesterday]\",\n            lastWeek: \"dddd\",\n            sameElse: \"L\"\n          }\n\n        }}</time>\n\n      </div>\n\n      <!-- Deletion progress bar -->\n      <ng-template #deletingProgress>\n        <mat-progress-bar class=\"mat-body\" style=\"height: 1em\" color=\"primary\" mode=\"indeterminate\"></mat-progress-bar>        \n      </ng-template>\n\n      <!-- Second body line -->\n      <div fxLayout=\"row\" *ngIf=\"!deleting; else deletingProgress\">\n\n        <!-- Last message body -->\n        <div fxFlex=\"1 1 auto\" class=\"last mat-body text\" \n                               [class.unread]=\"showUnread && (unread$ | async) > 0\" \n                               [class.skeleton-loading]=\"!(sender$ | async)\"\n                               [wm-emoji-text]=\"(last$ | async)?.body\"></div>\n      \n        <!-- Options menu -->\n        <mat-icon fxFlex=\"0 0 auto\" class=\"menu\" [matMenuTriggerFor]=\"menu\" (click)=\"$event.stopPropagation()\">expand_more</mat-icon>\n        <mat-menu #menu=\"matMenu\">\n\n          <!-- Contact info -->\n          <button mat-menu-item routerLink=\"/@{{ (sender$ | async)?.userName }}\">{{ msgs.info?.label || 'Contact info' }}</button>\n\n          <!-- Delete chat -->\n          <button mat-menu-item (click)=\"confirmDelete.open()\">{{ msgs.delete?.label || 'Delete chat' }}</button>\n\n          <!-- Confirm deleting chat dialog -->\n          <wm-dialog #confirmDelete (closedChange)=\"$event && delete()\">\n\n            <h2 mat-dialog-title><b>{{ msgs.confirmDelete?.title || 'Deleting chat' }}</b></h2>\n          \n            <mat-dialog-content [wm-readme]=\"msgs.confirmDelete?.message\">\n              You're about to <b>delete</b> this conversation.<br>Are you sure?\n            </mat-dialog-content>\n          \n            <mat-dialog-actions align=\"end\">\n              <button mat-button color=\"primary\" [mat-dialog-close]=\"false\" cdkFocusInitial>{{ msgs.confirmDelete?.cancel || 'Abort' }}</button>\n              <button mat-button color=\"warn\" [mat-dialog-close]=\"true\">{{ msgs.confirmDelete?.ok || 'Proceed' }}</button>\n            </mat-dialog-actions>\n\n          </wm-dialog>\n\n        </mat-menu>\n      \n      </div>\n    \n    </div>\n\n  </div>\n\n</button>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatListModule } from '@angular/material/list';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { ContentRouterModule, RoutesWithContent } from '@wizdm/content';\nimport { RedirectModule } from '@wizdm/redirect';\nimport { GtagModule } from '@wizdm/gtag';\nimport { IconModule } from '@wizdm/elements/icon';\nimport { ButtonChangerModule } from '@wizdm/elements/button';\nimport { PipesModule } from '@wizdm/connect/database/pipes';\nimport { ReadmeModule } from '@wizdm/readme';\nimport { AvatarModule } from '@wizdm/elements/avatar';\nimport { BalloonModule } from '@wizdm/elements/balloon';\nimport { DialogModule } from '@wizdm/elements/dialog';\nimport { TeleportModule } from '@wizdm/teleport';\nimport { ActionbarModule } from 'app/navigator/actionbar';\nimport { SidenavModule } from 'app/navigator/sidenav';\nimport { ToolbarModule } from 'app/navigator/toolbar';\nimport { StickyFooterModule } from 'app/navigator/footer';\nimport { FabModule } from 'app/navigator/fab';\nimport { MomentPipesModule } from '@wizdm/pipes/moment';\nimport { CanLeaveModule, CanLeaveGuard } from 'app/utils/can-leave';\nimport { AuthGuard, emailVerified } from 'app/utils/auth-guard';\nimport { ValidProfile } from 'app/utils/user';\nimport { ConversationModule } from './conversation';\nimport { MessageModule } from './message';\nimport { ComposerModule } from './composer';\nimport { ChatService } from './chat.service';\nimport { ChatComponent } from './chat.component';\n\nconst routes: RoutesWithContent = [\n  {\n    path: '',\n    content: ['chat', 'emoji-keys'],\n    component: ChatComponent,\n    canActivate: [ AuthGuard, ValidProfile, ChatService ], data: { authGuardPipe: emailVerified },\n    canDeactivate: [ CanLeaveGuard ]\n  }\n];\n\n@NgModule({\n  declarations: [ ChatComponent ],\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatButtonModule,\n    MatListModule,\n    MatBadgeModule,\n    MatDividerModule,\n    MatProgressSpinnerModule,\n    RedirectModule,\n    PipesModule,\n    GtagModule,\n    IconModule, \n    ButtonChangerModule,\n    ReadmeModule,\n    AvatarModule,\n    BalloonModule,\n    DialogModule,\n    TeleportModule,\n    ActionbarModule,\n    SidenavModule,\n    ToolbarModule,\n    StickyFooterModule,\n    FabModule,\n    MomentPipesModule,\n    CanLeaveModule,\n    ConversationModule,\n    MessageModule,\n    ComposerModule,\n    ContentRouterModule.forChild(routes)\n  ]\n})\nexport class ChatModule { }\n","import { DocumentSnapshot, DocumentData } from '../document/types';\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { Timestamp } from '../database-application';\nimport { mapSnaphotData } from '../document/utils';\nimport { firestore } from 'firebase/app';\n\n@Pipe({ name: 'snapshotData' })\nexport class SnapshotDataPipe implements PipeTransform {\n\n  transform<T extends DocumentData>(value: DocumentSnapshot<T>): T {\n\n    return value instanceof firestore.DocumentSnapshot ? mapSnaphotData<T>(value) : value;\n  }\n}\n\n@Pipe({ name: 'timestamp' })\nexport class TimestampPipe implements PipeTransform {\n\n  transform(value: Timestamp): Date {\n\n    return value instanceof firestore.Timestamp ? value.toDate() : value;\n  }\n}\n\n@Pipe({ name: 'createdTime' })\nexport class CreatedTimePipe implements PipeTransform {\n\n  transform<T extends DocumentData>(value: T|DocumentSnapshot<T>): Date {\n\n    const data = value instanceof firestore.DocumentSnapshot ? mapSnaphotData<T>(value) : value;\n\n    return data?.created?.toDate();\n  }\n}\n\n@Pipe({ name: 'updatedTime' })\nexport class UpdatedTimePipe implements PipeTransform {\n\n  transform<T extends DocumentData>(value: T|DocumentSnapshot<T>): Date {\n\n    const data = value instanceof firestore.DocumentSnapshot ? mapSnaphotData<T>(value) : value;\n\n    return (data?.updated || data?.created)?.toDate();\n  }\n}\n","import { take, skip, startWith, map, tap, filter, expand, pluck, switchMap, distinctUntilChanged, shareReplay, takeUntil, delay, debounceTime } from 'rxjs/operators';\nimport { where, orderBy, startAfter, endBefore, snap, pageReverse, onSnapshot, docs } from '@wizdm/connect/database/collection/operators';\nimport { Component, AfterViewInit, OnDestroy, Inject, NgZone, ViewChildren, QueryList } from '@angular/core';\nimport { DatabaseCollection, QueryDocumentSnapshot } from '@wizdm/connect/database/collection';\nimport { ConversationData, ConversationFavorites, MessageData } from './chat-types';\nimport { Subscription, Observable, BehaviorSubject, of, combineLatest } from 'rxjs';\nimport { DatabaseDocument } from '@wizdm/connect/database/document';\nimport { UserProfile, UserData } from 'app/utils/user';\nimport { DatabaseService } from '@wizdm/connect/database';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ScrollObservable } from 'app/utils/scrolling';\nimport { runInZone, zoneStable } from '@wizdm/rxjs';\nimport { EmojiRegex } from '@wizdm/emoji/utils';\nimport { $animations } from './chat.animations';\nimport { Conversation } from './conversation/conversation.component';\nimport { Message } from './message/message.component';\n\n@Component({\n  selector: 'wm-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.scss'],\n  animations: $animations\n})\nexport class ChatComponent extends DatabaseCollection<ConversationData> implements AfterViewInit, OnDestroy {\n\n  // Conversation(s)\n  @ViewChildren(Conversation) conversationsList: QueryList<Conversation>;\n  private conversation: DatabaseDocument<ConversationData>;\n  /** Conversations observable (from DB) */\n  readonly conversations$: Observable<QueryDocumentSnapshot<ConversationData>[]>;\n  /** Active converastion Id  observable */  \n  readonly conversationId$: Observable<string>;\n  /** Active conversation observable */\n  readonly activeConversation$: Observable<QueryDocumentSnapshot<ConversationData>>;\n  \n  // Messages thread\n  @ViewChildren(Message) messagesList: QueryList<Message>;\n  private  thread: DatabaseCollection<MessageData>;\n  /** Active conversation's messages (from DB) */\n  readonly messages$: Observable<QueryDocumentSnapshot<MessageData>[]>;  \n  \n  private reload$ = new BehaviorSubject<void>(null);\n  public loading: boolean = true;\n  public browse: boolean = true;\n\n  public get deleting(): boolean { return this.deletingCount > 0; }\n  private deletingCount: number = 0;\n  \n  // Scrolling\n  readonly scrolled$: Observable<boolean>;\n  private  autoScroll: boolean = true;\n  \n  // Keys\n  private stats: ConversationFavorites = { \"😂\": 1, \"👋🏻\": 1, \"👍\": 1, \"💕\": 1, \"🙏\": 1 };\n  public  keys: string[];\n  public  text = \"\";\n\n  public get me(): string { return this.user.uid; }\n  private recipient: string = '';\n  \n  constructor(db: DatabaseService, private route: ActivatedRoute, private router: Router, private scroller: ScrollObservable, \n    private user: UserProfile<UserData>, @Inject(EmojiRegex) private regex: RegExp, private zone: NgZone) {\n\n    super(db, 'conversations');\n        \n    // Lists all my active conversations\n    this.conversations$ = this.reload$.pipe( switchMap( () => this.pipe( \n\n      // Selects all the conversations where recipients[] contains my user's id\n      where('recipients', 'array-contains', this.me), orderBy('created', 'desc'), \n\n      // Combines existing conversations with new comers\n      source => source.pipe( \n\n        // Gets the list of existing conversations and sort them by updated value. \n        // Note: we set the cursor apart to avoid messing up with the following queries \n        // since the conversation array will be shuffled\n        snap(), map( convs => ({ cursor: convs[0], convs: this.sortByUpdated(convs, 'desc') })),\n\n        // Appends new comers to the top of the list\n        expand( ({ cursor, convs }) => source.pipe(          \n          // Filters out the existing conversation to minimize reads\n          endBefore( cursor ),          \n          // Listens to new conversations\n          onSnapshot(zone),           \n          // Filters out unwanted emissions.\n          // Note: we exclude snapshots with pending writes to make sure timestamps are up to date\n          filter( snap => snap.size > 0 && !snap.metadata.hasPendingWrites ),          \n          // Gets the new documents when available\n          docs(), take(1),          \n          // Prepends the new comers to the existing ones\n          map( latest => ({ cursor: latest[0], convs: latest.concat(convs) }) )\n        )),\n        \n        // Gets rid of the cursor\n        pluck('convs')\n      ),\n      \n      // Replays to all subscribers\n      shareReplay(1)\n    )));\n\n    // Resolves the current conversation id from the query parameter\n    this.conversationId$ = route.queryParamMap.pipe(\n\n      // Extracts the @username from the route\n      map( params => params.get('with') || '' ), distinctUntilChanged(), delay(0),\n\n      // Resolves the user, if any\n      switchMap( userName => {\n\n        // Catches an unknown user first. This may be a result of:\n        // 1. a deleted conversation (where the user has been removed from the recipients)\n        // 2. a conversation with a user that no longer exists\n        if(userName.startsWith('unknown-')) { \n\n          // Resets the recipient\n          this.recipient = '';\n\n          // Returns the original conversation id\n          return of(userName.replace(/^unknown-/, '')); \n        }\n\n        // Go on with a known user\n        return user.fromUserName(userName).pipe( take(1), map( user => {\n\n          // Skips unexisting users\n          if(!user) { return this.recipient = ''; } \n\n          // Tracks the new recipient id\n          this.recipient = user.id;\n\n          // Computes the path for the requested conversation otherwise\n          return (this.me < user.id ? this.me.concat(user.id) : this.recipient.concat(this.me) );\n        }));\n      }),\n      // Filters unchanged values and replays to all subscribers\n      shareReplay(1)\n    );\n\n    // Resolves the active conversation\n    this.activeConversation$ = combineLatest(this.conversations$, this.conversationId$).pipe( \n      map( ([convs, id]) => convs?.find( conv => conv.id === id ) || {} as any) \n    );\n\n    // Paging observalbe to load the previous messages while scrolling up\n    const more$ = scroller.pipe( \n\n      // Triggers the previous page when approaching the top\n      map( scroll => scroll.top < 50 ),\n      \n      // Filters for truthfull changes\n      distinctUntilChanged(), filter( value => value ),\n      \n      // Asks for the next 20 messages\n      map( () => 20 ),\n      \n      // Shows the loading spinner every page\n      tap( () => this.loading = true )\n    );\n\n    // Streams up to page size messages from the selected conversation\n    this.messages$ = this.conversationId$.pipe( \n\n      // Stores the curernt conversation\n      map( id => this.conversation = id && this.document(id) ),\n      \n      // Gets the message thread\n      map( conv => this.thread = conv && conv.collection<MessageData>('messages') ),\n      \n      // Loads messages from the thread ordered by creation time\n      switchMap( thread => thread ? thread.pipe( orderBy('created'), \n        \n        // Combines existing messages with new ones\n        source => source.pipe( \n          \n          // Let's start by paging some existing messages\n          pageReverse(more$), \n          \n          // Perpare to append new coming messages\n          expand( paged => source.pipe(            \n            // Excludes existing messages\n            startAfter( paged[paged.length - 1] ), \n            // Listens for updates\n            onSnapshot(this.db.zone), \n            // Filters out unwanted emissions\n            filter( snap => snap.size > 0 && !snap.metadata.hasPendingWrites ),\n            // Gets the new messages and completes\n            docs(), take(1),\n            // Appends the new messages to the list\n            map( latest => paged.concat(latest) )\n          )),\n          // Always starts with an empty array to clear up messages when loading a new conversation\n          startWith([])\n        )\n        // Reverts to an empty array when no conversation is selected\n      ) : of([]) ),\n\n      // When done loading....\n      zoneStable( zone, () => {        \n        // Scrolls for the last message to be visible  \n        this.autoScroll && this.scrollToBottom();  \n        // Hides the loading spinner\n        this.loading = false; \n      }),\n      \n      // Replays to all subscribers\n      shareReplay(1)\n    );\n\n    /** Builds an observable telling if the view has been scrolled */\n    this.scrolled$ = scroller.pipe( \n\n      // Measure the scrolling distance from the bottom \n      map( scroll => scroll.bottom >= 50 ),\n      \n      // Distincts the value on changes only\n      distinctUntilChanged(),\n      \n      // Enables/disables the autoScroll accordingly\n      tap( scrolled => this.autoScroll = !scrolled ),\n      \n      // Run within angular zone\n      runInZone(this.zone)\n    );\n  }\n\n  ngAfterViewInit() {\n\n    // Syncronizes the status saved withing the selected conversation keeping track of the \n    // last read message timestamp for unread counting purposes\n    this.sub = this.conversationId$.pipe(\n\n      // Gets the latest status value from the actiev conversation\n      switchMap( id => this.fromId(id).pipe( take(1) ) ), map( data => data?.status?.[this.me] ),\n\n      // Loads the status from the active conversation\n      tap( status => {\n\n        // Debug\n        console.log('Loading', status);\n        // Gets the emoji usage stats from the conversation\n        this.stats = status?.favorites || this.stats;\n        // Updates the favorites emoji based on the new stat\n        this.keys = this.sortFavorites(this.stats);\n      }),\n\n      // Expands on the last message\n      expand( status => this.lastMessage().pipe(\n\n        // Stops saving new data when switching to another conversation\n        takeUntil(this.conversationId$.pipe(skip(1))),\n\n        // Extracts the last message timestamp\n        map( msg => msg?.created ),\n\n        // Ensures saving only updated data\n        filter( created => !!created && (!(status?.lastRead) || ( created > status.lastRead ))), \n\n        // Saves the new data\n        switchMap( lastRead => {\n          // Prepares a new status object saving the lastRead timestamp and the conversation favorites\n          const newStatus = { favorites: this.stats, lastRead };\n          // Debug\n          console.log('Saving data', newStatus);\n          // Saves the new data returning the new value for the next recursion\n          return this.conversation.merge({ status: { [this.me]: newStatus }} )\n            .then( () => newStatus );\n        }),\n\n        // Completes the emission\n        take(1)\n      ))\n\n    ).subscribe();\n  }\n\n  // Disposes of the subscriptions\n  ngOnDestroy() { this.sub.unsubscribe(); }\n  private sub: Subscription;\n\n  /** Returns the requested conversation observable provided the id falls among the active ones */\n  private fromId(id: string): Observable<ConversationData> {\n\n    // Waits until the view has been rendered\n    return this.zone.onStable.pipe( take(1),\n      // Catch the QueryList changes\n      switchMap( () => this.conversationsList.changes.pipe( startWith(null) ) ),\n      // Seeks for the requested conversation\n      map( () => this.conversationsList.find( conv => conv.id === id ) ), \n      // Filters out unwanted emissions\n      filter( conv => !!conv ), distinctUntilChanged( undefined, conv => conv.id ),\n      // Returns the child conversation's data observable\n      switchMap( conv => conv.data$ )\n    );\n  }\n\n  /** Returns the last message currently listed from the active conversation */\n  private lastMessage(): Observable<MessageData> {\n\n    // Waits until the view has been rendered\n    return this.zone.onStable.pipe( take(1), \n      // Catch the QueryList changes\n      switchMap( () => this.messagesList.changes.pipe( startWith(null) ) ),\n      // Seeks for the requested message data\n      map( () => this.messagesList.last?.data ), \n      // Filters out duplicates\n      distinctUntilChanged(),\n    );\n  }\n\n  /** Tracks the deletion of conversations */\n  public onDeleting(flag: boolean, id: string) {\n    \n    // Tracks how many conversations are in the proess of deleting\n    this.deletingCount = this.deletingCount + (flag ? 1 : -1);\n    // Once done...\n    if(this.deletingCount <= 0) {\n      // Resets the text\n      this.text = \"\";\n      // Reloads the page \n      this.reload();\n    }\n  }\n\n  /** Reloads the chat content */\n  public reload() {\n\n    // Starts by navigating to this very same route without any queryParameter. \n    // This will update reset the conversationId and the message thread\n    return this.router.navigate(['.'], { relativeTo: this.route, replaceUrl:  true })\n      // Reloads all the conversations from scratch next\n      .then( () => this.reload$.next() );\n  }\n\n  /** Scrolls te view to the bottom to make the latest message visible */\n  public scrollToBottom() {\n    this.scroller.scrollTo({ bottom: 0 });\n  }\n\n  /** Forces the view to scroll whenever the keyboard expanded */\n  public onKeyboardExpand() {\n    // Scrolls to bottom wheneve the autoScroll mode is enabled\n    this.autoScroll && this.scrollToBottom();\n  }\n\n  /** Send the current message */\n  public send(body: string) {    \n    // Updates the key usage statistics\n    this.updateFavorites(body);\n    // Sends the message adding it to the current conversation thread\n    this.thread.add({ body, sender: this.me, recipient: this.recipient }).then( () => {\n      // Enables automatic scrolling\n      this.autoScroll = true;\n      // Resets the last message text\n      this.text = \"\"; \n    });\n    // Prevents default\n    return false;\n  }\n\n  /** Sorts the favorite keys based on usage */\n  private sortFavorites(stats: ConversationFavorites): string[] {\n    return Object.keys(stats).sort( (a,b) => stats[b] - stats[a] );\n  }\n\n  /** Updates the favorite statistics upon the given message */\n  public updateFavorites(body: string) {\n\n    let match; let emojis = [];\n    while(match = this.regex.exec(body)) {\n\n      const key = match[0];\n\n      if(emojis.findIndex( emoji => emoji === key ) < 0) {\n\n        emojis.push(match[0]);\n\n        this.stats[key] = (this.stats[key] || 0) + 1;\n      }\n    }\n\n    if(emojis.length > 0) {\n      this.keys = this.sortFavorites(this.stats);\n    }\n  }\n\n\n  /** ngFor tracking function */\n  public trackById(data: QueryDocumentSnapshot<any>) { \n    return data.id; \n  }\n\n  /** Sort conversations based on their updated timestamp */\n  private sortByUpdated(data: QueryDocumentSnapshot<any>[], dir?: 'asc'|'desc'): QueryDocumentSnapshot<any>[] {\n\n    const _dir = dir === 'desc' ? -1 : 1;\n\n    return data.sort((a,b) => {\n\n      const aDate = a?.data().updated;\n      if(!aDate) { return _dir; }\n\n      const bDate = b?.data().updated;\n      if(!bDate) { return -_dir; }\n      \n      return bDate < aDate ? _dir : (bDate > aDate ? -_dir : 0);\n    });\n  }\n}\n","\n<!-- Loads the localized content -->\n<ng-container *wmContent=\"let msgs select 'chat'\" gtag=\"chat\">\n\n  <!-- Actionbar -->\n  <ng-template wmActionbar let-mobile=\"isMobile\">\n\n    <!-- New chat button -->\n    <button mat-stroked-button type.lt-sm=\"icon\" color=\"primary\" [routerLink]=\"msgs.conversation?.new?.link || '/explore/people'\">\n\n      <!-- Use an icon button on small screens -->\n      <wm-icon *ngIf=\"mobile; else newMessage\" [icon]=\"msgs.conversation?.new?.icon || 'add_comment'\"></wm-icon>\n\n      <!-- Use a stroked button on large screens -->\n      <ng-template #newMessage>{{ msgs.conversation?.new?.caption || 'New chat' }}</ng-template>\n\n    </button>\n\n    <!-- Notification's button -->\n    <!--button mat-icon-button *ngIf=\"unreadCount$ | async as unreadCount\" color=\"primary\">\n      <wm-icon icon=\"far:fa-bell\" [matBadge]=\"unreadCount\" matBadgeSize=\"small\"></wm-icon>\n    </button-->\n\n    <!-- Teleports to the side panel. Forced open on large screens -->\n    <ng-template wmSidenav [opened]=\"((conversations$ | async)?.length > 0) && (browse || !mobile)\" (openedChange)=\"browse = $event\" persist minWidth=\"280px\" maxWidth=\"350px\">\n\n      <!-- Resolves the active conversation -->\n      <ng-container *ngIf=\"activeConversation$ | async as activeConversation\">\n\n        <!-- Displays the active conversation on the toolbar on small screens -->\n        <ng-container *ngIf=\"mobile\">\n\n          <wm-conversation *wmToolbar [content]=\"activeConversation\" (deleting)=\"onDeleting($event, conv.id)\" (click)=\"browse = !browse\"></wm-conversation>\n\n        </ng-container>\n\n        <!-- List all the active conversations within the side panel -->\n        <wm-conversation *ngFor=\"let conv of conversations$ | async; trackBy: trackById\"\n                         color=\"primary\"\n                         [content]=\"conv\" \n                         [highlight]=\"conv.id === activeConversation.id\"\n                         [showUnread]=\"conv.id !== activeConversation.id\"\n                         (deleting)=\"onDeleting($event, conv.id)\"\n                         (click)=\"mobile && (browse = !browse)\">\n        </wm-conversation>\n\n      </ng-container>\n        \n    </ng-template><!-- Sidenav -->\n\n  </ng-template><!-- Actionbar -->\n\n  <!-- Message thread -->\n  <div fxFlex=\"100\" fxLayout=\"column\" fxLayoutAlign=\"end stretch\"> \n\n    <!-- Loading spinner -->\n    <div fxLayout=\"row\" fxLayoutAlign=\"center\" *ngIf=\"loading\">\n      <mat-spinner mode=\"indeterminate\" diameter=\"40\"></mat-spinner>\n    </div>\n\n    <ng-container *ngIf=\"messages$ | async as messages\"> \n\n      <!-- List all messages -->\n      <ng-container *ngFor=\"let msg of messages; let i = index; trackBy: trackById\">\n\n        <!-- Group messages by date (different day) -->\n        <ng-container *ngIf=\"i === 0 || (messages[i-1] | createdTime | moment:'D') !== (msg | createdTime | moment:'D')\">\n\n          <!-- Displays a balloon with the date -->\n          <wm-balloon fxFlexAlign=\"center\" class=\"group-label mat-elevation-z2\">{{ \n              \n            msg | createdTime | calendar:msgs.thread?.timeFormat || {\n              sameDay: \"[Today]\",\n              lastDay: \"[Yesterday]\",\n              lastWeek: \"dddd\",\n              sameElse: \"L\"\n            }\n\n          }}</wm-balloon>\n\n        </ng-container>\n\n        <!-- Displays the next message -->\n        <wm-message [thread]=\"(messages[i-1] | snapshotData)?.sender\" [message]=\"msg\"></wm-message>\n\n      </ng-container>\n\n    </ng-container>\n\n  </div>\n\n  <!-- FAB button for scrolling back -->\n  <ng-template wmFab=\"right bottom\">\n\n    <!-- Back to bottom button appearing when scrolled back enough -->\n    <button mat-mini-fab color=\"primary\" (click)=\"scrollToBottom()\" *ngIf=\"scrolled$ | async\" @pop>\n      <mat-icon>expand_more</mat-icon>\n    </button>\n\n  </ng-template>\n\n  <!-- Message composer on the navigator's sticky footer -->\n  <wm-composer *wmFooter [(value)]=\"text\" \n                         [keys]=\"keys\" \n                         [disabled]=\"!recipient || loading || deleting\"\n                         (expanded)=\"onKeyboardExpand()\" \n                         (send)=\"send($event)\">\n  </wm-composer> \n\n  <!-- Can Leave dialog -->\n  <wm-dialog *ngIf=\"msgs.canLeave as leave\" [dontLeave]=\"!!text\">\n\n    <h2 mat-dialog-title><b>{{ leave.title || 'Unsent message' }}</b></h2>\n  \n    <mat-dialog-content [wm-readme]=\"leave.message\">\n      You're about to leave the page without sending the last message.\n    </mat-dialog-content>\n  \n    <mat-dialog-actions align=\"end\">\n      <button mat-button color=\"warn\" [mat-dialog-close]=\"false\" cdkFocusInitial>{{ leave.cancel || 'Wait' }}</button>\n      <button mat-button color=\"primary\" [mat-dialog-close]=\"true\">{{ leave.ok || 'Proceed' }}</button>\n    </mat-dialog-actions>\n\n  </wm-dialog>\n\n</ng-container>\n\n","export * from './balloon.component';\nexport * from './balloon.module';","import { NgModule } from '@angular/core';\nimport { BalloonComponent } from './balloon.component';\n\n@NgModule({\n  imports: [ ],\n  declarations: [ BalloonComponent ],\n  exports: [ BalloonComponent ]\n})\nexport class BalloonModule { }","import { Component, Input, Output, EventEmitter, Inject, ViewChild } from '@angular/core';\nimport { MatExpansionPanel } from '@angular/material/expansion';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { HasTouchScreen } from 'app/utils/platform';\nimport { TypeinAdapter } from 'app/utils/textarea';\nimport { EmojiUtils } from '@wizdm/emoji/utils';\n\n@Component({\n  selector: 'wm-composer',\n  templateUrl: './composer.component.html',\n  styleUrls: ['./composer.component.scss'],\n  host: { \"class\": \"wm-composer\" }\n})\nexport class MessageComposer {\n\n  @ViewChild(MatExpansionPanel) private emojiKeysPanel: MatExpansionPanel;\n  @ViewChild(TypeinAdapter) private typeinAdapter: TypeinAdapter;\n\n  private _value: string;\n  \n  /** Input value */\n  @Input() \n  set value(value: string) { this.valueChange.emit(this._value = value); }\n  get value(): string { return this._value; }\n\n  /** Favorites keys */\n  @Input() keys: string[];\n\n  /** Disables the composer */\n  @Input() set disabled(value: boolean) { \n    \n    if( this._disabled = coerceBooleanProperty(value) ) { \n      // Force the panel closing when disabled\n      this.emojiKeysPanel?.close();\n    }\n  }\n  get disabled(): boolean { return this._disabled; }\n  private _disabled: boolean = false;\n\n  /** Value changes event */\n  @Output() valueChange = new EventEmitter<string>();\n\n  /** Keyboard expanded event */\n  @Output() expanded = new EventEmitter<void>();\n\n  /** Send message event */\n  @Output() send = new EventEmitter<string>();\n\n  constructor(private utils: EmojiUtils, @Inject(HasTouchScreen) readonly touch: boolean) { }\n\n  /** Types in the input the specified key */\n  public typein(key: string) {\n    // Uses the TypeInAdapter to insert the key at the current cursr position preventing default to avoid losing focus\n    return this.typeinAdapter?.typein(key), false;\n  }\n\n  /** Toggles emoji keyboard on/off */\n  public toggleEmojiKeys() {\n    // Prevents default to avoid loosing focus (mousedown)\n    return this.emojiKeysPanel.toggle(), false;\n  }\n\n  /** Returns the globally used emoji mode */\n  public get mode(): 'native'|'web' {\n    // Use the very same emoji mode from EmojiSupportModule\n    return this.utils.emojiMode(); \n  }\n\n  /** Selectes how inputs respond to 'Enter' key. */\n  public get enterMode() {\n    // Always insert a newline when running on touch enabled devices.\n    // Require the 'Shift' key otherwise.\n    return this.touch ? 'always' : 'shift';\n  }\n\n  /** Sends the message on 'Enter' */\n  public sendOnEnter(ev: KeyboardEvent) {\n    // Sends on 'Enter' only on non-touch enabled devices\n    return (this.touch || ev.shiftKey || ev.key !== 'Enter') || this.sendNow();\n  }\n\n  public get valid(): boolean {\n    return (this.value || '').match(/^\\s*$/) === null;\n  }\n\n  /** Sends the message emitting the relevant event */\n  public sendNow() {\n\n    this.valid && this.send.emit( this.value );\n    return false;\n  }\n}\n","\n<!-- Loads the localized content -->\n<ng-container *wmContent=\"let msgs select 'chat.composer'\">\n\n  <div class=\"input\" fxLayout=\"row\" fxLayoutAlign=\"center end\" (keydown)=\"sendOnEnter($event)\">\n\n    <!-- Native Input for platforms supporting Emoji natively -->\n    <mat-form-field appearance=\"legacy\" fxFlex=\"1 1 auto\" *ngIf=\"mode === 'native'; else webMode\">\n      <mat-label>{{ msgs.placeholder || 'Type a message' }}</mat-label>\n      <textarea matInput typein [(value)]=\"value\" [newline]=\"enterMode\" [disabled]=\"disabled\" cdkTextareaAutosize cdkAutosizeMinRows=\"1\">\n      </textarea>\n      <wm-icon class=\"tools\" inline matSuffix \n               [class.color-disabled]=\"disabled\"\n               [icon]=\"msgs.emoji?.icon || 'insert_emoticon'\"                \n               [matTooltip]=\"msgs.emoji?.tooltip || 'Insert an emoji'\" \n               (mousedown)=\"!disabled && toggleEmojiKeys()\">\n        </wm-icon>\n    </mat-form-field>\n\n    <!-- Emoji Input for the Web -->\n    <ng-template #webMode>\n      <mat-form-field appearance=\"legacy\" fxFlex=\"1 1 auto\">\n        <mat-label>{{ msgs.placeholder || 'Type a message' }}</mat-label>\n        <wm-emoji-input matEmoji typein [(value)]=\"value\" [newline]=\"enterMode\" [disabled]=\"disabled\"></wm-emoji-input>\n        <wm-icon class=\"tools\" inline matSuffix \n                 [class.color-disabled]=\"disabled\"\n                 [icon]=\"msgs.emoji?.icon || 'insert_emoticon'\"                \n                 [matTooltip]=\"msgs.emoji?.tooltip || 'Insert an emoji'\" \n                 (mousedown)=\"!disabled && toggleEmojiKeys()\">\n        </wm-icon>\n      </mat-form-field>\n    </ng-template>\n\n    <!-- Send button -->\n    <button mat-icon-button [disabled]=\"disabled || !valid\" (mousedown)=\"sendNow()\">\n      <wm-icon [icon]=\"msgs.send?.icon || 'send'\" [matTooltip]=\"msgs.send?.tooltip || 'Send'\" ></wm-icon>\n    </button>\n\n  </div>\n\n  <!-- On Demand Emoji Keyboard -->\n  <mat-expansion-panel class=\"padding-0 mat-elevation-z0\" (afterExpand)=\"expanded.emit()\" hideToggle>\n  \n    <wm-emoji-keyboard [favorites]=\"keys\" [mode]=\"mode\" (keyPressed)=\"!disabled && typein($event)\"></wm-emoji-keyboard>\n\n  </mat-expansion-panel>\n\n</ng-container>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { EmojiTextModule } from '@wizdm/emoji/text';\nimport { IconModule } from '@wizdm/elements/icon';\nimport { BalloonModule } from '@wizdm/elements/balloon';\nimport { MomentPipesModule } from '@wizdm/pipes/moment';\nimport { PipesModule } from '@wizdm/connect/database/pipes';\nimport { ContentModule } from '@wizdm/content';\nimport { Message } from './message.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule,\n    MatIconModule,\n    MatMenuModule,\n    EmojiTextModule,\n    IconModule,\n    BalloonModule,\n    MomentPipesModule,\n    PipesModule,\n    ContentModule\n  ],\n  declarations: [ Message ],\n  exports: [ Message ]\n})\nexport class MessageModule { }\n","import { Directive, TemplateRef, Input, OnInit, OnDestroy, OnChanges, SimpleChanges } from '@angular/core';\nimport { TeleportService } from '@wizdm/teleport';\n\nexport interface ToolbarOptions {\n  align?: string;\n  gap?: string;\n}\n\n@Directive({\n  selector: 'ng-template[wmToolbar]'\n})\nexport class ToolbarDirective implements OnInit, OnChanges, OnDestroy {\n\n  constructor(private teleport: TeleportService, private template: TemplateRef<any>) { }\n\n  /** The flex alignement */\n  @Input() wmToolbarAlign: string;\n\n  /** The flex gap */\n  @Input() wmToolbarGap: string;\n\n  // Activates the toolbar portal\n  ngOnInit() { \n    \n    this.teleport.activate('toolbar', this.template, {\n      align: this.wmToolbarAlign,\n      gap: this.wmToolbarGap\n    } as ToolbarOptions);\n  }\n\n  // Refreshes on input change\n  ngOnChanges(changes: SimpleChanges) { this.ngOnInit(); }\n\n  // Releases the portal when done\n  ngOnDestroy() { this.teleport.clear('toolbar', this.template); }\n}\n","export * from './conversation.component';\nexport * from './conversation.module';","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatBadgeModule } from '@angular/material/badge';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { EmojiTextModule } from '@wizdm/emoji/text';\nimport { ReadmeModule } from '@wizdm/readme';\nimport { AvatarModule } from '@wizdm/elements/avatar';\nimport { DialogModule } from '@wizdm/elements/dialog';\nimport { ContentModule } from '@wizdm/content';\nimport { MomentPipesModule } from '@wizdm/pipes/moment';\nimport { PipesModule } from '@wizdm/connect/database/pipes';\nimport { Conversation } from './conversation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    FlexLayoutModule,\n    MatBadgeModule,\n    MatButtonModule,\n    MatIconModule,\n    MatMenuModule,\n    MatProgressBarModule,\n    EmojiTextModule,\n    ReadmeModule,\n    AvatarModule,\n    DialogModule,\n    ContentModule,\n    MomentPipesModule,\n    PipesModule\n  ],\n  declarations: [ Conversation ],\n  exports: [ Conversation ],\n})\nexport class ConversationModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { ContentModule } from '@wizdm/content';\nimport { IconModule } from '@wizdm/elements/icon';\nimport { EmojiInputModule } from '@wizdm/emoji/input';\nimport { EmojiMaterialModule } from '@wizdm/emoji/material';\nimport { EmojiKeyboardModule } from '@wizdm/emoji-keyboard';\nimport { TextareaModule } from 'app/utils/textarea';\nimport { MessageComposer } from './composer.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FlexLayoutModule, \n    MatButtonModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatExpansionModule,\n    MatTooltipModule,\n    EmojiInputModule,\n    EmojiMaterialModule,\n    EmojiKeyboardModule,\n    ContentModule,\n    IconModule,\n    TextareaModule\n  ],\n  declarations: [ MessageComposer ],\n  exports: [ MessageComposer ]\n})\nexport class ComposerModule { }\n","export * from './message.component';\nexport * from './message.module';","import { Component, Input, HostBinding, ViewEncapsulation } from '@angular/core';\nimport { ThemePalette } from '@angular/material/core'\n\n@Component({\n  selector: 'wm-balloon',\n  templateUrl: './balloon.component.html',\n  styleUrls: ['./balloon.component.scss'],\n  host: { 'class': 'wm-balloon' },\n  encapsulation: ViewEncapsulation.None\n})\nexport class BalloonComponent  {\n\n  @HostBinding('attr.side')\n  @Input() side: 'left'|'top'|'right'|'bottom';\n\n  @HostBinding('attr.anchor')\n  @Input() anchor: 'start'|'center'|'end';\n\n  @HostBinding('attr.color')\n  @Input() color: ThemePalette;\n}","\n<div class=\"balloon-content\">\n\n  <ng-content></ng-content>\n  \n</div>","import { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { query, get } from '@wizdm/connect/database/collection/operators';\nimport { DatabaseCollection } from '@wizdm/connect/database/collection';\nimport { DatabaseService } from '@wizdm/connect/database';\nimport { map, take, switchMap } from 'rxjs/operators';\nimport { UserProfile } from 'app/utils/user';\nimport { ConversationData } from './chat-types';\nimport { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\n\n/** Redirects to the latest conversation, if any */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService extends DatabaseCollection<ConversationData> implements CanActivate {\n\n  private get me(): string { return this.user.uid; }\n\n  constructor(db: DatabaseService, private user: UserProfile, private router: Router) { \n    super(db, 'conversations');\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n\n    // Gets the requested recipient to chat to, if any\n    const userName = route.queryParamMap.get('with');\n\n    // Prevents starting up a conversation on wrong conditions\n    if(!this.user.auth.authenticated || userName == this.user.data?.userName) { \n      return false; \n    }\n\n    // Initiate a conversation with the requested user\n    if(userName) {\n\n      // Skip unknown users. This may be a result of:\n      // 1. a deleted conversation (where the user has been removed from the recipients)\n      // 2. a conversation with a user that no longer exists\n      if(userName.startsWith('unknown-')) { return of(true); }\n\n      // Resolves the user from the @username next\n      return this.user.fromUserName(userName).pipe( take(1), switchMap( user => {\n\n        // Prevents initiating a chat with non existing users or myself\n        if(!user || user.id === this.me) { return of(false); }\n\n        // Computes the path for the requested conversation\n        const ref = this.ref.doc( this.me < user.id ? this.me.concat(user.id) : user.id.concat(this.me) );\n        \n        // Uses an array union to fill in the recipients array atomically\n        const recipients: any = this.db.arrayUnion(this.user.uid, user.id);\n\n        // Runs a transaction to verify the converstion exists\n        return this.db.transaction(trx => {            \n\n          // Read the conversation first\n          return trx.snap(ref).then( ({ exists }) => {\n\n            // Ensures the recipients contains both sender and receiver.\n            // This is needed since the exisiting conversarion may contain only one party (or none if we are in the middle of a deletion).\n            // Using an array union with a merge ensure the array preserves the original values while the missing ones will be appended.\n            if(exists) { trx.merge(ref, { recipients }); }\n\n            // ... or creates the conversatin from scratch\n            else { trx.set(ref, { recipients }); }\n\n            // Returns true for the routing to proceed\n            return true;\n          });\n        });\n      }));\n    }\n\n    // Resolves the last user we talked to otherwise...\n    return this.pipe( \n\n      // Gets the last conversation we updated\n      query( qf => qf.where('recipients', 'array-contains', this.me).orderBy('updated', 'desc').limit(1) ), get(),\n      \n      // Switches to the sender\n      switchMap( snap => {\n\n        // Simply go throught when no conversation found\n        if(snap.empty) { return of(true); }\n        \n        // Gets the document data\n        const data = snap.docs[0].data();\n        \n        // Seeks for the sender id among recipients\n        const sender = data.recipients.find( recipient => recipient != this.me );\n        \n        // Resolves the user from the sender id. At this point the sender might be null as a result of a conversatrion\n        // partially deleted by the other party.\n        return this.user.fromUserId(sender).pipe( take(1), map( user => {\n\n          // Gets the @username falling back to the unknown user when missing\n          const userName = user?.userName || `unknown-${snap.docs[0].id}`;\n                    \n          // Redirects to the very same route including the user name this time\n          return this.router.createUrlTree(state.url.split('/'), {\n            queryParams: {\n              with: userName\n            }\n          });\n        }));\n      })      \n    );\n  }\n}\n","import { Component, Input, Output, EventEmitter, ViewChild, HostListener } from '@angular/core';\nimport { map, takeWhile, startWith, distinctUntilChanged } from 'rxjs/operators';\nimport { QueryDocumentSnapshot } from '@wizdm/connect/database/collection';\nimport { DatabaseDocument } from '@wizdm/connect/database/document';\nimport { UserProfile, UserData } from 'app/utils/user';\nimport { DatabaseService } from '@wizdm/connect/database';\nimport { MatMenuTrigger } from '@angular/material/menu';\nimport { MessageData } from '../chat-types';\nimport { Observable } from 'rxjs';\n\n/** Chat message component */\n@Component({\n  selector: 'wm-message',\n  templateUrl: './message.component.html',\n  styleUrls: ['./message.component.scss'],\n  host: { \n    \"class\": \"wm-message\",\n    \"[class.in]\": \"data?.sender !== me\",\n    \"[class.out]\": \"data?.sender === me\"\n  }\n})\nexport class Message extends DatabaseDocument<MessageData> {\n\n  /** Sender observavble */\n  public sender$: Observable<UserData>; \n  /** Deleted observable. Emits true (and completes) whenever the message gets deleted */\n  public deleted$: Observable<boolean>;\n  /** Message data/body from the query snapshot */\n  public data: MessageData;\n  \n  /** The conversation id */\n  get id(): string { return this.data.id; }\n  /** The current user's id */\n  get me(): string { return this.user.uid; }\n\n  constructor(db: DatabaseService, private user: UserProfile) {\n    super(db);\n  }\n\n  /** The previous message sender */\n  @Input() thread: string;\n\n  /** Message snaphot */\n  @Input() set message(message: QueryDocumentSnapshot<MessageData>) {\n\n    // Unwraps the snapshot\n    this.data = this.unwrap(message);\n\n    // Resolve the sender data\n    this.sender$ = this.user.fromUserId(this.data.sender);\n\n    // Creates an observable to monitor this document deletion across devices.\n    this.deleted$ = this.asObservable().pipe( \n      // Monitors the exists flag      \n      map( snap => !snap.exists ), startWith( !message.exists ),      \n      // Filters for changes and completes when deleted\n      takeWhile(deleted => !deleted, true),  distinctUntilChanged()\n    );\n\n    // Emits the data payload\n    this.dataChange.emit(this.data);\n  }\n\n  // Gets the menu trigger\n  @ViewChild(MatMenuTrigger) private menuTrigger: MatMenuTrigger;\n  @HostListener('contextmenu') onContextMenu() {\n    // Opens the menu on contextmenu event  \n    this.menuTrigger?.openMenu();\n    // Prevents default\n    return false;\n  }\n\n  /** Emits the unwrapped message data */\n  @Output('data') dataChange = new EventEmitter<MessageData>();\n}","\n<!-- Loads the localized content -->\n<ng-container *wmContent=\"let msgs select 'chat.message'\">\n\n  <!-- Message balloon -->\n  <wm-balloon [color]=\"data?.sender === me ? 'accent' : 'primary'\" \n              [side]=\"data?.sender === me ? 'right' : 'left'\" \n              [anchor]=\"data?.sender !== thread ? 'start' : ''\" \n              class=\"mat-elevation-z2\">\n\n    <div fxLayout=\"column\" fxLayoutAlign=\"start stretch\" fxLayoutGap=\"2px\">\n\n      <!-- Sender full name -->\n      <div *ngIf=\"data?.sender !== thread\"><b>{{ (sender$ | async)?.fullName }}</b></div>\n\n      <!-- Message body -->\n      <div fxLayout=\"row\">\n\n        <!-- Deleted message -->\n        <span class=\"deleted\" *ngIf=\"deleted$ | async; else messageBody\">\n          <wm-icon [icon]=\"msgs.delete?.icon || 'error_outline'\"></wm-icon>\n          <span>{{ msgs.delete?.message || 'This message has been deleted' }}</span>\n        </span>\n\n        <!-- Message body template -->\n        <ng-template #messageBody><span [wm-emoji-text]=\"data?.body\"></span></ng-template>\n\n        <!-- Spaces the end of the text to clear the time -->\n        <span class=\"spacer\"></span>\n\n        <!-- Message time -->\n        <time class=\"time mat-small\">{{ data?.created | timestamp | moment:msgs.timeFormat || 'LT' }}</time>\n\n        <!-- Message action menu (visible to the sender only) -->\n        <ng-container *ngIf=\"data?.sender === me\">\n\n          <!-- Menu button-->\n          <mat-icon class=\"menu\" [matMenuTriggerFor]=\"menu\">expand_more</mat-icon>\n\n          <mat-menu #menu=\"matMenu\">\n\n            <!-- Delete message -->\n            <button mat-menu-item (click)=\"delete()\">{{ msgs.delete?.label || 'Delete message' }}</button>\n\n          </mat-menu>\n      \n        </ng-container>\n\n      </div><!-- Body -->\n    \n    </div>\n\n  </wm-balloon>\n\n</ng-container>\n","export * from './pipes.pipe';\nexport * from './pipes.module';","import { SnapshotDataPipe, TimestampPipe, CreatedTimePipe, UpdatedTimePipe } from './pipes.pipe';\nimport { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [ SnapshotDataPipe, TimestampPipe, CreatedTimePipe, UpdatedTimePipe ],\n  exports: [ SnapshotDataPipe, TimestampPipe, CreatedTimePipe, UpdatedTimePipe ]\n})\nexport class PipesModule { }\n","import { NgModule } from '@angular/core';\nimport { TeleportModule } from '@wizdm/teleport';\nimport { StickyFooterDirective } from './sticky-footer.directive';\n\n@NgModule({\n  \n  imports: [ \n    //TeleportModule\n  ],\n  declarations: [\n    StickyFooterDirective\n  ],\n  exports: [\n    StickyFooterDirective\n  ]\n})\nexport class StickyFooterModule { }\n"],"sourceRoot":"webpack:///"}